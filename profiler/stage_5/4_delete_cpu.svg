<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1061"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1061"> </text>
<g id="frames">
<g>
<title>all (2,461 samples, 100.00%)</title><rect x="10.0" y="1027.0" width="1180.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.0" y="1038.0">all</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.04%)</title><rect x="10.0" y="1011.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.04%)</title><rect x="10.5" y="1011.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.5" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (3 samples, 0.12%)</title><rect x="11.0" y="1011.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="14.0" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (23 samples, 0.93%)</title><rect x="12.4" y="1011.0" width="11.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.4" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (4 samples, 0.16%)</title><rect x="13.8" y="995.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="16.8" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="14.3" y="979.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="17.3" y="990.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="14.3" y="963.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="17.3" y="974.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="14.3" y="947.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="17.3" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="14.3" y="931.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="17.3" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.04%)</title><rect x="14.3" y="915.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="17.3" y="926.0"></text>
</g>
<g>
<title>Monitor::lock() (1 samples, 0.04%)</title><rect x="14.3" y="899.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="17.3" y="910.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="14.3" y="883.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="17.3" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.04%)</title><rect x="14.8" y="979.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="17.8" y="990.0"></text>
</g>
<g>
<title>ObjArrayKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.04%)</title><rect x="14.8" y="963.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="17.8" y="974.0"></text>
</g>
<g>
<title>ObjArrayKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.04%)</title><rect x="15.3" y="979.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="18.3" y="990.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (16 samples, 0.65%)</title><rect x="15.8" y="995.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="18.8" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (16 samples, 0.65%)</title><rect x="15.8" y="979.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="18.8" y="990.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (15 samples, 0.61%)</title><rect x="15.8" y="963.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="18.8" y="974.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.04%)</title><rect x="16.7" y="947.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="19.7" y="958.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.04%)</title><rect x="16.7" y="931.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="19.7" y="942.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab(Klass*, HeapWord*, unsigned long, Thread*) (1 samples, 0.04%)</title><rect x="17.2" y="947.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="20.2" y="958.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.04%)</title><rect x="17.2" y="931.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="20.2" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.04%)</title><rect x="17.7" y="947.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="20.7" y="958.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.04%)</title><rect x="18.2" y="947.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="21.2" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (5 samples, 0.20%)</title><rect x="18.6" y="947.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="21.6" y="958.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.04%)</title><rect x="19.1" y="931.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="22.1" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (3 samples, 0.12%)</title><rect x="19.6" y="931.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="22.6" y="942.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.04%)</title><rect x="21.0" y="947.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="24.0" y="958.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.04%)</title><rect x="21.5" y="947.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="24.5" y="958.0"></text>
</g>
<g>
<title>__memset_erms (2 samples, 0.08%)</title><rect x="22.0" y="947.0" width="0.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="25.0" y="958.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.04%)</title><rect x="22.9" y="963.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="25.9" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="23.4" y="1011.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="26.4" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (16 samples, 0.65%)</title><rect x="23.9" y="1011.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="26.9" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="24.4" y="995.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="27.4" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (12 samples, 0.49%)</title><rect x="24.9" y="995.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="27.9" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (10 samples, 0.41%)</title><rect x="25.8" y="979.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="28.8" y="990.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (10 samples, 0.41%)</title><rect x="25.8" y="963.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="28.8" y="974.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.04%)</title><rect x="25.8" y="947.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="28.8" y="958.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.04%)</title><rect x="25.8" y="931.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="28.8" y="942.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.04%)</title><rect x="26.3" y="947.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="29.3" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.04%)</title><rect x="26.8" y="947.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="29.8" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (7 samples, 0.28%)</title><rect x="27.3" y="947.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="30.3" y="958.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (2 samples, 0.08%)</title><rect x="27.7" y="931.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="30.7" y="942.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.04%)</title><rect x="28.7" y="931.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="31.7" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (3 samples, 0.12%)</title><rect x="29.2" y="931.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="32.2" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.04%)</title><rect x="30.1" y="915.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="33.1" y="926.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.04%)</title><rect x="30.1" y="899.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="33.1" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.04%)</title><rect x="30.1" y="883.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="33.1" y="894.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.04%)</title><rect x="30.1" y="867.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="33.1" y="878.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.04%)</title><rect x="30.1" y="851.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="33.1" y="862.0"></text>
</g>
<g>
<title>Klass::class_loader() const (2 samples, 0.08%)</title><rect x="30.6" y="995.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="33.6" y="1006.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.20%)</title><rect x="31.6" y="1011.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="34.6" y="1022.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (5 samples, 0.20%)</title><rect x="31.6" y="995.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="34.6" y="1006.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.08%)</title><rect x="31.6" y="979.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="34.6" y="990.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.74] (2 samples, 0.08%)</title><rect x="31.6" y="963.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="34.6" y="974.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.96] (3 samples, 0.12%)</title><rect x="32.5" y="979.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="35.5" y="990.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.12%)</title><rect x="32.5" y="963.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="35.5" y="974.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.74] (1 samples, 0.04%)</title><rect x="32.5" y="947.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="35.5" y="958.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.04%)</title><rect x="33.0" y="947.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="36.0" y="958.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.04%)</title><rect x="33.5" y="947.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="36.5" y="958.0"></text>
</g>
<g>
<title>[not_walkable] (1 samples, 0.04%)</title><rect x="34.0" y="1011.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="37.0" y="1022.0"></text>
</g>
<g>
<title>[not_walkable_Java] (10 samples, 0.41%)</title><rect x="34.5" y="1011.0" width="4.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="37.5" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.24%)</title><rect x="34.5" y="995.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="37.5" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.24%)</title><rect x="34.5" y="979.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="37.5" y="990.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (3 samples, 0.12%)</title><rect x="34.5" y="963.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="37.5" y="974.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.12%)</title><rect x="34.5" y="947.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="37.5" y="958.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.12%)</title><rect x="35.9" y="963.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="38.9" y="974.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.04%)</title><rect x="36.4" y="947.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="39.4" y="958.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.04%)</title><rect x="36.9" y="947.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="39.9" y="958.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.04%)</title><rect x="36.9" y="931.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="39.9" y="942.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.04%)</title><rect x="36.9" y="915.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="39.9" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="37.3" y="995.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="40.3" y="1006.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (3 samples, 0.12%)</title><rect x="37.8" y="995.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="40.8" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="38.8" y="979.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="41.8" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="38.8" y="963.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="41.8" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="38.8" y="947.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="41.8" y="958.0"></text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.20%)</title><rect x="39.2" y="1011.0" width="2.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="42.2" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="41.2" y="995.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="44.2" y="1006.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.04%)</title><rect x="41.6" y="1011.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="44.6" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="41.6" y="995.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="44.6" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="41.6" y="979.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="44.6" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="41.6" y="963.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="44.6" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="41.6" y="947.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="44.6" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="41.6" y="931.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="44.6" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="41.6" y="915.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="44.6" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="41.6" y="899.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="44.6" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="41.6" y="883.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="44.6" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="41.6" y="867.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="44.6" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,728 samples, 70.22%)</title><rect x="42.1" y="1011.0" width="828.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="45.1" y="1022.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,728 samples, 70.22%)</title><rect x="42.1" y="995.0" width="828.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="45.1" y="1006.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,728 samples, 70.22%)</title><rect x="42.1" y="979.0" width="828.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.1" y="990.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>itable stub (1 samples, 0.04%)</title><rect x="43.1" y="963.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="46.1" y="974.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.08%)</title><rect x="43.6" y="963.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.6" y="974.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.08%)</title><rect x="43.6" y="947.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="46.6" y="958.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.04%)</title><rect x="44.0" y="931.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="47.0" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.04%)</title><rect x="44.0" y="915.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="47.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (590 samples, 23.97%)</title><rect x="44.5" y="963.0" width="282.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.5" y="974.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (532 samples, 21.62%)</title><rect x="44.5" y="947.0" width="255.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.5" y="958.0">java/util/concurrent/Executors$Run..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (532 samples, 21.62%)</title><rect x="44.5" y="931.0" width="255.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="47.5" y="942.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (4 samples, 0.16%)</title><rect x="45.0" y="915.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="48.0" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (4 samples, 0.16%)</title><rect x="45.0" y="899.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="48.0" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/HttpService$$Lambda$72/2116297974.call (527 samples, 21.41%)</title><rect x="46.9" y="915.0" width="252.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.9" y="926.0">ru/mail/polis/service/alex/HttpSer..</text>
</g>
<g>
<title>ru/mail/polis/service/alex/HttpService.lambda$getResponsesFromRelicas$0 (527 samples, 21.41%)</title><rect x="46.9" y="899.0" width="252.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="49.9" y="910.0">ru/mail/polis/service/alex/HttpSer..</text>
</g>
<g>
<title>java/util/LinkedList$Node.&lt;init&gt; (2 samples, 0.08%)</title><rect x="46.9" y="883.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="49.9" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/HttpService.proxy (525 samples, 21.33%)</title><rect x="47.9" y="883.0" width="251.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.9" y="894.0">ru/mail/polis/service/alex/HttpSe..</text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.33%)</title><rect x="48.8" y="867.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="51.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.24%)</title><rect x="48.8" y="851.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.8" y="862.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.04%)</title><rect x="50.8" y="835.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="53.8" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (1 samples, 0.04%)</title><rect x="51.2" y="835.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="54.2" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.08%)</title><rect x="51.7" y="851.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.7" y="862.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.04%)</title><rect x="52.2" y="835.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="55.2" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.04%)</title><rect x="52.2" y="819.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="55.2" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (515 samples, 20.93%)</title><rect x="52.7" y="867.0" width="246.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="55.7" y="878.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (515 samples, 20.93%)</title><rect x="52.7" y="851.0" width="246.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.7" y="862.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (6 samples, 0.24%)</title><rect x="53.2" y="835.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="56.2" y="846.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.24%)</title><rect x="53.2" y="819.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.04%)</title><rect x="53.2" y="803.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="56.2" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.20%)</title><rect x="53.6" y="803.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.6" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (110 samples, 4.47%)</title><rect x="56.0" y="835.0" width="52.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="59.0" y="846.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (110 samples, 4.47%)</title><rect x="56.0" y="819.0" width="52.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="59.0" y="830.0">one/n..</text>
</g>
<g>
<title>[unknown] (26 samples, 1.06%)</title><rect x="57.9" y="803.0" width="12.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="60.9" y="814.0"></text>
</g>
<g>
<title>[unknown] (26 samples, 1.06%)</title><rect x="57.9" y="787.0" width="12.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="60.9" y="798.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (24 samples, 0.98%)</title><rect x="57.9" y="771.0" width="11.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="60.9" y="782.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.08%)</title><rect x="58.9" y="755.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="61.9" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="59.4" y="739.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="62.4" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="59.4" y="723.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="62.4" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="59.4" y="707.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="62.4" y="718.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.08%)</title><rect x="59.9" y="755.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="62.9" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (2 samples, 0.08%)</title><rect x="60.8" y="755.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="63.8" y="766.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (2 samples, 0.08%)</title><rect x="61.8" y="755.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="64.8" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (10 samples, 0.41%)</title><rect x="62.7" y="755.0" width="4.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="65.7" y="766.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.08%)</title><rect x="64.2" y="739.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="67.2" y="750.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="65.1" y="739.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="68.1" y="750.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="65.6" y="739.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="68.6" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="65.6" y="723.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="68.6" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="65.6" y="707.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="68.6" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="65.6" y="691.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="68.6" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (2 samples, 0.08%)</title><rect x="66.1" y="739.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="69.1" y="750.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.04%)</title><rect x="67.1" y="739.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="70.1" y="750.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.04%)</title><rect x="67.5" y="755.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="70.5" y="766.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.12%)</title><rect x="68.0" y="755.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="71.0" y="766.0"></text>
</g>
<g>
<title>__GI___recv (1 samples, 0.04%)</title><rect x="69.5" y="771.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="72.5" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.04%)</title><rect x="69.9" y="771.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="72.9" y="782.0"></text>
</g>
<g>
<title>__GI___recv (78 samples, 3.17%)</title><rect x="70.4" y="803.0" width="37.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="73.4" y="814.0">__G..</text>
</g>
<g>
<title>[unknown] (76 samples, 3.09%)</title><rect x="71.4" y="787.0" width="36.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="74.4" y="798.0">[un..</text>
</g>
<g>
<title>[unknown] (76 samples, 3.09%)</title><rect x="71.4" y="771.0" width="36.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="74.4" y="782.0">[un..</text>
</g>
<g>
<title>[unknown] (76 samples, 3.09%)</title><rect x="71.4" y="755.0" width="36.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="74.4" y="766.0">[un..</text>
</g>
<g>
<title>[unknown] (75 samples, 3.05%)</title><rect x="71.9" y="739.0" width="35.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="74.9" y="750.0">[un..</text>
</g>
<g>
<title>[unknown] (72 samples, 2.93%)</title><rect x="73.3" y="723.0" width="34.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="76.3" y="734.0">[u..</text>
</g>
<g>
<title>[unknown] (70 samples, 2.84%)</title><rect x="74.3" y="707.0" width="33.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="77.3" y="718.0">[u..</text>
</g>
<g>
<title>[unknown] (66 samples, 2.68%)</title><rect x="76.2" y="691.0" width="31.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="79.2" y="702.0">[u..</text>
</g>
<g>
<title>[unknown] (59 samples, 2.40%)</title><rect x="79.5" y="675.0" width="28.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="82.5" y="686.0">[u..</text>
</g>
<g>
<title>[unknown] (50 samples, 2.03%)</title><rect x="83.8" y="659.0" width="24.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="86.8" y="670.0">[..</text>
</g>
<g>
<title>[unknown] (40 samples, 1.63%)</title><rect x="88.6" y="643.0" width="19.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="91.6" y="654.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 1.18%)</title><rect x="93.9" y="627.0" width="13.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="96.9" y="638.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.77%)</title><rect x="98.7" y="611.0" width="9.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="101.7" y="622.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.49%)</title><rect x="102.1" y="595.0" width="5.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="105.1" y="606.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.16%)</title><rect x="105.9" y="579.0" width="1.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="108.9" y="590.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.16%)</title><rect x="105.9" y="563.0" width="1.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="108.9" y="574.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.16%)</title><rect x="105.9" y="547.0" width="1.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="108.9" y="558.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.12%)</title><rect x="106.4" y="531.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="109.4" y="542.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.12%)</title><rect x="106.4" y="515.0" width="1.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="109.4" y="526.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="106.9" y="499.0" width="0.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="109.9" y="510.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="107.3" y="483.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="110.3" y="494.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.08%)</title><rect x="107.8" y="803.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="110.8" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (47 samples, 1.91%)</title><rect x="108.8" y="835.0" width="22.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.8" y="846.0">o..</text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.04%)</title><rect x="111.2" y="819.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="114.2" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.04%)</title><rect x="111.2" y="803.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="114.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.08%)</title><rect x="111.6" y="819.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="114.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.28%)</title><rect x="112.6" y="819.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="115.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.08%)</title><rect x="112.6" y="803.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="115.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.08%)</title><rect x="112.6" y="787.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="115.6" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.20%)</title><rect x="113.6" y="803.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="116.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="114.0" y="787.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="117.0" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.12%)</title><rect x="114.5" y="787.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.5" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.16%)</title><rect x="116.0" y="819.0" width="1.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="119.0" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (16 samples, 0.65%)</title><rect x="117.9" y="819.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="120.9" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 0.61%)</title><rect x="118.4" y="803.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="121.4" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 0.61%)</title><rect x="118.4" y="787.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="121.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.08%)</title><rect x="123.6" y="771.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="126.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (1 samples, 0.04%)</title><rect x="124.1" y="755.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="127.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (1 samples, 0.04%)</title><rect x="124.1" y="739.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="127.1" y="750.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (2 samples, 0.08%)</title><rect x="124.6" y="771.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="127.6" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.20%)</title><rect x="125.6" y="819.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="128.6" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.04%)</title><rect x="127.5" y="803.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="130.5" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (5 samples, 0.20%)</title><rect x="128.0" y="819.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="131.0" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.20%)</title><rect x="128.0" y="803.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="131.0" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.16%)</title><rect x="128.4" y="787.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="131.4" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (2 samples, 0.08%)</title><rect x="130.3" y="819.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="133.3" y="830.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.08%)</title><rect x="130.3" y="803.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="133.3" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.08%)</title><rect x="130.3" y="787.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="133.3" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (20 samples, 0.81%)</title><rect x="131.3" y="835.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="134.3" y="846.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.04%)</title><rect x="132.3" y="819.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="135.3" y="830.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (11 samples, 0.45%)</title><rect x="132.7" y="819.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="135.7" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="132.7" y="803.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="135.7" y="814.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.08%)</title><rect x="133.2" y="803.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="136.2" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.20%)</title><rect x="134.2" y="803.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="137.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="135.1" y="787.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="138.1" y="798.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.04%)</title><rect x="135.6" y="787.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="138.6" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="136.1" y="787.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="139.1" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.12%)</title><rect x="136.6" y="803.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="139.6" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.12%)</title><rect x="136.6" y="787.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="139.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="137.5" y="771.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="140.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.04%)</title><rect x="137.5" y="755.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="140.5" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 0.24%)</title><rect x="138.0" y="819.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="141.0" y="830.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.08%)</title><rect x="139.9" y="803.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="142.9" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.08%)</title><rect x="139.9" y="787.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="142.9" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (6 samples, 0.24%)</title><rect x="140.9" y="835.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="143.9" y="846.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.24%)</title><rect x="140.9" y="819.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="143.9" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.24%)</title><rect x="140.9" y="803.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="143.9" y="814.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.12%)</title><rect x="141.9" y="787.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="144.9" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.12%)</title><rect x="141.9" y="771.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="144.9" y="782.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (3 samples, 0.12%)</title><rect x="141.9" y="755.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="144.9" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.08%)</title><rect x="142.3" y="739.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="145.3" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.04%)</title><rect x="143.3" y="787.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="146.3" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.04%)</title><rect x="143.3" y="771.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="146.3" y="782.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.04%)</title><rect x="143.3" y="755.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="146.3" y="766.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (42 samples, 1.71%)</title><rect x="143.8" y="835.0" width="20.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.8" y="846.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (3 samples, 0.12%)</title><rect x="144.7" y="819.0" width="1.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="147.7" y="830.0"></text>
</g>
<g>
<title>__GI___setsockopt (37 samples, 1.50%)</title><rect x="146.2" y="819.0" width="17.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="149.2" y="830.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 1.30%)</title><rect x="148.6" y="803.0" width="15.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="151.6" y="814.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 1.30%)</title><rect x="148.6" y="787.0" width="15.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="151.6" y="798.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 1.18%)</title><rect x="150.0" y="771.0" width="13.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="153.0" y="782.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 1.18%)</title><rect x="150.0" y="755.0" width="13.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="153.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 1.18%)</title><rect x="150.0" y="739.0" width="13.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="153.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.89%)</title><rect x="153.4" y="723.0" width="10.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="156.4" y="734.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.65%)</title><rect x="156.2" y="707.0" width="7.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="159.2" y="718.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.41%)</title><rect x="159.1" y="691.0" width="4.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="162.1" y="702.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.16%)</title><rect x="162.0" y="675.0" width="1.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="165.0" y="686.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.12%)</title><rect x="162.5" y="659.0" width="1.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="165.5" y="670.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="163.0" y="643.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="166.0" y="654.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (279 samples, 11.34%)</title><rect x="163.9" y="835.0" width="133.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="166.9" y="846.0">one/nio/net/Nativ..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (6 samples, 0.24%)</title><rect x="164.9" y="819.0" width="2.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="167.9" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (1 samples, 0.04%)</title><rect x="165.4" y="803.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="168.4" y="814.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.12%)</title><rect x="165.8" y="803.0" width="1.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="168.8" y="814.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.04%)</title><rect x="166.3" y="787.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="169.3" y="798.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.04%)</title><rect x="166.8" y="787.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="169.8" y="798.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.04%)</title><rect x="167.3" y="803.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="170.3" y="814.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.04%)</title><rect x="167.7" y="819.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="170.7" y="830.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.04%)</title><rect x="168.2" y="819.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="171.2" y="830.0"></text>
</g>
<g>
<title>__send (269 samples, 10.93%)</title><rect x="168.7" y="819.0" width="129.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="171.7" y="830.0">__send</text>
</g>
<g>
<title>[unknown] (268 samples, 10.89%)</title><rect x="169.2" y="803.0" width="128.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="172.2" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (268 samples, 10.89%)</title><rect x="169.2" y="787.0" width="128.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="172.2" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (264 samples, 10.73%)</title><rect x="171.1" y="771.0" width="126.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="174.1" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (262 samples, 10.65%)</title><rect x="172.1" y="755.0" width="125.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="175.1" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (261 samples, 10.61%)</title><rect x="172.5" y="739.0" width="125.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="175.5" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (258 samples, 10.48%)</title><rect x="174.0" y="723.0" width="123.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="177.0" y="734.0">[unknown]</text>
</g>
<g>
<title>[unknown] (255 samples, 10.36%)</title><rect x="175.4" y="707.0" width="122.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="178.4" y="718.0">[unknown]</text>
</g>
<g>
<title>[unknown] (253 samples, 10.28%)</title><rect x="176.4" y="691.0" width="121.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="179.4" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (246 samples, 10.00%)</title><rect x="179.7" y="675.0" width="118.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="182.7" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (236 samples, 9.59%)</title><rect x="184.5" y="659.0" width="113.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="187.5" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (224 samples, 9.10%)</title><rect x="190.3" y="643.0" width="107.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="193.3" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (214 samples, 8.70%)</title><rect x="195.1" y="627.0" width="102.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="198.1" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (208 samples, 8.45%)</title><rect x="198.0" y="611.0" width="99.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="201.0" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (198 samples, 8.05%)</title><rect x="202.8" y="595.0" width="94.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="205.8" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (191 samples, 7.76%)</title><rect x="206.1" y="579.0" width="91.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="209.1" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (189 samples, 7.68%)</title><rect x="207.1" y="563.0" width="90.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="210.1" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (186 samples, 7.56%)</title><rect x="208.5" y="547.0" width="89.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="211.5" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (177 samples, 7.19%)</title><rect x="212.8" y="531.0" width="84.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="215.8" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (171 samples, 6.95%)</title><rect x="215.7" y="515.0" width="82.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="218.7" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (163 samples, 6.62%)</title><rect x="219.5" y="499.0" width="78.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="222.5" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (146 samples, 5.93%)</title><rect x="227.7" y="483.0" width="70.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="230.7" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (139 samples, 5.65%)</title><rect x="231.0" y="467.0" width="66.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="234.0" y="478.0">[unknown]</text>
</g>
<g>
<title>[unknown] (128 samples, 5.20%)</title><rect x="236.3" y="451.0" width="61.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="239.3" y="462.0">[unkno..</text>
</g>
<g>
<title>[unknown] (117 samples, 4.75%)</title><rect x="241.6" y="435.0" width="56.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="244.6" y="446.0">[unkno..</text>
</g>
<g>
<title>[unknown] (116 samples, 4.71%)</title><rect x="242.1" y="419.0" width="55.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="245.1" y="430.0">[unkn..</text>
</g>
<g>
<title>[unknown] (115 samples, 4.67%)</title><rect x="242.5" y="403.0" width="55.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="245.5" y="414.0">[unkn..</text>
</g>
<g>
<title>[unknown] (114 samples, 4.63%)</title><rect x="243.0" y="387.0" width="54.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="246.0" y="398.0">[unkn..</text>
</g>
<g>
<title>[unknown] (106 samples, 4.31%)</title><rect x="246.9" y="371.0" width="50.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="249.9" y="382.0">[unkn..</text>
</g>
<g>
<title>[unknown] (103 samples, 4.19%)</title><rect x="248.3" y="355.0" width="49.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="251.3" y="366.0">[unkn..</text>
</g>
<g>
<title>[unknown] (100 samples, 4.06%)</title><rect x="249.7" y="339.0" width="48.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="252.7" y="350.0">[unk..</text>
</g>
<g>
<title>[unknown] (100 samples, 4.06%)</title><rect x="249.7" y="323.0" width="48.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="252.7" y="334.0">[unk..</text>
</g>
<g>
<title>[unknown] (98 samples, 3.98%)</title><rect x="250.7" y="307.0" width="47.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="253.7" y="318.0">[unk..</text>
</g>
<g>
<title>[unknown] (90 samples, 3.66%)</title><rect x="254.5" y="291.0" width="43.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="257.5" y="302.0">[unk..</text>
</g>
<g>
<title>[unknown] (81 samples, 3.29%)</title><rect x="258.9" y="275.0" width="38.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="261.9" y="286.0">[un..</text>
</g>
<g>
<title>[unknown] (76 samples, 3.09%)</title><rect x="261.2" y="259.0" width="36.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="264.2" y="270.0">[un..</text>
</g>
<g>
<title>[unknown] (59 samples, 2.40%)</title><rect x="269.4" y="243.0" width="28.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="272.4" y="254.0">[u..</text>
</g>
<g>
<title>[unknown] (48 samples, 1.95%)</title><rect x="274.7" y="227.0" width="23.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="277.7" y="238.0">[..</text>
</g>
<g>
<title>[unknown] (43 samples, 1.75%)</title><rect x="277.1" y="211.0" width="20.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="280.1" y="222.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 1.67%)</title><rect x="278.0" y="195.0" width="19.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="281.0" y="206.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="297.2" y="179.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="300.2" y="190.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="297.2" y="163.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="300.2" y="174.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (4 samples, 0.16%)</title><rect x="297.7" y="835.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="300.7" y="846.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (1 samples, 0.04%)</title><rect x="299.1" y="819.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="302.1" y="830.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlinkFirst (1 samples, 0.04%)</title><rect x="299.1" y="803.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="302.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.set (52 samples, 2.11%)</title><rect x="299.6" y="947.0" width="24.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="302.6" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.finishCompletion (52 samples, 2.11%)</title><rect x="299.6" y="931.0" width="24.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="302.6" y="942.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ExecutorCompletionService$QueueingFuture.done (52 samples, 2.11%)</title><rect x="299.6" y="915.0" width="24.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.6" y="926.0">j..</text>
</g>
<g>
<title>java/util/AbstractQueue.add (52 samples, 2.11%)</title><rect x="299.6" y="899.0" width="24.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.6" y="910.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (52 samples, 2.11%)</title><rect x="299.6" y="883.0" width="24.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="302.6" y="894.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (46 samples, 1.87%)</title><rect x="299.6" y="867.0" width="22.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="302.6" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (46 samples, 1.87%)</title><rect x="299.6" y="851.0" width="22.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="302.6" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (46 samples, 1.87%)</title><rect x="299.6" y="835.0" width="22.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="302.6" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (46 samples, 1.87%)</title><rect x="299.6" y="819.0" width="22.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.6" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (46 samples, 1.87%)</title><rect x="299.6" y="803.0" width="22.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="302.6" y="814.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (46 samples, 1.87%)</title><rect x="299.6" y="787.0" width="22.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="302.6" y="798.0">j..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (1 samples, 0.04%)</title><rect x="299.6" y="771.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="302.6" y="782.0"></text>
</g>
<g>
<title>Unsafe_Unpark (13 samples, 0.53%)</title><rect x="300.1" y="771.0" width="6.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="303.1" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (1 samples, 0.04%)</title><rect x="300.1" y="755.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="303.1" y="766.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.04%)</title><rect x="300.6" y="755.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="303.6" y="766.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.16%)</title><rect x="301.0" y="755.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="304.0" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (3 samples, 0.12%)</title><rect x="303.0" y="755.0" width="1.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="306.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="303.9" y="739.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="306.9" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="303.9" y="723.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="306.9" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="303.9" y="707.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="306.9" y="718.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="304.4" y="755.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="307.4" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.04%)</title><rect x="304.9" y="755.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="307.9" y="766.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.08%)</title><rect x="305.4" y="755.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="308.4" y="766.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (32 samples, 1.30%)</title><rect x="306.3" y="771.0" width="15.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="309.3" y="782.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 1.22%)</title><rect x="307.3" y="755.0" width="14.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="310.3" y="766.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 1.22%)</title><rect x="307.3" y="739.0" width="14.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="310.3" y="750.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 1.22%)</title><rect x="307.3" y="723.0" width="14.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="310.3" y="734.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 1.18%)</title><rect x="307.8" y="707.0" width="13.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="310.8" y="718.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 1.18%)</title><rect x="307.8" y="691.0" width="13.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="310.8" y="702.0"></text>
</g>
<g>
<title>[unknown] (26 samples, 1.06%)</title><rect x="309.2" y="675.0" width="12.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="312.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.89%)</title><rect x="311.1" y="659.0" width="10.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="314.1" y="670.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.85%)</title><rect x="311.6" y="643.0" width="10.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="314.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.04%)</title><rect x="321.7" y="867.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="324.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.04%)</title><rect x="321.7" y="851.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="324.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.20%)</title><rect x="322.1" y="867.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="325.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.20%)</title><rect x="322.1" y="851.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (4 samples, 0.16%)</title><rect x="322.1" y="835.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="325.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.04%)</title><rect x="322.6" y="819.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="325.6" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.04%)</title><rect x="322.6" y="803.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="325.6" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.04%)</title><rect x="322.6" y="787.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.6" y="798.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.04%)</title><rect x="322.6" y="771.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.08%)</title><rect x="323.1" y="819.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="326.1" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.08%)</title><rect x="323.1" y="803.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="326.1" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (2 samples, 0.08%)</title><rect x="323.1" y="787.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="326.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.04%)</title><rect x="324.1" y="835.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="327.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.04%)</title><rect x="324.1" y="819.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="327.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.04%)</title><rect x="324.1" y="803.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="327.1" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/HttpService$$Lambda$72/2116297974.call (6 samples, 0.24%)</title><rect x="324.5" y="947.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="327.5" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/HttpService.lambda$getResponsesFromRelicas$0 (6 samples, 0.24%)</title><rect x="324.5" y="931.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="327.5" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/HttpService.proxy (6 samples, 0.24%)</title><rect x="324.5" y="915.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="327.5" y="926.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (6 samples, 0.24%)</title><rect x="324.5" y="899.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="327.5" y="910.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (6 samples, 0.24%)</title><rect x="324.5" y="883.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="327.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (6 samples, 0.24%)</title><rect x="327.4" y="963.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.24%)</title><rect x="327.4" y="947.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="330.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (4 samples, 0.16%)</title><rect x="328.4" y="931.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.16%)</title><rect x="328.4" y="915.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="331.4" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (4 samples, 0.16%)</title><rect x="328.4" y="899.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="331.4" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (4 samples, 0.16%)</title><rect x="328.4" y="883.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="331.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.04%)</title><rect x="330.3" y="963.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="333.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.04%)</title><rect x="330.3" y="947.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="333.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (345 samples, 14.02%)</title><rect x="330.8" y="963.0" width="165.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="333.8" y="974.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (334 samples, 13.57%)</title><rect x="336.0" y="947.0" width="160.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="339.0" y="958.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (221 samples, 8.98%)</title><rect x="338.9" y="931.0" width="106.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="341.9" y="942.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.04%)</title><rect x="338.9" y="915.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="341.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.24%)</title><rect x="339.4" y="915.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="342.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.16%)</title><rect x="340.4" y="899.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="343.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.16%)</title><rect x="340.4" y="883.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="343.4" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="340.4" y="867.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="343.4" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="340.4" y="851.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="343.4" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="340.4" y="835.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="343.4" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="340.4" y="819.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="343.4" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="340.4" y="803.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="343.4" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="340.4" y="787.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="343.4" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="340.4" y="771.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="343.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.12%)</title><rect x="340.8" y="867.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="343.8" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.12%)</title><rect x="340.8" y="851.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="343.8" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.12%)</title><rect x="340.8" y="835.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="343.8" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="341.8" y="819.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="344.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="341.8" y="803.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="344.8" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="341.8" y="787.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="344.8" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="341.8" y="771.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="344.8" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="341.8" y="755.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="344.8" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="341.8" y="739.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="344.8" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="341.8" y="723.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="344.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.08%)</title><rect x="342.3" y="915.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="345.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.08%)</title><rect x="342.3" y="899.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="345.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.08%)</title><rect x="342.3" y="883.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (2 samples, 0.08%)</title><rect x="342.3" y="867.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="345.3" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.08%)</title><rect x="342.3" y="851.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="345.3" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.08%)</title><rect x="342.3" y="835.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="345.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (212 samples, 8.61%)</title><rect x="343.2" y="915.0" width="101.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="346.2" y="926.0">java/util/co..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (208 samples, 8.45%)</title><rect x="345.2" y="899.0" width="99.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="348.2" y="910.0">jdk/internal..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="347.1" y="883.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="350.1" y="894.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.08%)</title><rect x="347.6" y="883.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="350.6" y="894.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="348.5" y="883.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="351.5" y="894.0"></text>
</g>
<g>
<title>Unsafe_Park (74 samples, 3.01%)</title><rect x="349.0" y="883.0" width="35.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="352.0" y="894.0">Uns..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.08%)</title><rect x="353.8" y="867.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="356.8" y="878.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (19 samples, 0.77%)</title><rect x="354.7" y="867.0" width="9.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="357.7" y="878.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.12%)</title><rect x="359.5" y="851.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="362.5" y="862.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.04%)</title><rect x="361.0" y="851.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="364.0" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="361.5" y="851.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="364.5" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="361.5" y="835.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="364.5" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="361.5" y="819.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="364.5" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="361.5" y="803.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="364.5" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="361.5" y="787.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="364.5" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="361.5" y="771.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="364.5" y="782.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.16%)</title><rect x="361.9" y="851.0" width="2.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="364.9" y="862.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.08%)</title><rect x="363.9" y="867.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="366.9" y="878.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="364.8" y="867.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="367.8" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (3 samples, 0.12%)</title><rect x="365.3" y="867.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="368.3" y="878.0"></text>
</g>
<g>
<title>__lll_unlock_wake (19 samples, 0.77%)</title><rect x="366.7" y="867.0" width="9.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="369.7" y="878.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.73%)</title><rect x="367.2" y="851.0" width="8.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="370.2" y="862.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.73%)</title><rect x="367.2" y="835.0" width="8.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="370.2" y="846.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.53%)</title><rect x="369.6" y="819.0" width="6.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="372.6" y="830.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.53%)</title><rect x="369.6" y="803.0" width="6.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="372.6" y="814.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.37%)</title><rect x="371.5" y="787.0" width="4.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="374.5" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="374.9" y="771.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="377.9" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.08%)</title><rect x="375.8" y="867.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="378.8" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.12%)</title><rect x="376.8" y="867.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="379.8" y="878.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.08%)</title><rect x="378.2" y="867.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="381.2" y="878.0"></text>
</g>
<g>
<title>_init (2 samples, 0.08%)</title><rect x="379.2" y="867.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="382.2" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (4 samples, 0.16%)</title><rect x="380.2" y="867.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="383.2" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.04%)</title><rect x="382.1" y="867.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="385.1" y="878.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (4 samples, 0.16%)</title><rect x="382.6" y="867.0" width="1.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="385.6" y="878.0"></text>
</g>
<g>
<title>[unknown] (125 samples, 5.08%)</title><rect x="384.5" y="883.0" width="59.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="387.5" y="894.0">[unkno..</text>
</g>
<g>
<title>__pthread_cleanup_pop (1 samples, 0.04%)</title><rect x="384.5" y="867.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="387.5" y="878.0"></text>
</g>
<g>
<title>__pthread_cond_wait (115 samples, 4.67%)</title><rect x="385.0" y="867.0" width="55.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="388.0" y="878.0">__pth..</text>
</g>
<g>
<title>[unknown] (92 samples, 3.74%)</title><rect x="396.0" y="851.0" width="44.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="399.0" y="862.0">[unk..</text>
</g>
<g>
<title>[unknown] (92 samples, 3.74%)</title><rect x="396.0" y="835.0" width="44.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="399.0" y="846.0">[unk..</text>
</g>
<g>
<title>[unknown] (86 samples, 3.49%)</title><rect x="398.9" y="819.0" width="41.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="401.9" y="830.0">[un..</text>
</g>
<g>
<title>[unknown] (85 samples, 3.45%)</title><rect x="399.3" y="803.0" width="40.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="402.3" y="814.0">[un..</text>
</g>
<g>
<title>[unknown] (77 samples, 3.13%)</title><rect x="403.2" y="787.0" width="36.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="406.2" y="798.0">[un..</text>
</g>
<g>
<title>[unknown] (72 samples, 2.93%)</title><rect x="405.6" y="771.0" width="34.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="408.6" y="782.0">[u..</text>
</g>
<g>
<title>[unknown] (62 samples, 2.52%)</title><rect x="410.4" y="755.0" width="29.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="413.4" y="766.0">[u..</text>
</g>
<g>
<title>[unknown] (52 samples, 2.11%)</title><rect x="415.2" y="739.0" width="24.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="418.2" y="750.0">[..</text>
</g>
<g>
<title>[unknown] (50 samples, 2.03%)</title><rect x="416.1" y="723.0" width="24.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="419.1" y="734.0">[..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="439.1" y="707.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="442.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="439.1" y="691.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="442.1" y="702.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="439.1" y="675.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="442.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="439.1" y="659.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="442.1" y="670.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="439.1" y="643.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="442.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="439.6" y="627.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="442.6" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="439.6" y="611.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="442.6" y="622.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.08%)</title><rect x="440.1" y="867.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="443.1" y="878.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.12%)</title><rect x="441.1" y="867.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="444.1" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.04%)</title><rect x="442.5" y="867.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="445.5" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.04%)</title><rect x="443.0" y="867.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="446.0" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.08%)</title><rect x="443.4" y="867.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="446.4" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.04%)</title><rect x="444.4" y="883.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="447.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (33 samples, 1.34%)</title><rect x="444.9" y="931.0" width="15.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="447.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (33 samples, 1.34%)</title><rect x="444.9" y="915.0" width="15.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="447.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (28 samples, 1.14%)</title><rect x="444.9" y="899.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="447.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.predecessor (4 samples, 0.16%)</title><rect x="449.2" y="883.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="452.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.16%)</title><rect x="449.2" y="867.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="452.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.04%)</title><rect x="451.1" y="883.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="454.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.04%)</title><rect x="451.1" y="867.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="454.1" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.04%)</title><rect x="451.1" y="851.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="454.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.08%)</title><rect x="451.6" y="883.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="454.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.08%)</title><rect x="451.6" y="867.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="454.6" y="878.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.08%)</title><rect x="451.6" y="851.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="454.6" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="451.6" y="835.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="454.6" y="846.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.08%)</title><rect x="451.6" y="819.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="454.6" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="451.6" y="803.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="454.6" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="451.6" y="787.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="454.6" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="451.6" y="771.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="454.6" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="451.6" y="755.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="454.6" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="451.6" y="739.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="454.6" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="451.6" y="723.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="454.6" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="451.6" y="707.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="454.6" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="452.1" y="691.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="455.1" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="452.1" y="675.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="455.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (6 samples, 0.24%)</title><rect x="452.6" y="883.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="455.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.24%)</title><rect x="455.4" y="883.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="458.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.16%)</title><rect x="455.4" y="867.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="458.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.08%)</title><rect x="457.4" y="867.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="460.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.20%)</title><rect x="458.3" y="899.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="461.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.16%)</title><rect x="458.8" y="883.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="461.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (1 samples, 0.04%)</title><rect x="458.8" y="867.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="461.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.12%)</title><rect x="459.3" y="867.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="462.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (69 samples, 2.80%)</title><rect x="460.7" y="931.0" width="33.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="463.7" y="942.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (69 samples, 2.80%)</title><rect x="460.7" y="915.0" width="33.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="463.7" y="926.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (69 samples, 2.80%)</title><rect x="460.7" y="899.0" width="33.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="463.7" y="910.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (69 samples, 2.80%)</title><rect x="460.7" y="883.0" width="33.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="463.7" y="894.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (69 samples, 2.80%)</title><rect x="460.7" y="867.0" width="33.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="463.7" y="878.0">jd..</text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.04%)</title><rect x="460.7" y="851.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="463.7" y="862.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.04%)</title><rect x="461.2" y="851.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="464.2" y="862.0"></text>
</g>
<g>
<title>Unsafe_Unpark (13 samples, 0.53%)</title><rect x="461.7" y="851.0" width="6.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="464.7" y="862.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.12%)</title><rect x="461.7" y="835.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="464.7" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (1 samples, 0.04%)</title><rect x="463.1" y="835.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="466.1" y="846.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.04%)</title><rect x="463.6" y="835.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="466.6" y="846.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (6 samples, 0.24%)</title><rect x="464.1" y="835.0" width="2.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="467.1" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="466.5" y="819.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="469.5" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="466.5" y="803.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="469.5" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="466.5" y="787.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="469.5" y="798.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.04%)</title><rect x="466.9" y="835.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="469.9" y="846.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.04%)</title><rect x="467.4" y="835.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="470.4" y="846.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.04%)</title><rect x="467.9" y="851.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="470.9" y="862.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (53 samples, 2.15%)</title><rect x="468.4" y="851.0" width="25.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="471.4" y="862.0">p..</text>
</g>
<g>
<title>[unknown] (52 samples, 2.11%)</title><rect x="468.9" y="835.0" width="24.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="471.9" y="846.0">[..</text>
</g>
<g>
<title>[unknown] (52 samples, 2.11%)</title><rect x="468.9" y="819.0" width="24.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="471.9" y="830.0">[..</text>
</g>
<g>
<title>[unknown] (52 samples, 2.11%)</title><rect x="468.9" y="803.0" width="24.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="471.9" y="814.0">[..</text>
</g>
<g>
<title>[unknown] (51 samples, 2.07%)</title><rect x="469.3" y="787.0" width="24.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="472.3" y="798.0">[..</text>
</g>
<g>
<title>[unknown] (51 samples, 2.07%)</title><rect x="469.3" y="771.0" width="24.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="472.3" y="782.0">[..</text>
</g>
<g>
<title>[unknown] (48 samples, 1.95%)</title><rect x="470.8" y="755.0" width="23.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="473.8" y="766.0">[..</text>
</g>
<g>
<title>[unknown] (41 samples, 1.67%)</title><rect x="474.1" y="739.0" width="19.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="477.1" y="750.0"></text>
</g>
<g>
<title>[unknown] (39 samples, 1.58%)</title><rect x="475.1" y="723.0" width="18.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="478.1" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (5 samples, 0.20%)</title><rect x="493.8" y="931.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="496.8" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/ReplicatedHttpServer$$Lambda$63/2072192433.run (781 samples, 31.74%)</title><rect x="496.2" y="963.0" width="374.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="499.2" y="974.0">ru/mail/polis/service/alex/ReplicatedHttpServer$$La..</text>
</g>
<g>
<title>ru/mail/polis/service/alex/ReplicatedHttpServer.lambda$executeAsync$3 (779 samples, 31.65%)</title><rect x="497.2" y="947.0" width="373.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="500.2" y="958.0">ru/mail/polis/service/alex/ReplicatedHttpServer.lam..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="497.6" y="931.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="500.6" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="497.6" y="915.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="500.6" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="497.6" y="899.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="500.6" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="497.6" y="883.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="500.6" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="497.6" y="867.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="500.6" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="497.6" y="851.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="500.6" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="497.6" y="835.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="500.6" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/ReplicatedHttpServer$$Lambda$60/203758604.act (6 samples, 0.24%)</title><rect x="498.1" y="931.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="501.1" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/ReplicatedHttpServer.lambda$entity$0 (6 samples, 0.24%)</title><rect x="498.1" y="915.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="501.1" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/MetaRequest.&lt;init&gt; (6 samples, 0.24%)</title><rect x="498.1" y="899.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="501.1" y="910.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.12%)</title><rect x="498.1" y="883.0" width="1.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="501.1" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/ReplicatedHttpServer$$Lambda$92/1453876626.act (3 samples, 0.12%)</title><rect x="499.5" y="883.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="502.5" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/ReplicatedHttpServer$$Lambda$92/1453876626.act (334 samples, 13.57%)</title><rect x="501.0" y="931.0" width="160.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="504.0" y="942.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>ru/mail/polis/service/alex/ReplicatedHttpServer.lambda$entity$2 (334 samples, 13.57%)</title><rect x="501.0" y="915.0" width="160.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="504.0" y="926.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>ru/mail/polis/service/alex/HttpService.delete (299 samples, 12.15%)</title><rect x="502.4" y="899.0" width="143.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="505.4" y="910.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.08%)</title><rect x="505.3" y="883.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="508.3" y="894.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.08%)</title><rect x="505.3" y="867.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="508.3" y="878.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.08%)</title><rect x="505.3" y="851.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="508.3" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.20%)</title><rect x="506.3" y="883.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="509.3" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.16%)</title><rect x="506.7" y="867.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="509.7" y="878.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="507.2" y="851.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="510.2" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="507.2" y="835.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="510.2" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="507.2" y="819.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="510.2" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.08%)</title><rect x="507.7" y="803.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="510.7" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="508.2" y="787.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="511.2" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (4 samples, 0.16%)</title><rect x="508.7" y="883.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="511.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (1 samples, 0.04%)</title><rect x="510.1" y="867.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="513.1" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/LSMDao.remove (110 samples, 4.47%)</title><rect x="510.6" y="883.0" width="52.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="513.6" y="894.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTablePool.remove (109 samples, 4.43%)</title><rect x="511.1" y="867.0" width="52.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="514.1" y="878.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.08%)</title><rect x="511.1" y="851.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="514.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (12 samples, 0.49%)</title><rect x="512.0" y="851.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="515.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (12 samples, 0.49%)</title><rect x="512.0" y="835.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="515.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (12 samples, 0.49%)</title><rect x="512.0" y="819.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="515.0" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="514.9" y="803.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="517.9" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="515.4" y="803.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="518.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (3 samples, 0.12%)</title><rect x="515.9" y="803.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="518.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (3 samples, 0.12%)</title><rect x="515.9" y="787.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="518.9" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.12%)</title><rect x="515.9" y="771.0" width="1.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="518.9" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="517.3" y="803.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="520.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (2 samples, 0.08%)</title><rect x="517.8" y="851.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="520.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (2 samples, 0.08%)</title><rect x="517.8" y="835.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="520.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (1 samples, 0.04%)</title><rect x="517.8" y="819.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="520.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (1 samples, 0.04%)</title><rect x="518.2" y="819.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="521.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.04%)</title><rect x="518.2" y="803.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="521.2" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.04%)</title><rect x="518.2" y="787.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="521.2" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.04%)</title><rect x="518.2" y="771.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="521.2" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTable.remove (93 samples, 3.78%)</title><rect x="518.7" y="851.0" width="44.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="521.7" y="862.0">ru/m..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="519.2" y="835.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="522.2" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.04%)</title><rect x="519.7" y="835.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="522.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (83 samples, 3.37%)</title><rect x="520.2" y="835.0" width="39.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="523.2" y="846.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (83 samples, 3.37%)</title><rect x="520.2" y="819.0" width="39.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="523.2" y="830.0">jav..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (11 samples, 0.45%)</title><rect x="520.6" y="803.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="523.6" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (11 samples, 0.45%)</title><rect x="520.6" y="787.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="523.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Node.&lt;init&gt; (8 samples, 0.33%)</title><rect x="525.9" y="803.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="528.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addCount (6 samples, 0.24%)</title><rect x="529.8" y="803.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="532.8" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="532.2" y="787.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="535.2" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="532.2" y="771.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="535.2" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="532.2" y="755.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="535.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="532.2" y="739.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="535.2" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="532.2" y="723.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="535.2" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="532.2" y="707.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="535.2" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="532.2" y="691.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="535.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (55 samples, 2.23%)</title><rect x="532.6" y="803.0" width="26.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="535.6" y="814.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (55 samples, 2.23%)</title><rect x="532.6" y="787.0" width="26.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="535.6" y="798.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (55 samples, 2.23%)</title><rect x="532.6" y="771.0" width="26.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="535.6" y="782.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.08%)</title><rect x="533.1" y="755.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="536.1" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.04%)</title><rect x="534.1" y="755.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="537.1" y="766.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (41 samples, 1.67%)</title><rect x="534.6" y="755.0" width="19.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="537.6" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (39 samples, 1.58%)</title><rect x="535.5" y="739.0" width="18.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="538.5" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.08%)</title><rect x="553.3" y="723.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="556.3" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (10 samples, 0.41%)</title><rect x="554.2" y="755.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="557.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="558.5" y="739.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="561.5" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="558.5" y="723.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="561.5" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="558.5" y="707.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="561.5" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="558.5" y="691.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="561.5" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="558.5" y="675.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="561.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="558.5" y="659.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="561.5" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="558.5" y="643.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="561.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.nextSecondarySeed (2 samples, 0.08%)</title><rect x="559.0" y="803.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="562.0" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Value.getData (7 samples, 0.28%)</title><rect x="560.0" y="835.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="563.0" y="846.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="560.0" y="819.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="563.0" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="560.0" y="803.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="563.0" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="560.0" y="787.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="563.0" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="560.0" y="771.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="563.0" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="560.0" y="755.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="563.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="560.0" y="739.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="563.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="560.0" y="723.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="563.0" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="560.0" y="707.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="563.0" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4 samples, 0.16%)</title><rect x="560.4" y="819.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="563.4" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="560.9" y="803.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="563.9" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.08%)</title><rect x="561.4" y="803.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="564.4" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/HttpService.getResponsesFromRelicas (1 samples, 0.04%)</title><rect x="561.9" y="787.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="564.9" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.08%)</title><rect x="562.4" y="819.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="565.4" y="830.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.08%)</title><rect x="562.4" y="803.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="565.4" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/ConsistentHashImpl.replicas (20 samples, 0.81%)</title><rect x="563.3" y="883.0" width="9.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="566.3" y="894.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.hasNext (1 samples, 0.04%)</title><rect x="563.3" y="867.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="566.3" y="878.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (2 samples, 0.08%)</title><rect x="563.8" y="867.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="566.8" y="878.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (1 samples, 0.04%)</title><rect x="564.3" y="851.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="567.3" y="862.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (1 samples, 0.04%)</title><rect x="564.3" y="835.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="567.3" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.04%)</title><rect x="564.8" y="867.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="567.8" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.04%)</title><rect x="564.8" y="851.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="567.8" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.04%)</title><rect x="564.8" y="835.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="567.8" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.04%)</title><rect x="564.8" y="819.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="567.8" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.04%)</title><rect x="564.8" y="803.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="567.8" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/ConsistentHashImpl.firstReplica (16 samples, 0.65%)</title><rect x="565.2" y="867.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="568.2" y="878.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.hashBytes (13 samples, 0.53%)</title><rect x="565.2" y="851.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="568.2" y="862.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.newHasher (3 samples, 0.12%)</title><rect x="565.2" y="835.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="568.2" y="846.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction.newHasher (3 samples, 0.12%)</title><rect x="565.2" y="819.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="568.2" y="830.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.&lt;init&gt; (3 samples, 0.12%)</title><rect x="565.2" y="803.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="568.2" y="814.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (3 samples, 0.12%)</title><rect x="565.2" y="787.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="568.2" y="798.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (3 samples, 0.12%)</title><rect x="565.2" y="771.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="568.2" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.08%)</title><rect x="565.7" y="755.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="568.7" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="565.7" y="739.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="568.7" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="565.7" y="723.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="568.7" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="566.2" y="707.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="569.2" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="566.2" y="691.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="569.2" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="566.2" y="675.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="569.2" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="566.2" y="659.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="569.2" y="670.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.hash (9 samples, 0.37%)</title><rect x="566.7" y="835.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="569.7" y="846.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.munch (4 samples, 0.16%)</title><rect x="567.6" y="819.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="570.6" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.compact (4 samples, 0.16%)</title><rect x="567.6" y="803.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="570.6" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.04%)</title><rect x="568.6" y="787.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="571.6" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="569.1" y="787.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="572.1" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="569.1" y="771.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="572.1" y="782.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.makeHash (3 samples, 0.12%)</title><rect x="569.6" y="819.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="572.6" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.12%)</title><rect x="569.6" y="803.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="572.6" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.08%)</title><rect x="570.0" y="787.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="573.0" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="570.0" y="771.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="573.0" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="570.0" y="755.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="573.0" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="570.0" y="739.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="573.0" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.08%)</title><rect x="570.0" y="723.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="573.0" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.08%)</title><rect x="570.0" y="707.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="573.0" y="718.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.putBytes (1 samples, 0.04%)</title><rect x="571.0" y="835.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="574.0" y="846.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.putBytesInternal (1 samples, 0.04%)</title><rect x="571.0" y="819.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="574.0" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.04%)</title><rect x="571.0" y="803.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="574.0" y="814.0"></text>
</g>
<g>
<title>java/util/TreeMap.ceilingEntry (3 samples, 0.12%)</title><rect x="571.5" y="851.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="574.5" y="862.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (3 samples, 0.12%)</title><rect x="571.5" y="835.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="574.5" y="846.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (3 samples, 0.12%)</title><rect x="571.5" y="819.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="574.5" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/HttpService.getResponsesFromRelicas (152 samples, 6.18%)</title><rect x="572.9" y="883.0" width="72.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="575.9" y="894.0">ru/mail/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.12%)</title><rect x="575.8" y="867.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="578.8" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.12%)</title><rect x="575.8" y="851.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="578.8" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/HttpService$$Lambda$72/2116297974.get$Lambda (3 samples, 0.12%)</title><rect x="575.8" y="835.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="578.8" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/HttpService$$Lambda$72/2116297974.&lt;init&gt; (3 samples, 0.12%)</title><rect x="575.8" y="819.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="578.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.04%)</title><rect x="576.7" y="803.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="579.7" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.08%)</title><rect x="577.2" y="867.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="580.2" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList.contains (3 samples, 0.12%)</title><rect x="578.2" y="867.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="581.2" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList.indexOf (1 samples, 0.04%)</title><rect x="578.2" y="851.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="581.2" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.indexOfRange (1 samples, 0.04%)</title><rect x="578.2" y="835.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="581.2" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.08%)</title><rect x="578.7" y="851.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="581.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ExecutorCompletionService.submit (36 samples, 1.46%)</title><rect x="579.6" y="867.0" width="17.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="582.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ExecutorCompletionService$QueueingFuture.&lt;init&gt; (10 samples, 0.41%)</title><rect x="580.6" y="851.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="583.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.&lt;init&gt; (7 samples, 0.28%)</title><rect x="582.0" y="835.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="585.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors.callable (1 samples, 0.04%)</title><rect x="584.9" y="819.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="587.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ExecutorCompletionService.newTaskFor (1 samples, 0.04%)</title><rect x="585.4" y="851.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="588.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.04%)</title><rect x="585.4" y="835.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="588.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (23 samples, 0.93%)</title><rect x="585.9" y="851.0" width="11.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="588.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (23 samples, 0.93%)</title><rect x="585.9" y="835.0" width="11.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="588.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (2 samples, 0.08%)</title><rect x="585.9" y="819.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="588.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (18 samples, 0.73%)</title><rect x="586.8" y="819.0" width="8.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="589.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (18 samples, 0.73%)</title><rect x="586.8" y="803.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="589.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (18 samples, 0.73%)</title><rect x="586.8" y="787.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="589.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 0.73%)</title><rect x="586.8" y="771.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="589.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (18 samples, 0.73%)</title><rect x="586.8" y="755.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="589.8" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (18 samples, 0.73%)</title><rect x="586.8" y="739.0" width="8.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="589.8" y="750.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (18 samples, 0.73%)</title><rect x="586.8" y="723.0" width="8.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="589.8" y="734.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.69%)</title><rect x="587.3" y="707.0" width="8.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="590.3" y="718.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.69%)</title><rect x="587.3" y="691.0" width="8.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="590.3" y="702.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.65%)</title><rect x="587.8" y="675.0" width="7.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="590.8" y="686.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.65%)</title><rect x="587.8" y="659.0" width="7.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="590.8" y="670.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.65%)</title><rect x="587.8" y="643.0" width="7.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="590.8" y="654.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.61%)</title><rect x="588.3" y="627.0" width="7.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="591.3" y="638.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.49%)</title><rect x="589.7" y="611.0" width="5.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="592.7" y="622.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.49%)</title><rect x="589.7" y="595.0" width="5.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="592.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.12%)</title><rect x="595.4" y="819.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="598.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.12%)</title><rect x="595.4" y="803.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="598.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.08%)</title><rect x="595.4" y="787.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="598.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.04%)</title><rect x="595.4" y="771.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="598.4" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.04%)</title><rect x="595.4" y="755.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="598.4" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.04%)</title><rect x="595.4" y="739.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="598.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.04%)</title><rect x="595.9" y="771.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="598.9" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.04%)</title><rect x="595.9" y="755.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="598.9" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.04%)</title><rect x="595.9" y="739.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="598.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.04%)</title><rect x="596.4" y="787.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="599.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.04%)</title><rect x="596.4" y="771.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="599.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ExecutorCompletionService.take (102 samples, 4.14%)</title><rect x="596.9" y="867.0" width="48.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="599.9" y="878.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (102 samples, 4.14%)</title><rect x="596.9" y="851.0" width="48.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="599.9" y="862.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (79 samples, 3.21%)</title><rect x="597.8" y="835.0" width="37.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="600.8" y="846.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.04%)</title><rect x="599.8" y="819.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="602.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.04%)</title><rect x="599.8" y="803.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="602.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.08%)</title><rect x="600.2" y="819.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="603.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.08%)</title><rect x="600.2" y="803.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="603.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.08%)</title><rect x="600.2" y="787.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="603.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (1 samples, 0.04%)</title><rect x="600.7" y="771.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="603.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.12%)</title><rect x="601.2" y="819.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="604.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.12%)</title><rect x="601.2" y="803.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="604.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.08%)</title><rect x="601.2" y="787.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="604.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.08%)</title><rect x="601.2" y="771.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="604.2" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.08%)</title><rect x="601.2" y="755.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="604.2" y="766.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.04%)</title><rect x="601.2" y="739.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="604.2" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.04%)</title><rect x="601.2" y="723.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="604.2" y="734.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.04%)</title><rect x="601.7" y="739.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="604.7" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="601.7" y="723.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="604.7" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="601.7" y="707.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="604.7" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="601.7" y="691.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="604.7" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="601.7" y="675.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="604.7" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="601.7" y="659.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="604.7" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="601.7" y="643.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="604.7" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="601.7" y="627.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="604.7" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="601.7" y="611.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="604.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.04%)</title><rect x="602.2" y="787.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="605.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.04%)</title><rect x="602.2" y="771.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="605.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.04%)</title><rect x="602.6" y="819.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="605.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (68 samples, 2.76%)</title><rect x="603.1" y="819.0" width="32.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="606.1" y="830.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (68 samples, 2.76%)</title><rect x="603.1" y="803.0" width="32.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="606.1" y="814.0">jd..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="603.6" y="787.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="606.6" y="798.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.04%)</title><rect x="604.1" y="787.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="607.1" y="798.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="604.6" y="787.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="607.6" y="798.0"></text>
</g>
<g>
<title>Unsafe_Park (37 samples, 1.50%)</title><rect x="605.0" y="787.0" width="17.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="608.0" y="798.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.04%)</title><rect x="609.3" y="771.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="612.3" y="782.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (8 samples, 0.33%)</title><rect x="609.8" y="771.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="612.8" y="782.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="612.2" y="755.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="615.2" y="766.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.08%)</title><rect x="612.7" y="755.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="615.7" y="766.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.08%)</title><rect x="613.7" y="771.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="616.7" y="782.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.08%)</title><rect x="614.6" y="771.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="617.6" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (3 samples, 0.12%)</title><rect x="615.6" y="771.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="618.6" y="782.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.16%)</title><rect x="617.0" y="771.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="620.0" y="782.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.12%)</title><rect x="617.5" y="755.0" width="1.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="620.5" y="766.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.12%)</title><rect x="617.5" y="739.0" width="1.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="620.5" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="618.0" y="723.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="621.0" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="618.0" y="707.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="621.0" y="718.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="618.0" y="691.0" width="0.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="621.0" y="702.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.08%)</title><rect x="618.9" y="771.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="621.9" y="782.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="619.9" y="771.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="622.9" y="782.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.04%)</title><rect x="620.4" y="771.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="623.4" y="782.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (4 samples, 0.16%)</title><rect x="620.9" y="771.0" width="1.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="623.9" y="782.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 1.10%)</title><rect x="622.8" y="787.0" width="12.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="625.8" y="798.0"></text>
</g>
<g>
<title>__pthread_cond_wait (24 samples, 0.98%)</title><rect x="622.8" y="771.0" width="11.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="625.8" y="782.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.85%)</title><rect x="624.2" y="755.0" width="10.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="627.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.85%)</title><rect x="624.2" y="739.0" width="10.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="627.2" y="750.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.81%)</title><rect x="624.7" y="723.0" width="9.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="627.7" y="734.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.81%)</title><rect x="624.7" y="707.0" width="9.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="627.7" y="718.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.81%)</title><rect x="624.7" y="691.0" width="9.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="627.7" y="702.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.81%)</title><rect x="624.7" y="675.0" width="9.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="627.7" y="686.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.45%)</title><rect x="629.0" y="659.0" width="5.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="632.0" y="670.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.37%)</title><rect x="630.0" y="643.0" width="4.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="633.0" y="654.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.37%)</title><rect x="630.0" y="627.0" width="4.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="633.0" y="638.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.04%)</title><rect x="634.3" y="771.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="637.3" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.08%)</title><rect x="634.8" y="771.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="637.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.04%)</title><rect x="635.7" y="835.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.04%)</title><rect x="635.7" y="819.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="638.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (20 samples, 0.81%)</title><rect x="636.2" y="835.0" width="9.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="639.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (20 samples, 0.81%)</title><rect x="636.2" y="819.0" width="9.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="639.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (20 samples, 0.81%)</title><rect x="636.2" y="803.0" width="9.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="639.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (20 samples, 0.81%)</title><rect x="636.2" y="787.0" width="9.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="639.2" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (20 samples, 0.81%)</title><rect x="636.2" y="771.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="639.2" y="782.0"></text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 0.20%)</title><rect x="636.2" y="755.0" width="2.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="639.2" y="766.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="636.2" y="739.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="639.2" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (1 samples, 0.04%)</title><rect x="636.7" y="739.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="639.7" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (2 samples, 0.08%)</title><rect x="637.2" y="739.0" width="0.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="640.2" y="750.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="638.1" y="739.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="641.1" y="750.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (15 samples, 0.61%)</title><rect x="638.6" y="755.0" width="7.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="641.6" y="766.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.57%)</title><rect x="639.1" y="739.0" width="6.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="642.1" y="750.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.57%)</title><rect x="639.1" y="723.0" width="6.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="642.1" y="734.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.57%)</title><rect x="639.1" y="707.0" width="6.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="642.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.57%)</title><rect x="639.1" y="691.0" width="6.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="642.1" y="702.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.57%)</title><rect x="639.1" y="675.0" width="6.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="642.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.45%)</title><rect x="640.5" y="659.0" width="5.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="643.5" y="670.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.41%)</title><rect x="641.0" y="643.0" width="4.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="644.0" y="654.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.41%)</title><rect x="641.0" y="627.0" width="4.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="644.0" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/MetaRequest.&lt;init&gt; (32 samples, 1.30%)</title><rect x="645.8" y="899.0" width="15.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="648.8" y="910.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.08%)</title><rect x="649.1" y="883.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="652.1" y="894.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.04%)</title><rect x="649.1" y="867.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="652.1" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.04%)</title><rect x="649.1" y="851.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="652.1" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="649.6" y="867.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="652.6" y="878.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.12%)</title><rect x="650.1" y="883.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="653.1" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (20 samples, 0.81%)</title><rect x="651.5" y="883.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="654.5" y="894.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (9 samples, 0.37%)</title><rect x="652.0" y="867.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="655.0" y="878.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (9 samples, 0.37%)</title><rect x="652.0" y="851.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="655.0" y="862.0"></text>
</g>
<g>
<title>jbyte_arraycopy (4 samples, 0.16%)</title><rect x="653.0" y="835.0" width="1.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="656.0" y="846.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.12%)</title><rect x="654.9" y="835.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="657.9" y="846.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.12%)</title><rect x="656.3" y="867.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="659.3" y="878.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.08%)</title><rect x="656.8" y="851.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="659.8" y="862.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.20%)</title><rect x="657.8" y="867.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="660.8" y="878.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (1 samples, 0.04%)</title><rect x="657.8" y="851.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="660.8" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.12%)</title><rect x="658.3" y="851.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="661.3" y="862.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.04%)</title><rect x="659.7" y="851.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="662.7" y="862.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.08%)</title><rect x="660.2" y="867.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="663.2" y="878.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.08%)</title><rect x="660.2" y="851.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="663.2" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.08%)</title><rect x="660.2" y="835.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="663.2" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.04%)</title><rect x="660.7" y="819.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="663.7" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/ReplicatedHttpServer.sendResponse (437 samples, 17.76%)</title><rect x="661.1" y="931.0" width="209.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="664.1" y="942.0">ru/mail/polis/service/alex/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (437 samples, 17.76%)</title><rect x="661.1" y="915.0" width="209.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="664.1" y="926.0">one/nio/http/HttpSession.se..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.08%)</title><rect x="663.1" y="899.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="666.1" y="910.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="663.5" y="883.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="666.5" y="894.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (427 samples, 17.35%)</title><rect x="664.0" y="899.0" width="204.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="667.0" y="910.0">one/nio/http/HttpSession.wr..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (11 samples, 0.45%)</title><rect x="664.5" y="883.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="667.5" y="894.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.04%)</title><rect x="666.9" y="867.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="669.9" y="878.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.20%)</title><rect x="667.4" y="867.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="670.4" y="878.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.16%)</title><rect x="667.4" y="851.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="670.4" y="862.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (3 samples, 0.12%)</title><rect x="667.8" y="835.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="670.8" y="846.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.04%)</title><rect x="668.8" y="819.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="671.8" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.04%)</title><rect x="669.3" y="851.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="672.3" y="862.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.04%)</title><rect x="669.3" y="835.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="672.3" y="846.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="669.3" y="819.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="672.3" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (415 samples, 16.86%)</title><rect x="669.8" y="883.0" width="198.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="672.8" y="894.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (415 samples, 16.86%)</title><rect x="669.8" y="867.0" width="198.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="672.8" y="878.0">one/nio/net/Session.write</text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="669.8" y="851.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="672.8" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (413 samples, 16.78%)</title><rect x="670.2" y="851.0" width="198.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="673.2" y="862.0">one/nio/net/Session$ArrayQ..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (412 samples, 16.74%)</title><rect x="670.7" y="835.0" width="197.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="673.7" y="846.0">one/nio/net/NativeSocket.w..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (3 samples, 0.12%)</title><rect x="675.5" y="819.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="678.5" y="830.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.89%)</title><rect x="677.0" y="819.0" width="10.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="680.0" y="830.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.89%)</title><rect x="677.0" y="803.0" width="10.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="680.0" y="814.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (16 samples, 0.65%)</title><rect x="677.0" y="787.0" width="7.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="680.0" y="798.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="679.4" y="771.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="682.4" y="782.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="679.8" y="771.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="682.8" y="782.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.04%)</title><rect x="680.3" y="771.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="683.3" y="782.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.20%)</title><rect x="680.8" y="771.0" width="2.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="683.8" y="782.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.20%)</title><rect x="680.8" y="755.0" width="2.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="683.8" y="766.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.12%)</title><rect x="681.8" y="739.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="684.8" y="750.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.04%)</title><rect x="683.2" y="771.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="686.2" y="782.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.08%)</title><rect x="683.7" y="771.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="686.7" y="782.0"></text>
</g>
<g>
<title>__send (5 samples, 0.20%)</title><rect x="684.6" y="787.0" width="2.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="687.6" y="798.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="687.0" y="787.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="690.0" y="798.0"></text>
</g>
<g>
<title>__send (377 samples, 15.32%)</title><rect x="687.5" y="819.0" width="180.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="690.5" y="830.0">__send</text>
</g>
<g>
<title>[unknown] (376 samples, 15.28%)</title><rect x="688.0" y="803.0" width="180.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="691.0" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (376 samples, 15.28%)</title><rect x="688.0" y="787.0" width="180.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="691.0" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (372 samples, 15.12%)</title><rect x="689.9" y="771.0" width="178.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="692.9" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (371 samples, 15.08%)</title><rect x="690.4" y="755.0" width="177.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="693.4" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (368 samples, 14.95%)</title><rect x="691.8" y="739.0" width="176.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="694.8" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (364 samples, 14.79%)</title><rect x="693.7" y="723.0" width="174.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="696.7" y="734.0">[unknown]</text>
</g>
<g>
<title>[unknown] (358 samples, 14.55%)</title><rect x="696.6" y="707.0" width="171.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="699.6" y="718.0">[unknown]</text>
</g>
<g>
<title>[unknown] (355 samples, 14.43%)</title><rect x="698.1" y="691.0" width="170.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="701.1" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (334 samples, 13.57%)</title><rect x="708.1" y="675.0" width="160.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="711.1" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (323 samples, 13.12%)</title><rect x="713.4" y="659.0" width="154.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="716.4" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (307 samples, 12.47%)</title><rect x="721.1" y="643.0" width="147.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="724.1" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (281 samples, 11.42%)</title><rect x="733.5" y="627.0" width="134.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="736.5" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (269 samples, 10.93%)</title><rect x="739.3" y="611.0" width="129.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="742.3" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (262 samples, 10.65%)</title><rect x="742.6" y="595.0" width="125.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="745.6" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (256 samples, 10.40%)</title><rect x="745.5" y="579.0" width="122.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="748.5" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (253 samples, 10.28%)</title><rect x="747.0" y="563.0" width="121.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="750.0" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (245 samples, 9.96%)</title><rect x="750.8" y="547.0" width="117.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="753.8" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (234 samples, 9.51%)</title><rect x="756.1" y="531.0" width="112.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="759.1" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (225 samples, 9.14%)</title><rect x="760.4" y="515.0" width="107.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="763.4" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (218 samples, 8.86%)</title><rect x="763.7" y="499.0" width="104.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="766.7" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (193 samples, 7.84%)</title><rect x="775.7" y="483.0" width="92.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="778.7" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (174 samples, 7.07%)</title><rect x="784.8" y="467.0" width="83.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="787.8" y="478.0">[unknown]</text>
</g>
<g>
<title>[unknown] (161 samples, 6.54%)</title><rect x="791.1" y="451.0" width="77.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="794.1" y="462.0">[unknown]</text>
</g>
<g>
<title>[unknown] (152 samples, 6.18%)</title><rect x="795.4" y="435.0" width="72.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="798.4" y="446.0">[unknown]</text>
</g>
<g>
<title>[unknown] (145 samples, 5.89%)</title><rect x="798.7" y="419.0" width="69.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="801.7" y="430.0">[unknown]</text>
</g>
<g>
<title>[unknown] (141 samples, 5.73%)</title><rect x="800.7" y="403.0" width="67.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="803.7" y="414.0">[unknown]</text>
</g>
<g>
<title>[unknown] (141 samples, 5.73%)</title><rect x="800.7" y="387.0" width="67.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="803.7" y="398.0">[unknown]</text>
</g>
<g>
<title>[unknown] (136 samples, 5.53%)</title><rect x="803.1" y="371.0" width="65.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="806.1" y="382.0">[unknown]</text>
</g>
<g>
<title>[unknown] (129 samples, 5.24%)</title><rect x="806.4" y="355.0" width="61.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="809.4" y="366.0">[unkno..</text>
</g>
<g>
<title>[unknown] (128 samples, 5.20%)</title><rect x="806.9" y="339.0" width="61.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="809.9" y="350.0">[unkno..</text>
</g>
<g>
<title>[unknown] (126 samples, 5.12%)</title><rect x="807.9" y="323.0" width="60.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="810.9" y="334.0">[unkno..</text>
</g>
<g>
<title>[unknown] (123 samples, 5.00%)</title><rect x="809.3" y="307.0" width="59.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="812.3" y="318.0">[unkno..</text>
</g>
<g>
<title>[unknown] (107 samples, 4.35%)</title><rect x="817.0" y="291.0" width="51.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="820.0" y="302.0">[unkn..</text>
</g>
<g>
<title>[unknown] (100 samples, 4.06%)</title><rect x="820.3" y="275.0" width="48.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="823.3" y="286.0">[unk..</text>
</g>
<g>
<title>[unknown] (93 samples, 3.78%)</title><rect x="823.7" y="259.0" width="44.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="826.7" y="270.0">[unk..</text>
</g>
<g>
<title>[unknown] (77 samples, 3.13%)</title><rect x="831.3" y="243.0" width="37.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="834.3" y="254.0">[un..</text>
</g>
<g>
<title>[unknown] (62 samples, 2.52%)</title><rect x="838.5" y="227.0" width="29.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="841.5" y="238.0">[u..</text>
</g>
<g>
<title>[unknown] (55 samples, 2.23%)</title><rect x="841.9" y="211.0" width="26.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="844.9" y="222.0">[..</text>
</g>
<g>
<title>[unknown] (53 samples, 2.15%)</title><rect x="842.9" y="195.0" width="25.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="845.9" y="206.0">[..</text>
</g>
<g>
<title>[unknown] (4 samples, 0.16%)</title><rect x="866.4" y="179.0" width="1.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="869.4" y="190.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.16%)</title><rect x="866.4" y="163.0" width="1.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="869.4" y="174.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="867.8" y="147.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="870.8" y="158.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.04%)</title><rect x="868.3" y="851.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="871.3" y="862.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="868.3" y="835.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="871.3" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.04%)</title><rect x="868.3" y="819.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="871.3" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.16%)</title><rect x="868.7" y="899.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="871.7" y="910.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.04%)</title><rect x="869.2" y="883.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="872.2" y="894.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.08%)</title><rect x="869.7" y="883.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="872.7" y="894.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.08%)</title><rect x="869.7" y="867.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="872.7" y="878.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (562 samples, 22.84%)</title><rect x="870.7" y="1011.0" width="269.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="873.7" y="1022.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="871.6" y="995.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="874.6" y="1006.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.04%)</title><rect x="871.6" y="979.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="874.6" y="990.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.04%)</title><rect x="871.6" y="963.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="874.6" y="974.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.04%)</title><rect x="872.1" y="995.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="875.1" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (5 samples, 0.20%)</title><rect x="872.6" y="995.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="875.6" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (5 samples, 0.20%)</title><rect x="872.6" y="979.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="875.6" y="990.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (139 samples, 5.65%)</title><rect x="875.0" y="995.0" width="66.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="878.0" y="1006.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (5 samples, 0.20%)</title><rect x="878.3" y="979.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="881.3" y="990.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (5 samples, 0.20%)</title><rect x="878.3" y="963.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="881.3" y="974.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (127 samples, 5.16%)</title><rect x="880.7" y="979.0" width="60.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="883.7" y="990.0">one/ni..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.04%)</title><rect x="886.0" y="963.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="889.0" y="974.0"></text>
</g>
<g>
<title>[unknown] (104 samples, 4.23%)</title><rect x="886.5" y="963.0" width="49.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="889.5" y="974.0">[unkn..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.04%)</title><rect x="886.5" y="947.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="889.5" y="958.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.08%)</title><rect x="887.0" y="947.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="890.0" y="958.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (2 samples, 0.08%)</title><rect x="887.9" y="947.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="890.9" y="958.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.08%)</title><rect x="888.9" y="947.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="891.9" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.04%)</title><rect x="889.4" y="931.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="892.4" y="942.0"></text>
</g>
<g>
<title>epoll_wait (97 samples, 3.94%)</title><rect x="889.8" y="947.0" width="46.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="892.8" y="958.0">epol..</text>
</g>
<g>
<title>[unknown] (89 samples, 3.62%)</title><rect x="893.7" y="931.0" width="42.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="896.7" y="942.0">[unk..</text>
</g>
<g>
<title>[unknown] (89 samples, 3.62%)</title><rect x="893.7" y="915.0" width="42.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="896.7" y="926.0">[unk..</text>
</g>
<g>
<title>[unknown] (84 samples, 3.41%)</title><rect x="896.1" y="899.0" width="40.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="899.1" y="910.0">[un..</text>
</g>
<g>
<title>[unknown] (84 samples, 3.41%)</title><rect x="896.1" y="883.0" width="40.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="899.1" y="894.0">[un..</text>
</g>
<g>
<title>[unknown] (82 samples, 3.33%)</title><rect x="897.0" y="867.0" width="39.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="900.0" y="878.0">[un..</text>
</g>
<g>
<title>[unknown] (68 samples, 2.76%)</title><rect x="903.8" y="851.0" width="32.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="906.8" y="862.0">[u..</text>
</g>
<g>
<title>[unknown] (62 samples, 2.52%)</title><rect x="906.6" y="835.0" width="29.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="909.6" y="846.0">[u..</text>
</g>
<g>
<title>[unknown] (48 samples, 1.95%)</title><rect x="913.3" y="819.0" width="23.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="916.3" y="830.0">[..</text>
</g>
<g>
<title>[unknown] (41 samples, 1.67%)</title><rect x="916.7" y="803.0" width="19.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="919.7" y="814.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 1.30%)</title><rect x="921.0" y="787.0" width="15.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="924.0" y="798.0"></text>
</g>
<g>
<title>_init (3 samples, 0.12%)</title><rect x="936.4" y="963.0" width="1.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="939.4" y="974.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.12%)</title><rect x="937.8" y="963.0" width="1.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="940.8" y="974.0"></text>
</g>
<g>
<title>epoll_wait (5 samples, 0.20%)</title><rect x="939.2" y="963.0" width="2.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="942.2" y="974.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (414 samples, 16.82%)</title><rect x="941.6" y="995.0" width="198.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="944.6" y="1006.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (407 samples, 16.54%)</title><rect x="943.1" y="979.0" width="195.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="946.1" y="990.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (285 samples, 11.58%)</title><rect x="944.0" y="963.0" width="136.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="947.0" y="974.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (222 samples, 9.02%)</title><rect x="944.5" y="947.0" width="106.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="947.5" y="958.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (219 samples, 8.90%)</title><rect x="945.9" y="931.0" width="105.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="948.9" y="942.0">one/nio/http/..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (215 samples, 8.74%)</title><rect x="945.9" y="915.0" width="103.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="948.9" y="926.0">RequestHandl..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (17 samples, 0.69%)</title><rect x="946.4" y="899.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="949.4" y="910.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.16%)</title><rect x="946.9" y="883.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="949.9" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.16%)</title><rect x="946.9" y="867.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="949.9" y="878.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.04%)</title><rect x="948.3" y="851.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="951.3" y="862.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (4 samples, 0.16%)</title><rect x="948.8" y="883.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="951.8" y="894.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.04%)</title><rect x="950.3" y="867.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="953.3" y="878.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.04%)</title><rect x="950.3" y="851.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="953.3" y="862.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.16%)</title><rect x="950.7" y="883.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="953.7" y="894.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (1 samples, 0.04%)</title><rect x="951.2" y="867.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="954.2" y="878.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="951.7" y="867.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="954.7" y="878.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.04%)</title><rect x="952.2" y="867.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="955.2" y="878.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.16%)</title><rect x="952.7" y="883.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="955.7" y="894.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.12%)</title><rect x="953.1" y="867.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="956.1" y="878.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.12%)</title><rect x="953.1" y="851.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="956.1" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.12%)</title><rect x="953.1" y="835.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="956.1" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/ReplicatedHttpServer.entity (197 samples, 8.00%)</title><rect x="954.6" y="899.0" width="94.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="957.6" y="910.0">ru/mail/pol..</text>
</g>
<g>
<title>java/lang/String.isEmpty (1 samples, 0.04%)</title><rect x="955.5" y="883.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="958.5" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/413115525.linkToTargetMethod (1 samples, 0.04%)</title><rect x="956.0" y="883.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="959.0" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1881466287.invokeStatic (1 samples, 0.04%)</title><rect x="956.0" y="867.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="959.0" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/ReplicatedHttpServer$$Lambda$92/1453876626.get$Lambda (1 samples, 0.04%)</title><rect x="956.0" y="851.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="959.0" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/ReplicatedHttpServer$$Lambda$92/1453876626.&lt;init&gt; (1 samples, 0.04%)</title><rect x="956.0" y="835.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="959.0" y="846.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$SetN.size (1 samples, 0.04%)</title><rect x="956.5" y="883.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="959.5" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.20%)</title><rect x="957.0" y="883.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="960.0" y="894.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.04%)</title><rect x="957.0" y="867.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="960.0" y="878.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.12%)</title><rect x="957.5" y="867.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="960.5" y="878.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.12%)</title><rect x="957.5" y="851.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="960.5" y="862.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.04%)</title><rect x="958.9" y="867.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="961.9" y="878.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="958.9" y="851.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="961.9" y="862.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.04%)</title><rect x="958.9" y="835.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="961.9" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/ConsistentHashImpl.all (41 samples, 1.67%)</title><rect x="959.4" y="883.0" width="19.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="962.4" y="894.0"></text>
</g>
<g>
<title>java/util/Set.copyOf (41 samples, 1.67%)</title><rect x="959.4" y="867.0" width="19.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="962.4" y="878.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.04%)</title><rect x="960.3" y="851.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="963.3" y="862.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (7 samples, 0.28%)</title><rect x="960.8" y="851.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="963.8" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.hasNext (1 samples, 0.04%)</title><rect x="961.3" y="835.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="964.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.04%)</title><rect x="961.8" y="835.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="964.8" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.04%)</title><rect x="961.8" y="819.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="964.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.16%)</title><rect x="962.2" y="835.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="965.2" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.08%)</title><rect x="962.2" y="819.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="965.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.04%)</title><rect x="962.7" y="803.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="965.7" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.08%)</title><rect x="963.2" y="819.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="966.2" y="830.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.04%)</title><rect x="963.7" y="803.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="966.7" y="814.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (28 samples, 1.14%)</title><rect x="964.2" y="851.0" width="13.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="967.2" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="964.2" y="835.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="967.2" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="964.2" y="819.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="967.2" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="964.2" y="803.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="967.2" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="964.2" y="787.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="967.2" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="964.2" y="771.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="967.2" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="964.2" y="755.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="967.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="964.2" y="739.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="967.2" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (19 samples, 0.77%)</title><rect x="964.6" y="835.0" width="9.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="967.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashSet.add (10 samples, 0.41%)</title><rect x="964.6" y="819.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="967.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.put (10 samples, 0.41%)</title><rect x="964.6" y="803.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="967.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.04%)</title><rect x="964.6" y="787.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="967.6" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 0.37%)</title><rect x="965.1" y="787.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="968.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.20%)</title><rect x="965.1" y="771.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="968.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (3 samples, 0.12%)</title><rect x="967.5" y="771.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="970.5" y="782.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.04%)</title><rect x="969.0" y="771.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="972.0" y="782.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeyIterator.next (3 samples, 0.12%)</title><rect x="969.4" y="819.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="972.4" y="830.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (3 samples, 0.12%)</title><rect x="969.4" y="803.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="972.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.08%)</title><rect x="969.4" y="787.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="972.4" y="798.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.04%)</title><rect x="970.4" y="787.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="973.4" y="798.0"></text>
</g>
<g>
<title>java/util/TreeSet.iterator (6 samples, 0.24%)</title><rect x="970.9" y="819.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="973.9" y="830.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (2 samples, 0.08%)</title><rect x="971.4" y="803.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="974.4" y="814.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (2 samples, 0.08%)</title><rect x="971.4" y="787.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="974.4" y="798.0"></text>
</g>
<g>
<title>java/util/TreeMap.navigableKeySet (3 samples, 0.12%)</title><rect x="972.3" y="803.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="975.3" y="814.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.&lt;init&gt; (2 samples, 0.08%)</title><rect x="972.8" y="787.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="975.8" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (4 samples, 0.16%)</title><rect x="973.8" y="835.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="976.8" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (3 samples, 0.12%)</title><rect x="974.2" y="819.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="977.2" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/RF.from (2 samples, 0.08%)</title><rect x="974.7" y="803.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="977.7" y="814.0"></text>
</g>
<g>
<title>java/util/TreeSet.size (4 samples, 0.16%)</title><rect x="975.7" y="835.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="978.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.08%)</title><rect x="976.6" y="819.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="979.6" y="830.0"></text>
</g>
<g>
<title>java/util/Set.of (3 samples, 0.12%)</title><rect x="977.6" y="851.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="980.6" y="862.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$SetN.&lt;init&gt; (3 samples, 0.12%)</title><rect x="977.6" y="835.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="980.6" y="846.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$SetN.probe (1 samples, 0.04%)</title><rect x="978.5" y="819.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="981.5" y="830.0"></text>
</g>
<g>
<title>java/lang/Math.floorMod (1 samples, 0.04%)</title><rect x="978.5" y="803.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="981.5" y="814.0"></text>
</g>
<g>
<title>java/lang/Math.floorDiv (1 samples, 0.04%)</title><rect x="978.5" y="787.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="981.5" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/RF.from (36 samples, 1.46%)</title><rect x="979.0" y="883.0" width="17.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="982.0" y="894.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (3 samples, 0.12%)</title><rect x="979.5" y="867.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="982.5" y="878.0"></text>
</g>
<g>
<title>com/google/common/base/CharMatcher.is (2 samples, 0.08%)</title><rect x="979.5" y="851.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="982.5" y="862.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (1 samples, 0.04%)</title><rect x="980.5" y="851.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="983.5" y="862.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.&lt;init&gt; (1 samples, 0.04%)</title><rect x="980.5" y="835.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="983.5" y="846.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.&lt;init&gt; (1 samples, 0.04%)</title><rect x="980.5" y="819.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="983.5" y="830.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (29 samples, 1.18%)</title><rect x="980.9" y="867.0" width="14.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="983.9" y="878.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (13 samples, 0.53%)</title><rect x="982.9" y="851.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="985.9" y="862.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (12 samples, 0.49%)</title><rect x="983.3" y="835.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="986.3" y="846.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (9 samples, 0.37%)</title><rect x="984.3" y="819.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="987.3" y="830.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (9 samples, 0.37%)</title><rect x="984.3" y="803.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="987.3" y="814.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1$1.separatorStart (3 samples, 0.12%)</title><rect x="984.3" y="787.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="987.3" y="798.0"></text>
</g>
<g>
<title>com/google/common/base/CharMatcher.indexIn (2 samples, 0.08%)</title><rect x="984.8" y="771.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="987.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="985.3" y="755.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="988.3" y="766.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="985.7" y="787.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="988.7" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.04%)</title><rect x="985.7" y="771.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="988.7" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.04%)</title><rect x="986.2" y="787.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="989.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.subSequence (4 samples, 0.16%)</title><rect x="986.7" y="787.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="989.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.16%)</title><rect x="986.7" y="771.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="989.7" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.12%)</title><rect x="986.7" y="755.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="989.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.04%)</title><rect x="987.7" y="739.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="990.7" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="988.1" y="755.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="991.1" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.04%)</title><rect x="988.1" y="739.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="991.1" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="988.6" y="819.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="991.6" y="830.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.next (2 samples, 0.08%)</title><rect x="989.1" y="851.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="992.1" y="862.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splittingIterator (5 samples, 0.20%)</title><rect x="990.1" y="851.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="993.1" y="862.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (4 samples, 0.16%)</title><rect x="990.5" y="835.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="993.5" y="846.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (4 samples, 0.16%)</title><rect x="990.5" y="819.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="993.5" y="830.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1$1.&lt;init&gt; (4 samples, 0.16%)</title><rect x="990.5" y="803.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="993.5" y="814.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.&lt;init&gt; (4 samples, 0.16%)</title><rect x="990.5" y="787.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="993.5" y="798.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.&lt;init&gt; (3 samples, 0.12%)</title><rect x="991.0" y="771.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="994.0" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (4 samples, 0.16%)</title><rect x="992.5" y="851.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="995.5" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.08%)</title><rect x="993.4" y="835.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="996.4" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.08%)</title><rect x="993.4" y="819.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="996.4" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.08%)</title><rect x="993.4" y="803.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="996.4" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.08%)</title><rect x="993.4" y="787.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="996.4" y="798.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.04%)</title><rect x="994.4" y="851.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="997.4" y="862.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.12%)</title><rect x="994.9" y="867.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="997.9" y="878.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.12%)</title><rect x="994.9" y="851.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="997.9" y="862.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="995.8" y="835.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="998.8" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/ReplicatedHttpServer.executeAsync (110 samples, 4.47%)</title><rect x="996.3" y="883.0" width="52.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="999.3" y="894.0">ru/ma..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.08%)</title><rect x="996.3" y="867.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="999.3" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.08%)</title><rect x="996.3" y="851.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="999.3" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/ReplicatedHttpServer$$Lambda$63/2072192433.get$Lambda (2 samples, 0.08%)</title><rect x="996.3" y="835.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="999.3" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/ReplicatedHttpServer$$Lambda$63/2072192433.&lt;init&gt; (1 samples, 0.04%)</title><rect x="996.8" y="819.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="999.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (108 samples, 4.39%)</title><rect x="997.2" y="867.0" width="51.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1000.2" y="878.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (108 samples, 4.39%)</title><rect x="997.2" y="851.0" width="51.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1000.2" y="862.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (1 samples, 0.04%)</title><rect x="997.2" y="835.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1000.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (83 samples, 3.37%)</title><rect x="997.7" y="835.0" width="39.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1000.7" y="846.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (83 samples, 3.37%)</title><rect x="997.7" y="819.0" width="39.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1000.7" y="830.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (83 samples, 3.37%)</title><rect x="997.7" y="803.0" width="39.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1000.7" y="814.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (83 samples, 3.37%)</title><rect x="997.7" y="787.0" width="39.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1000.7" y="798.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (83 samples, 3.37%)</title><rect x="997.7" y="771.0" width="39.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1000.7" y="782.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (83 samples, 3.37%)</title><rect x="997.7" y="755.0" width="39.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1000.7" y="766.0">jdk..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.04%)</title><rect x="997.7" y="739.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1000.7" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (1 samples, 0.04%)</title><rect x="998.2" y="739.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1001.2" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.04%)</title><rect x="998.7" y="739.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1001.7" y="750.0"></text>
</g>
<g>
<title>Unsafe_Unpark (25 samples, 1.02%)</title><rect x="999.2" y="739.0" width="12.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1002.2" y="750.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="999.2" y="723.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1002.2" y="734.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="999.6" y="723.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1002.6" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (1 samples, 0.04%)</title><rect x="1000.1" y="723.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1003.1" y="734.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.08%)</title><rect x="1000.6" y="723.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1003.6" y="734.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.08%)</title><rect x="1001.6" y="723.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1004.6" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (9 samples, 0.37%)</title><rect x="1002.5" y="723.0" width="4.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1005.5" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.04%)</title><rect x="1006.8" y="723.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1009.8" y="734.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (4 samples, 0.16%)</title><rect x="1007.3" y="723.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1010.3" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.12%)</title><rect x="1009.2" y="723.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1012.2" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="1010.7" y="723.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1013.7" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.16%)</title><rect x="1011.2" y="739.0" width="1.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1014.2" y="750.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="1013.1" y="739.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1016.1" y="750.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (50 samples, 2.03%)</title><rect x="1013.6" y="739.0" width="23.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1016.6" y="750.0">p..</text>
</g>
<g>
<title>[unknown] (47 samples, 1.91%)</title><rect x="1015.0" y="723.0" width="22.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1018.0" y="734.0">[..</text>
</g>
<g>
<title>[unknown] (47 samples, 1.91%)</title><rect x="1015.0" y="707.0" width="22.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1018.0" y="718.0">[..</text>
</g>
<g>
<title>[unknown] (44 samples, 1.79%)</title><rect x="1016.4" y="691.0" width="21.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1019.4" y="702.0">[..</text>
</g>
<g>
<title>[unknown] (43 samples, 1.75%)</title><rect x="1016.9" y="675.0" width="20.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1019.9" y="686.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 1.67%)</title><rect x="1017.9" y="659.0" width="19.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1020.9" y="670.0"></text>
</g>
<g>
<title>[unknown] (36 samples, 1.46%)</title><rect x="1020.3" y="643.0" width="17.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1023.3" y="654.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 1.18%)</title><rect x="1023.6" y="627.0" width="13.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1026.6" y="638.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 1.18%)</title><rect x="1023.6" y="611.0" width="13.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1026.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (7 samples, 0.28%)</title><rect x="1037.5" y="835.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1040.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (7 samples, 0.28%)</title><rect x="1037.5" y="819.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1040.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.12%)</title><rect x="1039.4" y="803.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1042.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (3 samples, 0.12%)</title><rect x="1039.4" y="787.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1042.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.08%)</title><rect x="1039.4" y="771.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1042.4" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.08%)</title><rect x="1039.4" y="755.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1042.4" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.04%)</title><rect x="1039.9" y="739.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1042.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.04%)</title><rect x="1040.4" y="771.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1043.4" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.04%)</title><rect x="1040.4" y="755.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1043.4" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.04%)</title><rect x="1040.4" y="739.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1043.4" y="750.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.04%)</title><rect x="1040.4" y="723.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1043.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (17 samples, 0.69%)</title><rect x="1040.9" y="835.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1043.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (16 samples, 0.65%)</title><rect x="1041.4" y="819.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1044.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (14 samples, 0.57%)</title><rect x="1041.4" y="803.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1044.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (9 samples, 0.37%)</title><rect x="1041.8" y="787.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1044.8" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (9 samples, 0.37%)</title><rect x="1041.8" y="771.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1044.8" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (7 samples, 0.28%)</title><rect x="1042.8" y="755.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1045.8" y="766.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (7 samples, 0.28%)</title><rect x="1042.8" y="739.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1045.8" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.04%)</title><rect x="1045.7" y="723.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1048.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.04%)</title><rect x="1046.2" y="787.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1049.2" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.04%)</title><rect x="1046.2" y="771.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1049.2" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.04%)</title><rect x="1046.2" y="755.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1049.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (3 samples, 0.12%)</title><rect x="1046.6" y="787.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1049.6" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (3 samples, 0.12%)</title><rect x="1046.6" y="771.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1049.6" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (3 samples, 0.12%)</title><rect x="1046.6" y="755.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1049.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.08%)</title><rect x="1048.1" y="803.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1051.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.08%)</title><rect x="1048.1" y="787.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1051.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.04%)</title><rect x="1048.6" y="771.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1051.6" y="782.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.12%)</title><rect x="1049.0" y="915.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1052.0" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.12%)</title><rect x="1049.0" y="899.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1052.0" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.12%)</title><rect x="1049.0" y="883.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1052.0" y="894.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.12%)</title><rect x="1049.0" y="867.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1052.0" y="878.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.08%)</title><rect x="1049.5" y="851.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1052.5" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.04%)</title><rect x="1050.5" y="915.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1053.5" y="926.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.04%)</title><rect x="1050.5" y="899.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1053.5" y="910.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (1 samples, 0.04%)</title><rect x="1050.5" y="883.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1053.5" y="894.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (36 samples, 1.46%)</title><rect x="1051.0" y="947.0" width="17.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1054.0" y="958.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (14 samples, 0.57%)</title><rect x="1053.3" y="931.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1056.3" y="942.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (10 samples, 0.41%)</title><rect x="1053.8" y="915.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1056.8" y="926.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (10 samples, 0.41%)</title><rect x="1053.8" y="899.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1056.8" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (8 samples, 0.33%)</title><rect x="1054.8" y="883.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1057.8" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.canEncode (1 samples, 0.04%)</title><rect x="1058.1" y="867.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1061.1" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.08%)</title><rect x="1058.6" y="915.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1061.6" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.04%)</title><rect x="1059.6" y="915.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1062.6" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.37%)</title><rect x="1060.1" y="931.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1063.1" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.37%)</title><rect x="1060.1" y="915.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1063.1" y="926.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (1 samples, 0.04%)</title><rect x="1063.9" y="899.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1066.9" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (8 samples, 0.33%)</title><rect x="1064.4" y="931.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1067.4" y="942.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (9 samples, 0.37%)</title><rect x="1068.2" y="947.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1071.2" y="958.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (8 samples, 0.33%)</title><rect x="1068.2" y="931.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1071.2" y="942.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (8 samples, 0.33%)</title><rect x="1068.2" y="915.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1071.2" y="926.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.04%)</title><rect x="1068.2" y="899.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1071.2" y="910.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.04%)</title><rect x="1068.2" y="883.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1071.2" y="894.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (1 samples, 0.04%)</title><rect x="1068.2" y="867.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1071.2" y="878.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.20%)</title><rect x="1068.7" y="899.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1071.7" y="910.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.08%)</title><rect x="1070.1" y="883.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1073.1" y="894.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.08%)</title><rect x="1071.1" y="899.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1074.1" y="910.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (1 samples, 0.04%)</title><rect x="1072.0" y="931.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1075.0" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (9 samples, 0.37%)</title><rect x="1072.5" y="947.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1075.5" y="958.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (3 samples, 0.12%)</title><rect x="1073.0" y="931.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1076.0" y="942.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.20%)</title><rect x="1074.4" y="931.0" width="2.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1077.4" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.24%)</title><rect x="1076.8" y="947.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1079.8" y="958.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.08%)</title><rect x="1077.3" y="931.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1080.3" y="942.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.12%)</title><rect x="1078.3" y="931.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1081.3" y="942.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.12%)</title><rect x="1078.3" y="915.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1081.3" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.08%)</title><rect x="1079.7" y="947.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1082.7" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.08%)</title><rect x="1079.7" y="931.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1082.7" y="942.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (120 samples, 4.88%)</title><rect x="1080.7" y="963.0" width="57.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1083.7" y="974.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (118 samples, 4.79%)</title><rect x="1081.6" y="947.0" width="56.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1084.6" y="958.0">one/ni..</text>
</g>
<g>
<title>[unknown] (27 samples, 1.10%)</title><rect x="1085.0" y="931.0" width="12.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1088.0" y="942.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 1.10%)</title><rect x="1085.0" y="915.0" width="12.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1088.0" y="926.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (19 samples, 0.77%)</title><rect x="1085.0" y="899.0" width="9.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1088.0" y="910.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.04%)</title><rect x="1086.9" y="883.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1089.9" y="894.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.04%)</title><rect x="1087.4" y="883.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1090.4" y="894.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (13 samples, 0.53%)</title><rect x="1087.9" y="883.0" width="6.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1090.9" y="894.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.08%)</title><rect x="1089.3" y="867.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1092.3" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (2 samples, 0.08%)</title><rect x="1090.3" y="867.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1093.3" y="878.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (6 samples, 0.24%)</title><rect x="1091.2" y="867.0" width="2.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1094.2" y="878.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="1093.6" y="851.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1096.6" y="862.0"></text>
</g>
<g>
<title>__GI___recv (5 samples, 0.20%)</title><rect x="1094.1" y="899.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1097.1" y="910.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.04%)</title><rect x="1096.5" y="899.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1099.5" y="910.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.08%)</title><rect x="1097.0" y="899.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1100.0" y="910.0"></text>
</g>
<g>
<title>__GI___recv (84 samples, 3.41%)</title><rect x="1097.9" y="931.0" width="40.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1100.9" y="942.0">__G..</text>
</g>
<g>
<title>[unknown] (82 samples, 3.33%)</title><rect x="1098.9" y="915.0" width="39.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1101.9" y="926.0">[un..</text>
</g>
<g>
<title>[unknown] (82 samples, 3.33%)</title><rect x="1098.9" y="899.0" width="39.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1101.9" y="910.0">[un..</text>
</g>
<g>
<title>[unknown] (77 samples, 3.13%)</title><rect x="1101.3" y="883.0" width="36.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1104.3" y="894.0">[un..</text>
</g>
<g>
<title>[unknown] (76 samples, 3.09%)</title><rect x="1101.8" y="867.0" width="36.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1104.8" y="878.0">[un..</text>
</g>
<g>
<title>[unknown] (75 samples, 3.05%)</title><rect x="1102.3" y="851.0" width="35.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1105.3" y="862.0">[un..</text>
</g>
<g>
<title>[unknown] (70 samples, 2.84%)</title><rect x="1104.7" y="835.0" width="33.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1107.7" y="846.0">[u..</text>
</g>
<g>
<title>[unknown] (61 samples, 2.48%)</title><rect x="1109.0" y="819.0" width="29.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1112.0" y="830.0">[u..</text>
</g>
<g>
<title>[unknown] (42 samples, 1.71%)</title><rect x="1118.1" y="803.0" width="20.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1121.1" y="814.0"></text>
</g>
<g>
<title>[unknown] (33 samples, 1.34%)</title><rect x="1122.4" y="787.0" width="15.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1125.4" y="798.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 1.02%)</title><rect x="1126.2" y="771.0" width="12.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1129.2" y="782.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.65%)</title><rect x="1130.5" y="755.0" width="7.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1133.5" y="766.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.20%)</title><rect x="1135.8" y="739.0" width="2.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1138.8" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.16%)</title><rect x="1138.2" y="979.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.2" y="990.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.04%)</title><rect x="1139.2" y="963.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1142.2" y="974.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="1139.7" y="963.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1142.7" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.04%)</title><rect x="1139.7" y="947.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1142.7" y="958.0"></text>
</g>
<g>
<title>start_thread (103 samples, 4.19%)</title><rect x="1140.1" y="1011.0" width="49.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1143.1" y="1022.0">start..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (103 samples, 4.19%)</title><rect x="1140.1" y="995.0" width="49.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1143.1" y="1006.0">threa..</text>
</g>
<g>
<title>Thread::call_run() (103 samples, 4.19%)</title><rect x="1140.1" y="979.0" width="49.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.1" y="990.0">Threa..</text>
</g>
<g>
<title>GangWorker::loop() (43 samples, 1.75%)</title><rect x="1140.1" y="963.0" width="20.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.1" y="974.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="1140.1" y="947.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.1" y="958.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.04%)</title><rect x="1140.1" y="931.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.1" y="942.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region(HeapRegion*) (1 samples, 0.04%)</title><rect x="1140.1" y="915.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.1" y="926.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (41 samples, 1.67%)</title><rect x="1140.6" y="947.0" width="19.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.6" y="958.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.08%)</title><rect x="1140.6" y="931.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.6" y="942.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.04%)</title><rect x="1140.6" y="915.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.6" y="926.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.04%)</title><rect x="1140.6" y="899.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.6" y="910.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="1141.1" y="915.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1144.1" y="926.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (39 samples, 1.58%)</title><rect x="1141.6" y="931.0" width="18.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.6" y="942.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (39 samples, 1.58%)</title><rect x="1141.6" y="915.0" width="18.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.6" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (39 samples, 1.58%)</title><rect x="1141.6" y="899.0" width="18.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.6" y="910.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (39 samples, 1.58%)</title><rect x="1141.6" y="883.0" width="18.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.6" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.04%)</title><rect x="1141.6" y="867.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.6" y="878.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (37 samples, 1.50%)</title><rect x="1142.1" y="867.0" width="17.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.1" y="878.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (17 samples, 0.69%)</title><rect x="1142.1" y="851.0" width="8.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.1" y="862.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (13 samples, 0.53%)</title><rect x="1143.5" y="835.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.5" y="846.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (5 samples, 0.20%)</title><rect x="1147.3" y="819.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.3" y="830.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;TypeArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1149.7" y="835.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.7" y="846.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.123] (20 samples, 0.81%)</title><rect x="1150.2" y="851.0" width="9.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.2" y="862.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (16 samples, 0.65%)</title><rect x="1150.7" y="835.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.7" y="846.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.08%)</title><rect x="1153.1" y="819.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.1" y="830.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.04%)</title><rect x="1154.0" y="819.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.0" y="830.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.04%)</title><rect x="1154.5" y="819.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.5" y="830.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.12%)</title><rect x="1155.0" y="819.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.0" y="830.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (4 samples, 0.16%)</title><rect x="1156.4" y="819.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.4" y="830.0"></text>
</g>
<g>
<title>oopDesc::size() (2 samples, 0.08%)</title><rect x="1158.4" y="835.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.4" y="846.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1159.3" y="835.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.3" y="846.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.123] (1 samples, 0.04%)</title><rect x="1159.8" y="867.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.8" y="878.0"></text>
</g>
<g>
<title>G1RedirtyLoggedCardsTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="1160.3" y="947.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.3" y="958.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::par_apply_closure_to_all_completed_buffers(CardTableEntryClosure*) (1 samples, 0.04%)</title><rect x="1160.3" y="931.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.3" y="942.0"></text>
</g>
<g>
<title>JavaThread::run() (58 samples, 2.36%)</title><rect x="1160.8" y="963.0" width="27.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.8" y="974.0">J..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (58 samples, 2.36%)</title><rect x="1160.8" y="947.0" width="27.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.8" y="958.0">J..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (58 samples, 2.36%)</title><rect x="1160.8" y="931.0" width="27.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.8" y="942.0">C..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (58 samples, 2.36%)</title><rect x="1160.8" y="915.0" width="27.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.8" y="926.0">C..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (54 samples, 2.19%)</title><rect x="1160.8" y="899.0" width="25.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.8" y="910.0">C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (54 samples, 2.19%)</title><rect x="1160.8" y="883.0" width="25.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.8" y="894.0">C..</text>
</g>
<g>
<title>Compile::Code_Gen() (29 samples, 1.18%)</title><rect x="1160.8" y="867.0" width="13.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.8" y="878.0"></text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.08%)</title><rect x="1160.8" y="851.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.8" y="862.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.08%)</title><rect x="1160.8" y="835.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.8" y="846.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.04%)</title><rect x="1160.8" y="819.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.8" y="830.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.04%)</title><rect x="1160.8" y="803.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.8" y="814.0"></text>
</g>
<g>
<title>OopFlow::make(Arena*, int, Compile*) (1 samples, 0.04%)</title><rect x="1161.2" y="819.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.2" y="830.0"></text>
</g>
<g>
<title>ResourceObj::operator new(unsigned long, Arena*) (1 samples, 0.04%)</title><rect x="1161.2" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.2" y="814.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.08%)</title><rect x="1161.7" y="851.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.7" y="862.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.08%)</title><rect x="1161.7" y="835.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.7" y="846.0"></text>
</g>
<g>
<title>Matcher::collect_null_checks(Node*, Node*) (1 samples, 0.04%)</title><rect x="1161.7" y="819.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.7" y="830.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.04%)</title><rect x="1162.2" y="819.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.2" y="830.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.04%)</title><rect x="1162.2" y="803.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.2" y="814.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.04%)</title><rect x="1162.2" y="787.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.2" y="798.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.04%)</title><rect x="1162.2" y="771.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.2" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.12%)</title><rect x="1162.7" y="851.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.7" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.12%)</title><rect x="1162.7" y="835.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.7" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.08%)</title><rect x="1162.7" y="819.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.7" y="830.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.04%)</title><rect x="1162.7" y="803.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.7" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.04%)</title><rect x="1163.1" y="803.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.1" y="814.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.04%)</title><rect x="1163.6" y="819.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.6" y="830.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.04%)</title><rect x="1163.6" y="803.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.6" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="1163.6" y="787.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (21 samples, 0.85%)</title><rect x="1164.1" y="851.0" width="10.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.1" y="862.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.08%)</title><rect x="1164.1" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.1" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.08%)</title><rect x="1165.1" y="835.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.1" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.08%)</title><rect x="1165.1" y="819.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.1" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="1165.5" y="803.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.5" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.04%)</title><rect x="1166.0" y="835.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.0" y="846.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.04%)</title><rect x="1166.0" y="819.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.0" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.16%)</title><rect x="1166.5" y="835.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.5" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.04%)</title><rect x="1167.5" y="819.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.5" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.04%)</title><rect x="1167.9" y="819.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.9" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.04%)</title><rect x="1168.4" y="835.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.4" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.08%)</title><rect x="1168.9" y="835.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.9" y="846.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.04%)</title><rect x="1169.4" y="819.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.4" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.82] (1 samples, 0.04%)</title><rect x="1169.9" y="835.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.9" y="846.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.04%)</title><rect x="1169.9" y="819.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.9" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.12%)</title><rect x="1170.3" y="835.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.3" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.12%)</title><rect x="1170.3" y="819.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.3" y="830.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.04%)</title><rect x="1171.8" y="835.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.8" y="846.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.04%)</title><rect x="1171.8" y="819.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.8" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.04%)</title><rect x="1172.3" y="835.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.3" y="846.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.04%)</title><rect x="1172.3" y="819.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.3" y="830.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.04%)</title><rect x="1172.7" y="835.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.7" y="846.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.04%)</title><rect x="1172.7" y="819.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.7" y="830.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.04%)</title><rect x="1173.2" y="835.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.2" y="846.0"></text>
</g>
<g>
<title>__memset_erms (1 samples, 0.04%)</title><rect x="1173.7" y="835.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1176.7" y="846.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.04%)</title><rect x="1174.2" y="851.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.2" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (16 samples, 0.65%)</title><rect x="1174.7" y="867.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.04%)</title><rect x="1174.7" y="851.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.04%)</title><rect x="1174.7" y="835.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1174.7" y="819.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.7" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.04%)</title><rect x="1174.7" y="803.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.7" y="814.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.04%)</title><rect x="1175.1" y="851.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.1" y="862.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.04%)</title><rect x="1175.1" y="835.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.1" y="846.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.04%)</title><rect x="1175.1" y="819.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.1" y="830.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.04%)</title><rect x="1175.1" y="803.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.1" y="814.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.04%)</title><rect x="1175.1" y="787.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.1" y="798.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.04%)</title><rect x="1175.1" y="771.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.1" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (11 samples, 0.45%)</title><rect x="1175.6" y="851.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.6" y="862.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.04%)</title><rect x="1175.6" y="835.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.6" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.04%)</title><rect x="1176.1" y="835.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.04%)</title><rect x="1176.6" y="835.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.6" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.24%)</title><rect x="1177.1" y="835.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 0.20%)</title><rect x="1177.1" y="819.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.12%)</title><rect x="1178.0" y="803.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.0" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.08%)</title><rect x="1178.5" y="787.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.5" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.04%)</title><rect x="1179.5" y="819.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.5" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.08%)</title><rect x="1179.9" y="835.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.9" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.08%)</title><rect x="1179.9" y="819.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.9" y="830.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1179.9" y="803.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.9" y="814.0"></text>
</g>
<g>
<title>split_if(IfNode*, PhaseIterGVN*) (1 samples, 0.04%)</title><rect x="1179.9" y="787.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1182.9" y="798.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1180.4" y="803.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.4" y="814.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="1180.4" y="787.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="798.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.04%)</title><rect x="1180.4" y="771.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.4" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.08%)</title><rect x="1180.9" y="851.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.9" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.08%)</title><rect x="1180.9" y="835.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="846.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1180.9" y="819.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.9" y="830.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.04%)</title><rect x="1180.9" y="803.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="814.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.129] (1 samples, 0.04%)</title><rect x="1180.9" y="787.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="798.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1180.9" y="771.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="782.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1181.4" y="819.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.4" y="830.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.136] (1 samples, 0.04%)</title><rect x="1181.4" y="803.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.4" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1181.4" y="787.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.4" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1181.4" y="771.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.4" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1181.4" y="755.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.4" y="766.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.129] (1 samples, 0.04%)</title><rect x="1181.4" y="739.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.4" y="750.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1181.4" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.4" y="734.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.04%)</title><rect x="1181.8" y="851.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.8" y="862.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.04%)</title><rect x="1182.3" y="867.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.3" y="878.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.04%)</title><rect x="1182.3" y="851.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="862.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.04%)</title><rect x="1182.3" y="835.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.24%)</title><rect x="1182.8" y="867.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.24%)</title><rect x="1182.8" y="851.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.24%)</title><rect x="1182.8" y="835.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.24%)</title><rect x="1182.8" y="819.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.24%)</title><rect x="1182.8" y="803.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.24%)</title><rect x="1182.8" y="787.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.8" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.20%)</title><rect x="1182.8" y="771.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.20%)</title><rect x="1182.8" y="755.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.20%)</title><rect x="1182.8" y="739.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.20%)</title><rect x="1182.8" y="723.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.20%)</title><rect x="1182.8" y="707.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.20%)</title><rect x="1182.8" y="691.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.20%)</title><rect x="1182.8" y="675.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.20%)</title><rect x="1182.8" y="659.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.20%)</title><rect x="1182.8" y="643.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.20%)</title><rect x="1182.8" y="627.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.20%)</title><rect x="1182.8" y="611.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="622.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.04%)</title><rect x="1182.8" y="595.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="606.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.04%)</title><rect x="1182.8" y="579.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="590.0"></text>
</g>
<g>
<title>GraphKit::load_array_length(Node*) (1 samples, 0.04%)</title><rect x="1182.8" y="563.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.8" y="574.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1182.8" y="547.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="558.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.04%)</title><rect x="1182.8" y="531.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.16%)</title><rect x="1183.3" y="595.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.3" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.08%)</title><rect x="1183.3" y="579.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.3" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.08%)</title><rect x="1183.3" y="563.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.08%)</title><rect x="1183.3" y="547.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.08%)</title><rect x="1183.3" y="531.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.08%)</title><rect x="1183.3" y="515.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.3" y="526.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1183.3" y="499.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1183.8" y="499.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1183.8" y="483.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.8" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1183.8" y="467.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1183.8" y="451.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1183.8" y="435.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1183.8" y="419.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1183.8" y="403.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.8" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1183.8" y="387.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1183.8" y="371.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1183.8" y="355.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1183.8" y="339.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1183.8" y="323.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1183.8" y="307.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1183.8" y="291.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.8" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1183.8" y="275.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1183.8" y="259.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1183.8" y="243.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1183.8" y="227.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1183.8" y="211.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1183.8" y="195.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.8" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1183.8" y="179.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1183.8" y="163.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1183.8" y="147.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1183.8" y="131.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.04%)</title><rect x="1183.8" y="115.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.8" y="126.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.04%)</title><rect x="1183.8" y="99.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.8" y="110.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.04%)</title><rect x="1183.8" y="83.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="94.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.04%)</title><rect x="1183.8" y="67.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.8" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.04%)</title><rect x="1183.8" y="51.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.8" y="62.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.04%)</title><rect x="1183.8" y="35.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.8" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.08%)</title><rect x="1184.2" y="579.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.08%)</title><rect x="1184.2" y="563.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.08%)</title><rect x="1184.2" y="547.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.08%)</title><rect x="1184.2" y="531.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.08%)</title><rect x="1184.2" y="515.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.08%)</title><rect x="1184.2" y="499.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.08%)</title><rect x="1184.2" y="483.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1184.2" y="467.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.2" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1184.2" y="451.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1184.2" y="435.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1184.2" y="419.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1184.2" y="403.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1184.2" y="387.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1184.2" y="371.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.2" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1184.2" y="355.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1184.2" y="339.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1184.2" y="323.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1184.2" y="307.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1184.2" y="291.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.2" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1184.2" y="275.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1184.2" y="259.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.2" y="270.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.04%)</title><rect x="1184.2" y="243.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.2" y="254.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.04%)</title><rect x="1184.2" y="227.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="238.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.04%)</title><rect x="1184.2" y="211.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="222.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1184.2" y="195.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="206.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.04%)</title><rect x="1184.2" y="179.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.2" y="190.0"></text>
</g>
<g>
<title>GraphKit::set_all_memory(Node*) (1 samples, 0.04%)</title><rect x="1184.2" y="163.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.2" y="174.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.04%)</title><rect x="1184.2" y="147.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.2" y="158.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1184.7" y="467.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.7" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1185.2" y="771.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.2" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1185.2" y="755.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.2" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1185.2" y="739.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1185.2" y="723.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1185.2" y="707.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1185.2" y="691.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1185.2" y="675.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1185.2" y="659.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1185.2" y="643.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1185.2" y="627.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1185.2" y="611.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1185.2" y="595.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1185.2" y="579.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1185.2" y="563.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1185.2" y="547.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1185.2" y="531.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1185.2" y="515.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1185.2" y="499.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1185.2" y="483.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.2" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1185.2" y="467.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.2" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1185.2" y="451.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1185.2" y="435.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1185.2" y="419.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1185.2" y="403.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1185.2" y="387.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1185.2" y="371.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1185.2" y="355.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.2" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1185.2" y="339.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.2" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1185.2" y="323.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.2" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1185.2" y="307.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.04%)</title><rect x="1185.2" y="291.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.2" y="302.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.04%)</title><rect x="1185.7" y="867.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.7" y="878.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.04%)</title><rect x="1185.7" y="851.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.7" y="862.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.04%)</title><rect x="1186.2" y="867.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.2" y="878.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (1 samples, 0.04%)</title><rect x="1186.2" y="851.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.2" y="862.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.04%)</title><rect x="1186.2" y="835.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.2" y="846.0"></text>
</g>
<g>
<title>MethodData::next_data(ProfileData*) const (1 samples, 0.04%)</title><rect x="1186.2" y="819.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.2" y="830.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1186.2" y="803.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.2" y="814.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 0.16%)</title><rect x="1186.6" y="899.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.6" y="910.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (4 samples, 0.16%)</title><rect x="1186.6" y="883.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.6" y="894.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 0.16%)</title><rect x="1186.6" y="867.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.6" y="878.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 0.16%)</title><rect x="1186.6" y="851.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.6" y="862.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (3 samples, 0.12%)</title><rect x="1186.6" y="835.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.6" y="846.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 0.12%)</title><rect x="1186.6" y="819.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.6" y="830.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 0.12%)</title><rect x="1186.6" y="803.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.6" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3 samples, 0.12%)</title><rect x="1186.6" y="787.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.6" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.12%)</title><rect x="1186.6" y="771.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.6" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.12%)</title><rect x="1186.6" y="755.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.6" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1186.6" y="739.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.6" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::copy_state_for_exception_with_bci(int) (1 samples, 0.04%)</title><rect x="1186.6" y="723.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.6" y="734.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) [clone .constprop.381] (1 samples, 0.04%)</title><rect x="1186.6" y="707.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.6" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.08%)</title><rect x="1187.1" y="739.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.1" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.08%)</title><rect x="1187.1" y="723.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.1" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.08%)</title><rect x="1187.1" y="707.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.1" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.08%)</title><rect x="1187.1" y="691.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.1" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.08%)</title><rect x="1187.1" y="675.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.1" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1187.1" y="659.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.1" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1187.1" y="643.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.1" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1187.1" y="627.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.1" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.04%)</title><rect x="1187.1" y="611.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.1" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.04%)</title><rect x="1187.1" y="595.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.1" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::method_return(Instruction*, bool) (1 samples, 0.04%)</title><rect x="1187.1" y="579.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.1" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.04%)</title><rect x="1187.1" y="563.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.1" y="574.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.04%)</title><rect x="1187.1" y="547.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.1" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::load_indexed(BasicType) (1 samples, 0.04%)</title><rect x="1187.6" y="659.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.6" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.04%)</title><rect x="1187.6" y="643.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.6" y="654.0"></text>
</g>
<g>
<title>ValueType::as_StableArrayConstant() (1 samples, 0.04%)</title><rect x="1187.6" y="627.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.6" y="638.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.04%)</title><rect x="1188.1" y="835.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.1" y="846.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.04%)</title><rect x="1188.1" y="819.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.1" y="830.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_profile_call(LIR_OpProfileCall*) (1 samples, 0.04%)</title><rect x="1188.1" y="803.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.1" y="814.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.04%)</title><rect x="1188.1" y="787.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.1" y="798.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.04%)</title><rect x="1188.1" y="771.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.1" y="782.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.08%)</title><rect x="1188.6" y="963.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.6" y="974.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.08%)</title><rect x="1188.6" y="947.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.6" y="958.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.04%)</title><rect x="1188.6" y="931.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.6" y="942.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (1 samples, 0.04%)</title><rect x="1189.0" y="931.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="942.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.04%)</title><rect x="1189.0" y="915.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.0" y="926.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.04%)</title><rect x="1189.0" y="899.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.0" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.04%)</title><rect x="1189.0" y="883.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.0" y="894.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print() (1 samples, 0.04%)</title><rect x="1189.0" y="867.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.0" y="878.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print_post_evacuate_collection_set() const (1 samples, 0.04%)</title><rect x="1189.0" y="851.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.0" y="862.0"></text>
</g>
<g>
<title>ReferenceProcessorPhaseTimes::print_all_references(unsigned int, bool) const (1 samples, 0.04%)</title><rect x="1189.0" y="835.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.0" y="846.0"></text>
</g>
<g>
<title>sysmalloc (1 samples, 0.04%)</title><rect x="1189.5" y="1011.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1192.5" y="1022.0"></text>
</g>
</g>
</svg>
