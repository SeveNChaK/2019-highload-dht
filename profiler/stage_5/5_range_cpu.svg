<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1125"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1125"> </text>
<g id="frames">
<g>
<title>all (4,568 samples, 100.00%)</title><rect x="10.0" y="1091.0" width="1180.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="13.0" y="1102.0">all</text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.02%)</title><rect x="10.0" y="1075.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.02%)</title><rect x="10.3" y="1075.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.3" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (65 samples, 1.42%)</title><rect x="10.5" y="1075.0" width="16.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.5" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="11.8" y="1059.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.8" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (56 samples, 1.23%)</title><rect x="12.1" y="1059.0" width="14.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.1" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (55 samples, 1.20%)</title><rect x="12.3" y="1043.0" width="14.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.3" y="1054.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="12.3" y="1027.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.3" y="1038.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (47 samples, 1.03%)</title><rect x="12.6" y="1027.0" width="12.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.6" y="1038.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (2 samples, 0.04%)</title><rect x="13.1" y="1011.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="16.1" y="1022.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.02%)</title><rect x="13.4" y="995.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="16.4" y="1006.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.02%)</title><rect x="13.6" y="1011.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.6" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.02%)</title><rect x="13.9" y="1011.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="16.9" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.04%)</title><rect x="14.1" y="1011.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="17.1" y="1022.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (35 samples, 0.77%)</title><rect x="14.6" y="1011.0" width="9.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="17.6" y="1022.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (3 samples, 0.07%)</title><rect x="14.9" y="995.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="17.9" y="1006.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (2 samples, 0.04%)</title><rect x="15.7" y="995.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="18.7" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (23 samples, 0.50%)</title><rect x="16.2" y="995.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="19.2" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (21 samples, 0.46%)</title><rect x="16.2" y="979.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="19.2" y="990.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (9 samples, 0.20%)</title><rect x="16.5" y="963.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="19.5" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (9 samples, 0.20%)</title><rect x="16.5" y="947.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="19.5" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (3 samples, 0.07%)</title><rect x="16.5" y="931.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="19.5" y="942.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (2 samples, 0.04%)</title><rect x="16.7" y="915.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="19.7" y="926.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.02%)</title><rect x="17.2" y="931.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="20.2" y="942.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (4 samples, 0.09%)</title><rect x="17.5" y="931.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="20.5" y="942.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (3 samples, 0.07%)</title><rect x="17.7" y="915.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="20.7" y="926.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::num_par_ids() (1 samples, 0.02%)</title><rect x="17.7" y="899.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="20.7" y="910.0"></text>
</g>
<g>
<title>G1ConcurrentRefine::max_num_threads() (2 samples, 0.04%)</title><rect x="18.0" y="899.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="21.0" y="910.0"></text>
</g>
<g>
<title>HeapRegion::report_region_type_change(G1HeapRegionTraceType::Type) (1 samples, 0.02%)</title><rect x="18.5" y="931.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="21.5" y="942.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (8 samples, 0.18%)</title><rect x="18.8" y="963.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="21.8" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (5 samples, 0.11%)</title><rect x="18.8" y="947.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="21.8" y="958.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (5 samples, 0.11%)</title><rect x="18.8" y="931.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="21.8" y="942.0"></text>
</g>
<g>
<title>G1Analytics::predict_object_copy_time_ms(unsigned long, bool) const (1 samples, 0.02%)</title><rect x="19.0" y="915.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="22.0" y="926.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (3 samples, 0.07%)</title><rect x="19.3" y="915.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="22.3" y="926.0"></text>
</g>
<g>
<title>G1Analytics::predict_card_num(unsigned long, bool) const (1 samples, 0.02%)</title><rect x="19.3" y="899.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="22.3" y="910.0"></text>
</g>
<g>
<title>AbsSeq::dsd() const (1 samples, 0.02%)</title><rect x="19.3" y="883.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="22.3" y="894.0"></text>
</g>
<g>
<title>G1Analytics::predict_rs_scan_time_ms(unsigned long, bool) const (2 samples, 0.04%)</title><rect x="19.6" y="899.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="22.6" y="910.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.02%)</title><rect x="20.1" y="947.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="23.1" y="958.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.02%)</title><rect x="20.3" y="947.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="23.3" y="958.0"></text>
</g>
<g>
<title>HSpaceCounters::update_used(unsigned long) (1 samples, 0.02%)</title><rect x="20.6" y="947.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="23.6" y="958.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (3 samples, 0.07%)</title><rect x="20.8" y="963.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="23.8" y="974.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.07%)</title><rect x="20.8" y="947.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="23.8" y="958.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.07%)</title><rect x="20.8" y="931.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="23.8" y="942.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.02%)</title><rect x="20.8" y="915.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="23.8" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="20.8" y="899.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="23.8" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="20.8" y="883.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="23.8" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="20.8" y="867.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="23.8" y="878.0"></text>
</g>
<g>
<title>_init (2 samples, 0.04%)</title><rect x="21.1" y="915.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="24.1" y="926.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.02%)</title><rect x="21.6" y="979.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="24.6" y="990.0"></text>
</g>
<g>
<title>_init (1 samples, 0.02%)</title><rect x="21.9" y="979.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="24.9" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.02%)</title><rect x="22.1" y="995.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="25.1" y="1006.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.04%)</title><rect x="22.4" y="995.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="25.4" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.02%)</title><rect x="22.4" y="979.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="25.4" y="990.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="22.4" y="963.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="25.4" y="974.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.02%)</title><rect x="22.7" y="979.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="25.7" y="990.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (3 samples, 0.07%)</title><rect x="22.9" y="995.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="25.9" y="1006.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.02%)</title><rect x="23.7" y="1011.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="26.7" y="1022.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.02%)</title><rect x="23.9" y="1011.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="26.9" y="1022.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (2 samples, 0.04%)</title><rect x="24.2" y="1011.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="27.2" y="1022.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="24.7" y="1027.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="27.7" y="1038.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.11%)</title><rect x="25.0" y="1027.0" width="1.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="28.0" y="1038.0"></text>
</g>
<g>
<title>_init (1 samples, 0.02%)</title><rect x="26.3" y="1027.0" width="0.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="29.3" y="1038.0"></text>
</g>
<g>
<title>Klass::class_loader() const (2 samples, 0.04%)</title><rect x="26.5" y="1059.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="29.5" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="27.0" y="1059.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="30.0" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="27.0" y="1043.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="30.0" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="27.0" y="1027.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="30.0" y="1038.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.04%)</title><rect x="27.3" y="1075.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="30.3" y="1086.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (2 samples, 0.04%)</title><rect x="27.3" y="1059.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="30.3" y="1070.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.18%)</title><rect x="27.8" y="1075.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="30.8" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="27.8" y="1059.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="30.8" y="1070.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.04%)</title><rect x="28.1" y="1059.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="31.1" y="1070.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="28.1" y="1043.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="31.1" y="1054.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="28.1" y="1027.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="31.1" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="28.3" y="1011.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="31.3" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="28.3" y="995.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="31.3" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="28.3" y="979.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="31.3" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="28.3" y="963.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="31.3" y="974.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.02%)</title><rect x="28.6" y="1059.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="31.6" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="28.6" y="1043.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="31.6" y="1054.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.1 (4 samples, 0.09%)</title><rect x="28.9" y="1059.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="31.9" y="1070.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="29.1" y="1043.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="32.1" y="1054.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="29.1" y="1027.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="32.1" y="1038.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="29.1" y="1011.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="32.1" y="1022.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="29.4" y="995.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="32.4" y="1006.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="29.4" y="979.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="32.4" y="990.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="29.4" y="963.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="32.4" y="974.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="29.4" y="947.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="32.4" y="958.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="29.4" y="931.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="32.4" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="29.6" y="915.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="32.6" y="926.0"></text>
</g>
<g>
<title>[unknown_Java] (78 samples, 1.71%)</title><rect x="29.9" y="1075.0" width="20.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="32.9" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="49.8" y="1059.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="52.8" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="49.8" y="1043.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="52.8" y="1054.0"></text>
</g>
<g>
<title>__GI___vsnprintf_chk (3 samples, 0.07%)</title><rect x="50.0" y="1075.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="53.0" y="1086.0"></text>
</g>
<g>
<title>__GI__IO_default_xsputn (1 samples, 0.02%)</title><rect x="50.0" y="1059.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="53.0" y="1070.0"></text>
</g>
<g>
<title>vfprintf (2 samples, 0.04%)</title><rect x="50.3" y="1059.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="53.3" y="1070.0"></text>
</g>
<g>
<title>__GI___printf_fp_l (1 samples, 0.02%)</title><rect x="50.6" y="1043.0" width="0.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="53.6" y="1054.0"></text>
</g>
<g>
<title>__libc_free (1 samples, 0.02%)</title><rect x="50.8" y="1075.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="53.8" y="1086.0"></text>
</g>
<g>
<title>__new_sem_wait_slow.constprop.0 (2 samples, 0.04%)</title><rect x="51.1" y="1075.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="54.1" y="1086.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (2 samples, 0.04%)</title><rect x="51.6" y="1075.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="54.6" y="1086.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="52.1" y="1075.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="55.1" y="1086.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (4,233 samples, 92.67%)</title><rect x="52.4" y="1075.0" width="1093.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="55.4" y="1086.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="53.4" y="1059.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="56.4" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="53.4" y="1043.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="56.4" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="53.4" y="1027.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="56.4" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="53.4" y="1011.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="56.4" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.02%)</title><rect x="53.7" y="1059.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="56.7" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.02%)</title><rect x="53.9" y="1059.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="56.9" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.02%)</title><rect x="53.9" y="1043.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.9" y="1054.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.02%)</title><rect x="53.9" y="1027.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="56.9" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (32 samples, 0.70%)</title><rect x="54.2" y="1059.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="57.2" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (2 samples, 0.04%)</title><rect x="54.4" y="1043.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="57.4" y="1054.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (2 samples, 0.04%)</title><rect x="54.4" y="1027.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="57.4" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (29 samples, 0.63%)</title><rect x="54.9" y="1043.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="57.9" y="1054.0"></text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.02%)</title><rect x="56.0" y="1027.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="59.0" y="1038.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.02%)</title><rect x="56.0" y="1011.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="59.0" y="1022.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.48%)</title><rect x="56.2" y="1027.0" width="5.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="59.2" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="56.2" y="1011.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="59.2" y="1022.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.02%)</title><rect x="56.2" y="995.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="59.2" y="1006.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="56.5" y="1011.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="59.5" y="1022.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="56.8" y="1011.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="59.8" y="1022.0"></text>
</g>
<g>
<title>epoll_wait (18 samples, 0.39%)</title><rect x="57.3" y="1011.0" width="4.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="60.3" y="1022.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.37%)</title><rect x="57.5" y="995.0" width="4.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="60.5" y="1006.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.37%)</title><rect x="57.5" y="979.0" width="4.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="60.5" y="990.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.35%)</title><rect x="57.8" y="963.0" width="4.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="60.8" y="974.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.31%)</title><rect x="58.3" y="947.0" width="3.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="61.3" y="958.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.31%)</title><rect x="58.3" y="931.0" width="3.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="61.3" y="942.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.31%)</title><rect x="58.3" y="915.0" width="3.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="61.3" y="926.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.24%)</title><rect x="59.1" y="899.0" width="2.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="62.1" y="910.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="60.1" y="883.0" width="1.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="63.1" y="894.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="60.4" y="867.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="63.4" y="878.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="60.9" y="851.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="63.9" y="862.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.02%)</title><rect x="61.9" y="1027.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="64.9" y="1038.0"></text>
</g>
<g>
<title>epoll_wait (1 samples, 0.02%)</title><rect x="62.2" y="1027.0" width="0.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="65.2" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (4,194 samples, 91.81%)</title><rect x="62.4" y="1059.0" width="1083.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.4" y="1070.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (4,193 samples, 91.79%)</title><rect x="62.7" y="1043.0" width="1083.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.7" y="1054.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (4,159 samples, 91.05%)</title><rect x="63.2" y="1027.0" width="1074.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="66.2" y="1038.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (4,143 samples, 90.70%)</title><rect x="63.2" y="1011.0" width="1070.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="66.2" y="1022.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (4,142 samples, 90.67%)</title><rect x="63.5" y="995.0" width="1069.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="66.5" y="1006.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler2_entities.handleRequest (4,135 samples, 90.52%)</title><rect x="63.5" y="979.0" width="1068.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="66.5" y="990.0">RequestHandler2_entities.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.13%)</title><rect x="63.7" y="963.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="66.7" y="974.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.07%)</title><rect x="63.7" y="947.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="66.7" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.07%)</title><rect x="63.7" y="931.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="66.7" y="942.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.04%)</title><rect x="64.5" y="947.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.5" y="958.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="64.8" y="931.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="67.8" y="942.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="65.0" y="947.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.0" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="65.0" y="931.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.0" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="65.0" y="915.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="68.0" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/ReplicatedHttpServer.entities (4,128 samples, 90.37%)</title><rect x="65.3" y="963.0" width="1066.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.3" y="974.0">ru/mail/polis/service/alex/ReplicatedHttpServer.entities</text>
</g>
<g>
<title>java/lang/String.getBytes (17 samples, 0.37%)</title><rect x="65.3" y="947.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="68.3" y="958.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (16 samples, 0.35%)</title><rect x="65.5" y="931.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.5" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (12 samples, 0.26%)</title><rect x="66.6" y="915.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="69.6" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (61 samples, 1.34%)</title><rect x="69.7" y="947.0" width="15.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="72.7" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (61 samples, 1.34%)</title><rect x="69.7" y="931.0" width="15.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="72.7" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (59 samples, 1.29%)</title><rect x="69.9" y="915.0" width="15.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="72.9" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (59 samples, 1.29%)</title><rect x="69.9" y="899.0" width="15.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="72.9" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (58 samples, 1.27%)</title><rect x="70.2" y="883.0" width="15.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="73.2" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="76.9" y="867.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="79.9" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="76.9" y="851.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.9" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="76.9" y="835.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.9" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (31 samples, 0.68%)</title><rect x="77.2" y="867.0" width="8.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="80.2" y="878.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="84.9" y="851.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="87.9" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.02%)</title><rect x="85.2" y="915.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="88.2" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.range (3,838 samples, 84.02%)</title><rect x="85.4" y="947.0" width="991.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="88.4" y="958.0">ru/mail/polis/dao/DAO.range</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="87.2" y="931.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.2" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (28 samples, 0.61%)</title><rect x="87.5" y="931.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="90.5" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (28 samples, 0.61%)</title><rect x="87.5" y="915.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="90.5" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (28 samples, 0.61%)</title><rect x="87.5" y="899.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="90.5" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (28 samples, 0.61%)</title><rect x="87.5" y="883.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="90.5" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (27 samples, 0.59%)</title><rect x="87.5" y="867.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="90.5" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (27 samples, 0.59%)</title><rect x="87.5" y="851.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="90.5" y="862.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (7 samples, 0.15%)</title><rect x="92.7" y="835.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="95.7" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="94.5" y="867.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="97.5" y="878.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="94.5" y="851.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="97.5" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="94.5" y="835.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="97.5" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.02%)</title><rect x="94.7" y="931.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="97.7" y="942.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="94.7" y="915.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.7" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.until (3,757 samples, 82.25%)</title><rect x="95.0" y="931.0" width="970.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="98.0" y="942.0">ru/mail/polis/dao/Iters.until</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.&lt;init&gt; (3,757 samples, 82.25%)</title><rect x="95.0" y="915.0" width="970.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="98.0" y="926.0">ru/mail/polis/dao/Iters$UntilIterator.&lt;init&gt;</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (3,757 samples, 82.25%)</title><rect x="95.0" y="899.0" width="970.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="98.0" y="910.0">com/google/common/collect/TransformedIterator.hasNext</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3,757 samples, 82.25%)</title><rect x="95.0" y="883.0" width="970.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.0" y="894.0">com/google/common/collect/AbstractIterator.hasNext</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3,755 samples, 82.20%)</title><rect x="95.2" y="867.0" width="970.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="98.2" y="878.0">com/google/common/collect/AbstractIterator.tryToComputeNext</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3,754 samples, 82.18%)</title><rect x="95.5" y="851.0" width="969.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.5" y="862.0">com/google/common/collect/Iterators$5.computeNext</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="101.7" y="835.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="104.7" y="846.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="101.7" y="819.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="104.7" y="830.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.02%)</title><rect x="101.7" y="803.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="104.7" y="814.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.02%)</title><rect x="101.7" y="787.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="104.7" y="798.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.endOfData (1 samples, 0.02%)</title><rect x="102.0" y="835.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="105.0" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.hasNext (1 samples, 0.02%)</title><rect x="102.2" y="835.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="105.2" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3,697 samples, 80.93%)</title><rect x="102.5" y="835.0" width="955.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="105.5" y="846.0">ru/mail/polis/dao/Iters$CollapseEqualsIterator.next</text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="157.2" y="819.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="160.2" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="157.2" y="803.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="160.2" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="157.2" y="787.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="160.2" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="157.2" y="771.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="160.2" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="157.2" y="755.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="160.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="157.2" y="739.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="160.2" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="157.2" y="723.0" width="0.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="160.2" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (16 samples, 0.35%)</title><rect x="157.8" y="819.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="160.8" y="830.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2,741 samples, 60.00%)</title><rect x="161.9" y="819.0" width="708.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="164.9" y="830.0">com/google/common/collect/Iterators$MergingIterator.next</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (2,637 samples, 57.73%)</title><rect x="166.3" y="803.0" width="681.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="169.3" y="814.0">com/google/common/collect/Iterators$PeekingImpl.next</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (2,621 samples, 57.38%)</title><rect x="170.4" y="787.0" width="677.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="173.4" y="798.0">ru/mail/polis/dao/Iters$CollapseEqualsIterator.next</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="204.0" y="771.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="207.0" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="204.0" y="755.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="207.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="204.0" y="739.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="207.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="204.0" y="723.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="207.0" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="204.0" y="707.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="207.0" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="204.0" y="691.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="207.0" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="204.0" y="675.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="207.0" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (60 samples, 1.31%)</title><rect x="204.3" y="771.0" width="15.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="207.3" y="782.0"></text>
</g>
<g>
<title>SafepointBlob (1 samples, 0.02%)</title><rect x="213.0" y="755.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="216.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="213.0" y="739.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="216.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="213.0" y="723.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="216.0" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="213.0" y="707.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="216.0" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="213.0" y="691.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="216.0" y="702.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.isEmpty (11 samples, 0.24%)</title><rect x="213.3" y="755.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="216.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (5 samples, 0.11%)</title><rect x="214.8" y="739.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="217.8" y="750.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (14 samples, 0.31%)</title><rect x="216.1" y="755.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="219.1" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1,680 samples, 36.78%)</title><rect x="219.8" y="771.0" width="433.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="222.8" y="782.0">com/google/common/collect/Iterators$MergingIterator.next</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (6 samples, 0.13%)</title><rect x="232.4" y="755.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="235.4" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (994 samples, 21.76%)</title><rect x="234.0" y="755.0" width="256.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.0" y="766.0">com/google/common/collect/Iterator..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="256.7" y="739.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="259.7" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="256.7" y="723.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="259.7" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="256.7" y="707.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="259.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (477 samples, 10.44%)</title><rect x="257.0" y="739.0" width="123.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.0" y="750.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (469 samples, 10.27%)</title><rect x="259.0" y="723.0" width="121.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="262.0" y="734.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (392 samples, 8.58%)</title><rect x="278.9" y="707.0" width="101.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="281.9" y="718.0">java/util/co..</text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="377.6" y="691.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="380.6" y="702.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="377.6" y="675.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="380.6" y="686.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="377.6" y="659.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="380.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="377.6" y="643.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="380.6" y="654.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="377.6" y="627.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="380.6" y="638.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="377.6" y="611.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="380.6" y="622.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="377.6" y="595.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="380.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooHigh (6 samples, 0.13%)</title><rect x="378.6" y="691.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="381.6" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (428 samples, 9.37%)</title><rect x="380.2" y="739.0" width="110.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="383.2" y="750.0">ru/mail/polis..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (17 samples, 0.37%)</title><rect x="406.5" y="723.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="409.5" y="734.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.isEmpty (7 samples, 0.15%)</title><rect x="409.1" y="707.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="412.1" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.size (4 samples, 0.09%)</title><rect x="409.9" y="691.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="412.9" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (16 samples, 0.35%)</title><rect x="410.9" y="723.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="413.9" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (4 samples, 0.09%)</title><rect x="414.0" y="707.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="417.0" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$71/1929627194.apply (293 samples, 6.41%)</title><rect x="415.0" y="723.0" width="75.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="418.0" y="734.0">ru/mail/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.position (15 samples, 0.33%)</title><rect x="457.7" y="707.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="460.7" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (113 samples, 2.47%)</title><rect x="461.5" y="707.0" width="29.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="464.5" y="718.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (80 samples, 1.75%)</title><rect x="470.1" y="691.0" width="20.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="473.1" y="702.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.02%)</title><rect x="481.7" y="675.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="484.7" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="481.9" y="675.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="484.9" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="481.9" y="659.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="484.9" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="481.9" y="643.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="484.9" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="481.9" y="627.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="484.9" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="481.9" y="611.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="484.9" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="481.9" y="595.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="484.9" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="481.9" y="579.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="484.9" y="590.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (33 samples, 0.72%)</title><rect x="482.2" y="675.0" width="8.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="485.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="490.5" y="659.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="493.5" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="490.5" y="643.0" width="0.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="493.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="490.5" y="627.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="493.5" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="490.5" y="611.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="493.5" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="490.5" y="595.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="493.5" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="490.5" y="579.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="493.5" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="490.5" y="563.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="493.5" y="574.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (581 samples, 12.72%)</title><rect x="490.7" y="755.0" width="150.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="493.7" y="766.0">java/util/AbstractQ..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (556 samples, 12.17%)</title><rect x="497.2" y="739.0" width="143.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="500.2" y="750.0">java/util/Priority..</text>
</g>
<g>
<title>[unknown] (9 samples, 0.20%)</title><rect x="638.5" y="723.0" width="2.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="641.5" y="734.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.20%)</title><rect x="638.5" y="707.0" width="2.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="641.5" y="718.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.20%)</title><rect x="638.5" y="691.0" width="2.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="641.5" y="702.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.18%)</title><rect x="638.7" y="675.0" width="2.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="641.7" y="686.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.18%)</title><rect x="638.7" y="659.0" width="2.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="641.7" y="670.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.18%)</title><rect x="638.7" y="643.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="641.7" y="654.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.18%)</title><rect x="638.7" y="627.0" width="2.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="641.7" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (50 samples, 1.09%)</title><rect x="640.8" y="755.0" width="12.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="643.8" y="766.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (49 samples, 1.07%)</title><rect x="641.1" y="739.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="644.1" y="750.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (49 samples, 1.07%)</title><rect x="641.1" y="723.0" width="12.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="644.1" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (46 samples, 1.01%)</title><rect x="641.8" y="707.0" width="11.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="644.8" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (569 samples, 12.46%)</title><rect x="653.7" y="771.0" width="147.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="656.7" y="782.0">java/nio/ByteBuffe..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (563 samples, 12.32%)</title><rect x="655.3" y="755.0" width="145.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="658.3" y="766.0">java/nio/BufferMis..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="741.6" y="739.0" width="0.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="744.6" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="741.6" y="723.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="744.6" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="741.6" y="707.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="744.6" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="741.6" y="691.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="744.6" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="741.6" y="675.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="744.6" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="741.6" y="659.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="744.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="741.6" y="643.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="744.6" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (228 samples, 4.99%)</title><rect x="741.8" y="739.0" width="58.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="744.8" y="750.0">java/n..</text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (99 samples, 2.17%)</title><rect x="770.2" y="723.0" width="25.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="773.2" y="734.0">j..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="795.5" y="707.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="798.5" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="795.5" y="691.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="798.5" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="795.5" y="675.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="798.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="795.5" y="659.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="798.5" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="795.5" y="643.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="798.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="795.5" y="627.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="798.5" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="795.5" y="611.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="798.5" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (19 samples, 0.42%)</title><rect x="795.8" y="723.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="798.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$71/1929627194.apply (181 samples, 3.96%)</title><rect x="800.7" y="771.0" width="46.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="803.7" y="782.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (181 samples, 3.96%)</title><rect x="800.7" y="755.0" width="46.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="803.7" y="766.0">ru/m..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (181 samples, 3.96%)</title><rect x="800.7" y="739.0" width="46.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="803.7" y="750.0">java..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (181 samples, 3.96%)</title><rect x="800.7" y="723.0" width="46.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="803.7" y="734.0">java..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (181 samples, 3.96%)</title><rect x="800.7" y="707.0" width="46.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="803.7" y="718.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (181 samples, 3.96%)</title><rect x="800.7" y="691.0" width="46.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="803.7" y="702.0">java..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (181 samples, 3.96%)</title><rect x="800.7" y="675.0" width="46.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="803.7" y="686.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (83 samples, 1.82%)</title><rect x="800.7" y="659.0" width="21.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="803.7" y="670.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (66 samples, 1.44%)</title><rect x="805.1" y="643.0" width="17.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="808.1" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (52 samples, 1.14%)</title><rect x="808.7" y="627.0" width="13.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="811.7" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (98 samples, 2.15%)</title><rect x="822.2" y="659.0" width="25.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="825.2" y="670.0">j..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="831.7" y="643.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="834.7" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.02%)</title><rect x="831.7" y="627.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="834.7" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="831.7" y="611.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="834.7" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="831.7" y="595.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="834.7" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="831.7" y="579.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="834.7" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="831.7" y="563.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="834.7" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="831.7" y="547.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="834.7" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="831.7" y="531.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="834.7" y="542.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="831.7" y="515.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="834.7" y="526.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="831.7" y="499.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="834.7" y="510.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="831.7" y="483.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="834.7" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (27 samples, 0.59%)</title><rect x="832.0" y="643.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="835.0" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (33 samples, 0.72%)</title><rect x="838.9" y="643.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="841.9" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (29 samples, 0.63%)</title><rect x="840.0" y="627.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="843.0" y="638.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (30 samples, 0.66%)</title><rect x="847.5" y="803.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="850.5" y="814.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (30 samples, 0.66%)</title><rect x="847.5" y="787.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="850.5" y="798.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (25 samples, 0.55%)</title><rect x="848.8" y="771.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="851.8" y="782.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (57 samples, 1.25%)</title><rect x="855.2" y="803.0" width="14.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="858.2" y="814.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (57 samples, 1.25%)</title><rect x="855.2" y="787.0" width="14.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="858.2" y="798.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (57 samples, 1.25%)</title><rect x="855.2" y="771.0" width="14.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="858.2" y="782.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (50 samples, 1.09%)</title><rect x="857.0" y="755.0" width="12.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="860.0" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (559 samples, 12.24%)</title><rect x="869.9" y="819.0" width="144.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="872.9" y="830.0">java/nio/ByteBuffe..</text>
</g>
<g>
<title>java/nio/Buffer.remaining (3 samples, 0.07%)</title><rect x="873.0" y="803.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="876.0" y="814.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (544 samples, 11.91%)</title><rect x="873.8" y="803.0" width="140.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="876.8" y="814.0">java/nio/BufferMis..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="963.7" y="787.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="966.7" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="963.7" y="771.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="966.7" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="963.7" y="755.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="966.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="963.7" y="739.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="966.7" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="963.7" y="723.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="966.7" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="963.7" y="707.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="966.7" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="963.7" y="691.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="966.7" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (195 samples, 4.27%)</title><rect x="964.0" y="787.0" width="50.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="967.0" y="798.0">java/..</text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (93 samples, 2.04%)</title><rect x="983.6" y="771.0" width="24.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="986.6" y="782.0">j..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1007.4" y="755.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1010.4" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1007.4" y="739.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1010.4" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1007.4" y="723.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1010.4" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1007.4" y="707.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1010.4" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1007.4" y="691.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1010.4" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1007.4" y="675.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1010.4" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1007.4" y="659.0" width="0.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1010.4" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (26 samples, 0.57%)</title><rect x="1007.6" y="771.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1010.6" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$71/1929627194.apply (167 samples, 3.66%)</title><rect x="1014.3" y="819.0" width="43.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1017.3" y="830.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (147 samples, 3.22%)</title><rect x="1019.5" y="803.0" width="38.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1022.5" y="814.0">ru/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (139 samples, 3.04%)</title><rect x="1021.6" y="787.0" width="35.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1024.6" y="798.0">jav..</text>
</g>
<g>
<title>java/nio/Buffer.capacity (5 samples, 0.11%)</title><rect x="1030.6" y="771.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1033.6" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.07%)</title><rect x="1031.9" y="771.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1034.9" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.markValue (8 samples, 0.18%)</title><rect x="1032.7" y="771.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1035.7" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.13%)</title><rect x="1034.8" y="771.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1037.8" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (82 samples, 1.80%)</title><rect x="1036.3" y="771.0" width="21.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1039.3" y="782.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (72 samples, 1.58%)</title><rect x="1038.9" y="755.0" width="18.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1041.9" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (66 samples, 1.44%)</title><rect x="1040.4" y="739.0" width="17.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1043.4" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (60 samples, 1.31%)</title><rect x="1042.0" y="723.0" width="15.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1045.0" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (23 samples, 0.50%)</title><rect x="1045.6" y="707.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1048.6" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (23 samples, 0.50%)</title><rect x="1045.6" y="691.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1048.6" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (23 samples, 0.50%)</title><rect x="1045.6" y="675.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1048.6" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (23 samples, 0.50%)</title><rect x="1051.5" y="707.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1054.5" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (23 samples, 0.50%)</title><rect x="1051.5" y="691.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1054.5" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (23 samples, 0.50%)</title><rect x="1051.5" y="675.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1054.5" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/LSMDao$$Lambda$94/1890078373.apply (30 samples, 0.66%)</title><rect x="1057.5" y="835.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1060.5" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/LSMDao.lambda$iterator$0 (29 samples, 0.63%)</title><rect x="1057.7" y="819.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1060.7" y="830.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (3 samples, 0.07%)</title><rect x="1059.0" y="803.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1062.0" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Value.isDead (21 samples, 0.46%)</title><rect x="1059.8" y="803.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1062.8" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1 samples, 0.02%)</title><rect x="1065.2" y="867.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1068.2" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/LSMDao.iterator (43 samples, 0.94%)</title><rect x="1065.5" y="931.0" width="11.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1068.5" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/LSMDao.rowsIterator (43 samples, 0.94%)</title><rect x="1065.5" y="915.0" width="11.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1068.5" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.combineTables (34 samples, 0.74%)</title><rect x="1065.5" y="899.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1068.5" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTable.iterator (2 samples, 0.04%)</title><rect x="1065.5" y="883.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1068.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.04%)</title><rect x="1065.5" y="867.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1068.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.04%)</title><rect x="1065.5" y="851.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1068.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.04%)</title><rect x="1065.5" y="835.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1068.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1065.7" y="819.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1068.7" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTablePool.iterator (32 samples, 0.70%)</title><rect x="1066.0" y="883.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1069.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (2 samples, 0.04%)</title><rect x="1066.0" y="867.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1069.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (2 samples, 0.04%)</title><rect x="1066.0" y="851.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1069.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (2 samples, 0.04%)</title><rect x="1066.0" y="835.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1069.0" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.combineTables (25 samples, 0.55%)</title><rect x="1066.5" y="867.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1069.5" y="878.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (2 samples, 0.04%)</title><rect x="1067.0" y="851.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1070.0" y="862.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1067.0" y="835.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1070.0" y="846.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (1 samples, 0.02%)</title><rect x="1067.0" y="819.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1070.0" y="830.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (1 samples, 0.02%)</title><rect x="1067.3" y="819.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1070.3" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.04%)</title><rect x="1067.6" y="851.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1070.6" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.04%)</title><rect x="1067.6" y="835.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1070.6" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.04%)</title><rect x="1067.6" y="819.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1070.6" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.04%)</title><rect x="1067.6" y="803.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1070.6" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (2 samples, 0.04%)</title><rect x="1067.6" y="787.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1070.6" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTable.iterator (19 samples, 0.42%)</title><rect x="1068.1" y="851.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1071.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (18 samples, 0.39%)</title><rect x="1068.1" y="835.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1071.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (18 samples, 0.39%)</title><rect x="1068.1" y="819.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1071.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (17 samples, 0.37%)</title><rect x="1068.3" y="803.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1071.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (2 samples, 0.04%)</title><rect x="1068.3" y="787.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1071.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (2 samples, 0.04%)</title><rect x="1068.3" y="771.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1071.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.04%)</title><rect x="1068.3" y="755.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1071.3" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.02%)</title><rect x="1068.6" y="739.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1071.6" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.02%)</title><rect x="1068.6" y="723.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1071.6" y="734.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="1068.6" y="707.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1071.6" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="1068.6" y="691.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1071.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (15 samples, 0.33%)</title><rect x="1068.8" y="787.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1071.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (15 samples, 0.33%)</title><rect x="1068.8" y="771.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1071.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.02%)</title><rect x="1069.1" y="755.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1072.1" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.02%)</title><rect x="1069.1" y="739.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1072.1" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.02%)</title><rect x="1069.1" y="723.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1072.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (13 samples, 0.28%)</title><rect x="1069.4" y="755.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1072.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.04%)</title><rect x="1072.2" y="739.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1075.2" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.04%)</title><rect x="1072.2" y="723.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1075.2" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.04%)</title><rect x="1072.2" y="707.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1075.2" y="718.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.04%)</title><rect x="1072.2" y="691.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1075.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (1 samples, 0.02%)</title><rect x="1072.7" y="835.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1075.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (1 samples, 0.02%)</title><rect x="1072.7" y="819.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1075.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (1 samples, 0.02%)</title><rect x="1072.7" y="803.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1075.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1072.7" y="787.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1075.7" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.transformRows (5 samples, 0.11%)</title><rect x="1073.0" y="867.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1076.0" y="878.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (2 samples, 0.04%)</title><rect x="1073.0" y="851.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1076.0" y="862.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1073.0" y="835.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1076.0" y="846.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1 samples, 0.02%)</title><rect x="1073.2" y="819.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1076.2" y="830.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1 samples, 0.02%)</title><rect x="1073.2" y="803.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1076.2" y="814.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1 samples, 0.02%)</title><rect x="1073.2" y="787.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1076.2" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (3 samples, 0.07%)</title><rect x="1073.5" y="851.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1076.5" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (3 samples, 0.07%)</title><rect x="1073.5" y="835.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1076.5" y="846.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2 samples, 0.04%)</title><rect x="1073.8" y="819.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1076.8" y="830.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (1 samples, 0.02%)</title><rect x="1073.8" y="803.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1076.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (1 samples, 0.02%)</title><rect x="1073.8" y="787.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1076.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (1 samples, 0.02%)</title><rect x="1073.8" y="771.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1076.8" y="782.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1 samples, 0.02%)</title><rect x="1074.0" y="803.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1077.0" y="814.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1 samples, 0.02%)</title><rect x="1074.0" y="787.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1077.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (1 samples, 0.02%)</title><rect x="1074.0" y="771.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1077.0" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.transformRows (9 samples, 0.20%)</title><rect x="1074.3" y="899.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1077.3" y="910.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (5 samples, 0.11%)</title><rect x="1074.5" y="883.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1077.5" y="894.0"></text>
</g>
<g>
<title>com/google/common/base/Preconditions.checkNotNull (1 samples, 0.02%)</title><rect x="1074.5" y="867.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1077.5" y="878.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (4 samples, 0.09%)</title><rect x="1074.8" y="867.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1077.8" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (1 samples, 0.02%)</title><rect x="1074.8" y="851.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1077.8" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.checkForComodification (1 samples, 0.02%)</title><rect x="1074.8" y="835.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1077.8" y="846.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (3 samples, 0.07%)</title><rect x="1075.0" y="851.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1078.0" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (3 samples, 0.07%)</title><rect x="1075.8" y="883.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1078.8" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (3 samples, 0.07%)</title><rect x="1075.8" y="867.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1078.8" y="878.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3 samples, 0.07%)</title><rect x="1075.8" y="851.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1078.8" y="862.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (3 samples, 0.07%)</title><rect x="1075.8" y="835.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1078.8" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3 samples, 0.07%)</title><rect x="1075.8" y="819.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1078.8" y="830.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2 samples, 0.04%)</title><rect x="1076.1" y="803.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1079.1" y="814.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (1 samples, 0.02%)</title><rect x="1076.1" y="787.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1079.1" y="798.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1 samples, 0.02%)</title><rect x="1076.3" y="787.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1079.3" y="798.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1 samples, 0.02%)</title><rect x="1076.3" y="771.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1079.3" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.combineTables (1 samples, 0.02%)</title><rect x="1076.6" y="931.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1079.6" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/StorageSession.stream (212 samples, 4.64%)</title><rect x="1076.9" y="947.0" width="54.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1079.9" y="958.0">ru/ma..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (176 samples, 3.85%)</title><rect x="1076.9" y="931.0" width="45.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1079.9" y="942.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.11%)</title><rect x="1076.9" y="915.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1079.9" y="926.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.02%)</title><rect x="1077.9" y="899.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1080.9" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.02%)</title><rect x="1077.9" y="883.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1080.9" y="894.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.02%)</title><rect x="1077.9" y="867.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1080.9" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (171 samples, 3.74%)</title><rect x="1078.1" y="915.0" width="44.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1081.1" y="926.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1078.1" y="899.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1081.1" y="910.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (170 samples, 3.72%)</title><rect x="1078.4" y="899.0" width="43.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1081.4" y="910.0">one/..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="1078.4" y="883.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1081.4" y="894.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (168 samples, 3.68%)</title><rect x="1078.7" y="883.0" width="43.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1081.7" y="894.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (168 samples, 3.68%)</title><rect x="1078.7" y="867.0" width="43.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1081.7" y="878.0">one/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.02%)</title><rect x="1078.7" y="851.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1081.7" y="862.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.20%)</title><rect x="1078.9" y="851.0" width="2.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1081.9" y="862.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.20%)</title><rect x="1078.9" y="835.0" width="2.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1081.9" y="846.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (8 samples, 0.18%)</title><rect x="1078.9" y="819.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1081.9" y="830.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="1078.9" y="803.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1081.9" y="814.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="1079.2" y="803.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.2" y="814.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="1079.4" y="803.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1082.4" y="814.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (2 samples, 0.04%)</title><rect x="1079.7" y="803.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1082.7" y="814.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.02%)</title><rect x="1080.2" y="803.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1083.2" y="814.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="1080.5" y="803.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1083.5" y="814.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="1080.5" y="787.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1083.5" y="798.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.02%)</title><rect x="1080.7" y="787.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1083.7" y="798.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.02%)</title><rect x="1080.7" y="771.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1083.7" y="782.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.02%)</title><rect x="1081.0" y="819.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1084.0" y="830.0"></text>
</g>
<g>
<title>__send (158 samples, 3.46%)</title><rect x="1081.2" y="851.0" width="40.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1084.2" y="862.0">__s..</text>
</g>
<g>
<title>[unknown] (158 samples, 3.46%)</title><rect x="1081.2" y="835.0" width="40.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1084.2" y="846.0">[un..</text>
</g>
<g>
<title>[unknown] (158 samples, 3.46%)</title><rect x="1081.2" y="819.0" width="40.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1084.2" y="830.0">[un..</text>
</g>
<g>
<title>[unknown] (155 samples, 3.39%)</title><rect x="1082.0" y="803.0" width="40.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1085.0" y="814.0">[un..</text>
</g>
<g>
<title>[unknown] (154 samples, 3.37%)</title><rect x="1082.3" y="787.0" width="39.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1085.3" y="798.0">[un..</text>
</g>
<g>
<title>[unknown] (151 samples, 3.31%)</title><rect x="1083.1" y="771.0" width="39.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1086.1" y="782.0">[un..</text>
</g>
<g>
<title>[unknown] (150 samples, 3.28%)</title><rect x="1083.3" y="755.0" width="38.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1086.3" y="766.0">[un..</text>
</g>
<g>
<title>[unknown] (150 samples, 3.28%)</title><rect x="1083.3" y="739.0" width="38.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1086.3" y="750.0">[un..</text>
</g>
<g>
<title>[unknown] (149 samples, 3.26%)</title><rect x="1083.6" y="723.0" width="38.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1086.6" y="734.0">[un..</text>
</g>
<g>
<title>[unknown] (143 samples, 3.13%)</title><rect x="1085.1" y="707.0" width="37.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1088.1" y="718.0">[un..</text>
</g>
<g>
<title>[unknown] (132 samples, 2.89%)</title><rect x="1088.0" y="691.0" width="34.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1091.0" y="702.0">[u..</text>
</g>
<g>
<title>[unknown] (127 samples, 2.78%)</title><rect x="1089.3" y="675.0" width="32.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1092.3" y="686.0">[u..</text>
</g>
<g>
<title>[unknown] (122 samples, 2.67%)</title><rect x="1090.5" y="659.0" width="31.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1093.5" y="670.0">[u..</text>
</g>
<g>
<title>[unknown] (110 samples, 2.41%)</title><rect x="1093.6" y="643.0" width="28.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1096.6" y="654.0">[u..</text>
</g>
<g>
<title>[unknown] (103 samples, 2.25%)</title><rect x="1095.5" y="627.0" width="26.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1098.5" y="638.0">[..</text>
</g>
<g>
<title>[unknown] (102 samples, 2.23%)</title><rect x="1095.7" y="611.0" width="26.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1098.7" y="622.0">[..</text>
</g>
<g>
<title>[unknown] (102 samples, 2.23%)</title><rect x="1095.7" y="595.0" width="26.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1098.7" y="606.0">[..</text>
</g>
<g>
<title>[unknown] (97 samples, 2.12%)</title><rect x="1097.0" y="579.0" width="25.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1100.0" y="590.0">[..</text>
</g>
<g>
<title>[unknown] (94 samples, 2.06%)</title><rect x="1097.8" y="563.0" width="24.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1100.8" y="574.0">[..</text>
</g>
<g>
<title>[unknown] (88 samples, 1.93%)</title><rect x="1099.3" y="547.0" width="22.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1102.3" y="558.0">[..</text>
</g>
<g>
<title>[unknown] (79 samples, 1.73%)</title><rect x="1101.7" y="531.0" width="20.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1104.7" y="542.0"></text>
</g>
<g>
<title>[unknown] (70 samples, 1.53%)</title><rect x="1104.0" y="515.0" width="18.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1107.0" y="526.0"></text>
</g>
<g>
<title>[unknown] (69 samples, 1.51%)</title><rect x="1104.2" y="499.0" width="17.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1107.2" y="510.0"></text>
</g>
<g>
<title>[unknown] (64 samples, 1.40%)</title><rect x="1105.5" y="483.0" width="16.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1108.5" y="494.0"></text>
</g>
<g>
<title>[unknown] (60 samples, 1.31%)</title><rect x="1106.6" y="467.0" width="15.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1109.6" y="478.0"></text>
</g>
<g>
<title>[unknown] (60 samples, 1.31%)</title><rect x="1106.6" y="451.0" width="15.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1109.6" y="462.0"></text>
</g>
<g>
<title>[unknown] (60 samples, 1.31%)</title><rect x="1106.6" y="435.0" width="15.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1109.6" y="446.0"></text>
</g>
<g>
<title>[unknown] (60 samples, 1.31%)</title><rect x="1106.6" y="419.0" width="15.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1109.6" y="430.0"></text>
</g>
<g>
<title>[unknown] (58 samples, 1.27%)</title><rect x="1107.1" y="403.0" width="15.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1110.1" y="414.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.18%)</title><rect x="1108.1" y="387.0" width="14.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1111.1" y="398.0"></text>
</g>
<g>
<title>[unknown] (53 samples, 1.16%)</title><rect x="1108.4" y="371.0" width="13.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1111.4" y="382.0"></text>
</g>
<g>
<title>[unknown] (53 samples, 1.16%)</title><rect x="1108.4" y="355.0" width="13.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1111.4" y="366.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 1.12%)</title><rect x="1108.9" y="339.0" width="13.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1111.9" y="350.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 1.05%)</title><rect x="1109.7" y="323.0" width="12.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1112.7" y="334.0"></text>
</g>
<g>
<title>[unknown] (44 samples, 0.96%)</title><rect x="1110.7" y="307.0" width="11.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1113.7" y="318.0"></text>
</g>
<g>
<title>[unknown] (40 samples, 0.88%)</title><rect x="1111.7" y="291.0" width="10.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1114.7" y="302.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 0.70%)</title><rect x="1113.8" y="275.0" width="8.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1116.8" y="286.0"></text>
</g>
<g>
<title>[unknown] (31 samples, 0.68%)</title><rect x="1114.1" y="259.0" width="8.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1117.1" y="270.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.59%)</title><rect x="1115.1" y="243.0" width="7.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1118.1" y="254.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.28%)</title><rect x="1118.7" y="227.0" width="3.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1121.7" y="238.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="1122.1" y="883.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.1" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="1122.1" y="867.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1125.1" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/StorageSession.next (36 samples, 0.79%)</title><rect x="1122.3" y="931.0" width="9.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1125.3" y="942.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="1122.6" y="915.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1125.6" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (33 samples, 0.72%)</title><rect x="1122.8" y="915.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1125.8" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (33 samples, 0.72%)</title><rect x="1122.8" y="899.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1125.8" y="910.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (33 samples, 0.72%)</title><rect x="1122.8" y="883.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1125.8" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (33 samples, 0.72%)</title><rect x="1122.8" y="867.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1125.8" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1123.4" y="851.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1126.4" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1123.4" y="835.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1126.4" y="846.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.02%)</title><rect x="1123.4" y="819.0" width="0.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1126.4" y="830.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.02%)</title><rect x="1123.4" y="803.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1126.4" y="814.0"></text>
</g>
<g>
<title>__send (30 samples, 0.66%)</title><rect x="1123.6" y="851.0" width="7.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1126.6" y="862.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.66%)</title><rect x="1123.6" y="835.0" width="7.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1126.6" y="846.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.66%)</title><rect x="1123.6" y="819.0" width="7.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1126.6" y="830.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.66%)</title><rect x="1123.6" y="803.0" width="7.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1126.6" y="814.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.66%)</title><rect x="1123.6" y="787.0" width="7.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1126.6" y="798.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.63%)</title><rect x="1123.9" y="771.0" width="7.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1126.9" y="782.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.63%)</title><rect x="1123.9" y="755.0" width="7.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1126.9" y="766.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 0.61%)</title><rect x="1124.1" y="739.0" width="7.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1127.1" y="750.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 0.61%)</title><rect x="1124.1" y="723.0" width="7.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1127.1" y="734.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.59%)</title><rect x="1124.4" y="707.0" width="7.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1127.4" y="718.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.59%)</title><rect x="1124.4" y="691.0" width="7.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1127.4" y="702.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.53%)</title><rect x="1125.2" y="675.0" width="6.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1128.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.48%)</title><rect x="1125.7" y="659.0" width="5.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1128.7" y="670.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.37%)</title><rect x="1127.0" y="643.0" width="4.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1130.0" y="654.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.35%)</title><rect x="1127.2" y="627.0" width="4.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1130.2" y="638.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.33%)</title><rect x="1127.5" y="611.0" width="3.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1130.5" y="622.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.26%)</title><rect x="1128.3" y="595.0" width="3.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1131.3" y="606.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.26%)</title><rect x="1128.3" y="579.0" width="3.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1131.3" y="590.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.26%)</title><rect x="1128.3" y="563.0" width="3.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1131.3" y="574.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.24%)</title><rect x="1128.5" y="547.0" width="2.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1131.5" y="558.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.24%)</title><rect x="1128.5" y="531.0" width="2.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1131.5" y="542.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.22%)</title><rect x="1128.8" y="515.0" width="2.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1131.8" y="526.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.22%)</title><rect x="1128.8" y="499.0" width="2.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1131.8" y="510.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.20%)</title><rect x="1129.0" y="483.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1132.0" y="494.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="1129.6" y="467.0" width="1.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1132.6" y="478.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="1129.8" y="451.0" width="1.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1132.8" y="462.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="1129.8" y="435.0" width="1.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1132.8" y="446.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="1129.8" y="419.0" width="1.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1132.8" y="430.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="1130.1" y="403.0" width="1.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1133.1" y="414.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="1130.1" y="387.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1133.1" y="398.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="1130.1" y="371.0" width="1.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1133.1" y="382.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="1130.1" y="355.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1133.1" y="366.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="1130.1" y="339.0" width="1.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1133.1" y="350.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1130.8" y="323.0" width="0.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1133.8" y="334.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1130.8" y="307.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1133.8" y="318.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1130.8" y="291.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1133.8" y="302.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1131.1" y="275.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1134.1" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.hasNext (1 samples, 0.02%)</title><rect x="1131.4" y="915.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1134.4" y="926.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.04%)</title><rect x="1131.6" y="979.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1134.6" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.04%)</title><rect x="1131.6" y="963.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1134.6" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.04%)</title><rect x="1131.6" y="947.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1134.6" y="958.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.02%)</title><rect x="1131.9" y="931.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1134.9" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.02%)</title><rect x="1132.1" y="979.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1135.1" y="990.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="1132.1" y="963.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1135.1" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (4 samples, 0.09%)</title><rect x="1132.4" y="979.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1135.4" y="990.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.15%)</title><rect x="1133.4" y="1011.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1136.4" y="1022.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.09%)</title><rect x="1133.4" y="995.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1136.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="1133.9" y="979.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1136.9" y="990.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="1133.9" y="963.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1136.9" y="974.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.02%)</title><rect x="1133.9" y="947.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1136.9" y="958.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.02%)</title><rect x="1134.2" y="979.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1137.2" y="990.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="1134.5" y="995.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1137.5" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="1134.5" y="979.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1137.5" y="990.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.02%)</title><rect x="1135.0" y="995.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1138.0" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.04%)</title><rect x="1135.2" y="1011.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1138.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.04%)</title><rect x="1135.2" y="995.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1138.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.04%)</title><rect x="1135.2" y="979.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1138.2" y="990.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.02%)</title><rect x="1135.5" y="963.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1138.5" y="974.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="1135.5" y="947.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1138.5" y="958.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (6 samples, 0.13%)</title><rect x="1135.8" y="1011.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1138.8" y="1022.0"></text>
</g>
<g>
<title>RequestHandler2_entities.handleRequest (3 samples, 0.07%)</title><rect x="1136.0" y="995.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1139.0" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="1136.8" y="995.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1139.8" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.02%)</title><rect x="1137.3" y="1011.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1140.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.02%)</title><rect x="1137.3" y="995.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1140.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.02%)</title><rect x="1137.3" y="979.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1140.3" y="990.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (32 samples, 0.70%)</title><rect x="1137.6" y="1027.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1140.6" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (32 samples, 0.70%)</title><rect x="1137.6" y="1011.0" width="8.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1140.6" y="1022.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1139.1" y="995.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1142.1" y="1006.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1139.1" y="979.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1142.1" y="990.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.04%)</title><rect x="1139.1" y="963.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1142.1" y="974.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="1139.1" y="947.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1142.1" y="958.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.02%)</title><rect x="1139.4" y="947.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1142.4" y="958.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.02%)</title><rect x="1139.4" y="931.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.4" y="942.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.02%)</title><rect x="1139.6" y="963.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1142.6" y="974.0"></text>
</g>
<g>
<title>__GI___recv (23 samples, 0.50%)</title><rect x="1139.9" y="995.0" width="5.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1142.9" y="1006.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.48%)</title><rect x="1140.1" y="979.0" width="5.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1143.1" y="990.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.48%)</title><rect x="1140.1" y="963.0" width="5.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1143.1" y="974.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.46%)</title><rect x="1140.4" y="947.0" width="5.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1143.4" y="958.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.44%)</title><rect x="1140.7" y="931.0" width="5.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1143.7" y="942.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.42%)</title><rect x="1140.9" y="915.0" width="4.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1143.9" y="926.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.39%)</title><rect x="1141.2" y="899.0" width="4.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1144.2" y="910.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.39%)</title><rect x="1141.2" y="883.0" width="4.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1144.2" y="894.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.31%)</title><rect x="1142.2" y="867.0" width="3.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1145.2" y="878.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.26%)</title><rect x="1142.7" y="851.0" width="3.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1145.7" y="862.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.20%)</title><rect x="1143.5" y="835.0" width="2.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1146.5" y="846.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="1144.3" y="819.0" width="1.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1147.3" y="830.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1145.1" y="803.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1148.1" y="814.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (3 samples, 0.07%)</title><rect x="1145.8" y="1075.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1148.8" y="1086.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1145.8" y="1059.0" width="0.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1148.8" y="1070.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1145.8" y="1043.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1148.8" y="1054.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1145.8" y="1027.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1148.8" y="1038.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1145.8" y="1011.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1148.8" y="1022.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1145.8" y="995.0" width="0.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1148.8" y="1006.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1145.8" y="979.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1148.8" y="990.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1146.1" y="963.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1149.1" y="974.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1146.1" y="947.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1149.1" y="958.0"></text>
</g>
<g>
<title>start_thread (168 samples, 3.68%)</title><rect x="1146.6" y="1075.0" width="43.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1149.6" y="1086.0">star..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (168 samples, 3.68%)</title><rect x="1146.6" y="1059.0" width="43.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1149.6" y="1070.0">thre..</text>
</g>
<g>
<title>Thread::call_run() (168 samples, 3.68%)</title><rect x="1146.6" y="1043.0" width="43.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.6" y="1054.0">Thre..</text>
</g>
<g>
<title>GangWorker::loop() (110 samples, 2.41%)</title><rect x="1146.6" y="1027.0" width="28.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.6" y="1038.0">Ga..</text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (2 samples, 0.04%)</title><rect x="1146.6" y="1011.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.6" y="1022.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.02%)</title><rect x="1146.6" y="995.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.6" y="1006.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region(HeapRegion*) (1 samples, 0.02%)</title><rect x="1146.6" y="979.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.6" y="990.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.02%)</title><rect x="1146.9" y="995.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.9" y="1006.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (95 samples, 2.08%)</title><rect x="1147.1" y="1011.0" width="24.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.1" y="1022.0">G..</text>
</g>
<g>
<title>G1EvacPhaseTimesTracker::G1EvacPhaseTimesTracker(G1GCPhaseTimes*, G1ParScanThreadState*, G1GCPhaseTimes::GCParPhases, unsigned int) (1 samples, 0.02%)</title><rect x="1147.1" y="995.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.1" y="1006.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (44 samples, 0.96%)</title><rect x="1147.4" y="995.0" width="11.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.4" y="1006.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.04%)</title><rect x="1147.6" y="979.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.6" y="990.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1147.9" y="963.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.9" y="974.0"></text>
</g>
<g>
<title>SpinPause (40 samples, 0.88%)</title><rect x="1148.2" y="979.0" width="10.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1151.2" y="990.0"></text>
</g>
<g>
<title>os::elapsedTime() (1 samples, 0.02%)</title><rect x="1158.5" y="979.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.5" y="990.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::state_for_worker(unsigned int) (1 samples, 0.02%)</title><rect x="1158.7" y="995.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.7" y="1006.0"></text>
</g>
<g>
<title>G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, unsigned int, unsigned long) (1 samples, 0.02%)</title><rect x="1158.7" y="979.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.7" y="990.0"></text>
</g>
<g>
<title>PLABStats::desired_plab_sz(unsigned int) (1 samples, 0.02%)</title><rect x="1158.7" y="963.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.7" y="974.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (16 samples, 0.35%)</title><rect x="1159.0" y="995.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.0" y="1006.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (16 samples, 0.35%)</title><rect x="1159.0" y="979.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.0" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (15 samples, 0.33%)</title><rect x="1159.0" y="963.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.0" y="974.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (15 samples, 0.33%)</title><rect x="1159.0" y="947.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.0" y="958.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (15 samples, 0.33%)</title><rect x="1159.0" y="931.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.0" y="942.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (6 samples, 0.13%)</title><rect x="1159.5" y="915.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.5" y="926.0"></text>
</g>
<g>
<title>G1CardTable::mark_card_deferred(unsigned long) (2 samples, 0.04%)</title><rect x="1159.5" y="899.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.5" y="910.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.09%)</title><rect x="1160.0" y="899.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.0" y="910.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.04%)</title><rect x="1160.6" y="883.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.6" y="894.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.123] (7 samples, 0.15%)</title><rect x="1161.1" y="915.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.1" y="926.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (6 samples, 0.13%)</title><rect x="1161.1" y="899.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.1" y="910.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.04%)</title><rect x="1161.8" y="883.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.8" y="894.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.04%)</title><rect x="1161.8" y="867.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.8" y="878.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.02%)</title><rect x="1162.4" y="883.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.4" y="894.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.02%)</title><rect x="1162.6" y="899.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.6" y="910.0"></text>
</g>
<g>
<title>G1HotCardCache::drain(CardTableEntryClosure*, unsigned int) (1 samples, 0.02%)</title><rect x="1162.9" y="963.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.9" y="974.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (3 samples, 0.07%)</title><rect x="1163.1" y="995.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.1" y="1006.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (3 samples, 0.07%)</title><rect x="1163.1" y="979.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.1" y="990.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (3 samples, 0.07%)</title><rect x="1163.1" y="963.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.1" y="974.0"></text>
</g>
<g>
<title>G1EvacPhaseWithTrimTimeTracker::~G1EvacPhaseWithTrimTimeTracker() (1 samples, 0.02%)</title><rect x="1163.4" y="947.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.4" y="958.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.02%)</title><rect x="1163.7" y="947.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.7" y="958.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (1 samples, 0.02%)</title><rect x="1163.7" y="931.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.7" y="942.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringScanRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringScanRSClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1163.7" y="915.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.7" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (30 samples, 0.66%)</title><rect x="1163.9" y="995.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.9" y="1006.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (4 samples, 0.09%)</title><rect x="1163.9" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.9" y="990.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.02%)</title><rect x="1164.9" y="979.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="990.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (20 samples, 0.44%)</title><rect x="1165.2" y="979.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.2" y="990.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.04%)</title><rect x="1165.2" y="963.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.2" y="974.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (18 samples, 0.39%)</title><rect x="1165.7" y="963.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.7" y="974.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.02%)</title><rect x="1166.2" y="947.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.2" y="958.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (15 samples, 0.33%)</title><rect x="1166.5" y="947.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.5" y="958.0"></text>
</g>
<g>
<title>CompiledMethod::preserve_callee_argument_oops(frame, RegisterMap const*, OopClosure*) (1 samples, 0.02%)</title><rect x="1166.8" y="931.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.8" y="942.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (3 samples, 0.07%)</title><rect x="1167.0" y="931.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.0" y="942.0"></text>
</g>
<g>
<title>RelocIterator::initialize(CompiledMethod*, unsigned char*, unsigned char*) (1 samples, 0.02%)</title><rect x="1167.0" y="915.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.0" y="926.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (2 samples, 0.04%)</title><rect x="1167.3" y="915.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.3" y="926.0"></text>
</g>
<g>
<title>oop_Relocation::oop_value() (1 samples, 0.02%)</title><rect x="1167.5" y="899.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.5" y="910.0"></text>
</g>
<g>
<title>Assembler::locate_operand(unsigned char*, Assembler::WhichOperand) (1 samples, 0.02%)</title><rect x="1167.5" y="883.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.5" y="894.0"></text>
</g>
<g>
<title>Method::bcp_from(unsigned char*) const (2 samples, 0.04%)</title><rect x="1167.8" y="931.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.8" y="942.0"></text>
</g>
<g>
<title>StackFrameStream::StackFrameStream(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="1168.3" y="931.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.3" y="942.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.02%)</title><rect x="1168.3" y="915.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.3" y="926.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="1168.3" y="899.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.3" y="910.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (3 samples, 0.07%)</title><rect x="1168.6" y="931.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.6" y="942.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (3 samples, 0.07%)</title><rect x="1168.6" y="915.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.6" y="926.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.02%)</title><rect x="1168.8" y="899.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.8" y="910.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.02%)</title><rect x="1168.8" y="883.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.8" y="894.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="1169.1" y="899.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.1" y="910.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (2 samples, 0.04%)</title><rect x="1169.3" y="931.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.3" y="942.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.02%)</title><rect x="1169.6" y="915.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.6" y="926.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="1169.9" y="931.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.9" y="942.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.02%)</title><rect x="1169.9" y="915.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.9" y="926.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="1169.9" y="899.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.9" y="910.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.02%)</title><rect x="1170.1" y="931.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.1" y="942.0"></text>
</g>
<g>
<title>OopStorage::BasicParState::claim_next_segment(OopStorage::BasicParState::IterationData*) (1 samples, 0.02%)</title><rect x="1170.4" y="979.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.4" y="990.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (2 samples, 0.04%)</title><rect x="1170.6" y="979.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.6" y="990.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1171.1" y="979.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1174.1" y="990.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1171.1" y="963.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1174.1" y="974.0"></text>
</g>
<g>
<title>CompositeElapsedCounterSource::now() (2 samples, 0.04%)</title><rect x="1171.1" y="947.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.1" y="958.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="1171.1" y="931.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1174.1" y="942.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.04%)</title><rect x="1171.1" y="915.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1174.1" y="926.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (5 samples, 0.11%)</title><rect x="1171.7" y="1011.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.7" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (4 samples, 0.09%)</title><rect x="1171.9" y="995.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1174.9" y="1006.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (5 samples, 0.11%)</title><rect x="1173.0" y="1011.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.0" y="1022.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (5 samples, 0.11%)</title><rect x="1173.0" y="995.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.0" y="1006.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.67] (5 samples, 0.11%)</title><rect x="1173.0" y="979.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.0" y="990.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.09%)</title><rect x="1173.2" y="963.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.2" y="974.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (4 samples, 0.09%)</title><rect x="1173.2" y="947.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.2" y="958.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.04%)</title><rect x="1173.2" y="931.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.2" y="942.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.04%)</title><rect x="1173.2" y="915.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.2" y="926.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.04%)</title><rect x="1173.7" y="931.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.7" y="942.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1174.2" y="1011.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1177.2" y="1022.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="1174.5" y="1011.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1177.5" y="1022.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1174.5" y="995.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1177.5" y="1006.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1174.5" y="979.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1177.5" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1174.8" y="963.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1177.8" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1174.8" y="947.0" width="0.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1177.8" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1174.8" y="931.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1177.8" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1174.8" y="915.0" width="0.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1177.8" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1174.8" y="899.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1177.8" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1174.8" y="883.0" width="0.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1177.8" y="894.0"></text>
</g>
<g>
<title>JavaThread::run() (37 samples, 0.81%)</title><rect x="1175.0" y="1027.0" width="9.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.0" y="1038.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (37 samples, 0.81%)</title><rect x="1175.0" y="1011.0" width="9.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.0" y="1022.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (37 samples, 0.81%)</title><rect x="1175.0" y="995.0" width="9.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.0" y="1006.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (36 samples, 0.79%)</title><rect x="1175.0" y="979.0" width="9.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.0" y="990.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (33 samples, 0.72%)</title><rect x="1175.0" y="963.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.0" y="974.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (33 samples, 0.72%)</title><rect x="1175.0" y="947.0" width="8.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.0" y="958.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (18 samples, 0.39%)</title><rect x="1175.0" y="931.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.0" y="942.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.02%)</title><rect x="1175.0" y="915.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="926.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.02%)</title><rect x="1175.0" y="899.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.0" y="910.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.02%)</title><rect x="1175.0" y="883.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.0" y="894.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.02%)</title><rect x="1175.0" y="867.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.0" y="878.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.02%)</title><rect x="1175.3" y="915.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.3" y="926.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.02%)</title><rect x="1175.3" y="899.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.3" y="910.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.02%)</title><rect x="1175.3" y="883.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.3" y="894.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.02%)</title><rect x="1175.3" y="867.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.3" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.02%)</title><rect x="1175.5" y="915.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.5" y="926.0"></text>
</g>
<g>
<title>RootNode::is_block_proj() const (1 samples, 0.02%)</title><rect x="1175.5" y="899.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.5" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.02%)</title><rect x="1175.8" y="915.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.8" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.02%)</title><rect x="1175.8" y="899.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.8" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.02%)</title><rect x="1175.8" y="883.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.8" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (13 samples, 0.28%)</title><rect x="1176.1" y="915.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.1" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.04%)</title><rect x="1176.1" y="899.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.1" y="910.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.02%)</title><rect x="1176.1" y="883.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.1" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.02%)</title><rect x="1176.3" y="883.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.02%)</title><rect x="1176.3" y="867.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.3" y="878.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.02%)</title><rect x="1176.3" y="851.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.04%)</title><rect x="1176.6" y="899.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.6" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.02%)</title><rect x="1177.1" y="899.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.82] (1 samples, 0.02%)</title><rect x="1177.3" y="899.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.3" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.09%)</title><rect x="1177.6" y="899.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.04%)</title><rect x="1178.1" y="883.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.1" y="894.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.02%)</title><rect x="1178.6" y="899.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.6" y="910.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.02%)</title><rect x="1178.6" y="883.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.6" y="894.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.04%)</title><rect x="1178.9" y="899.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.9" y="910.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.02%)</title><rect x="1179.2" y="883.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.2" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1179.2" y="867.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.2" y="878.0"></text>
</g>
<g>
<title>jmpConUNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.02%)</title><rect x="1179.4" y="915.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.4" y="926.0"></text>
</g>
<g>
<title>Compile::Optimize() (9 samples, 0.20%)</title><rect x="1179.7" y="931.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.7" y="942.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.02%)</title><rect x="1179.7" y="915.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (6 samples, 0.13%)</title><rect x="1179.9" y="915.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.9" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1179.9" y="899.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.9" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1179.9" y="883.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.9" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1179.9" y="867.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.73] (1 samples, 0.02%)</title><rect x="1179.9" y="851.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.9" y="862.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.02%)</title><rect x="1179.9" y="835.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="846.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.02%)</title><rect x="1179.9" y="819.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.9" y="830.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.02%)</title><rect x="1180.2" y="899.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.2" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.02%)</title><rect x="1180.4" y="899.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.02%)</title><rect x="1180.7" y="899.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.7" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.02%)</title><rect x="1180.7" y="883.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="894.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.02%)</title><rect x="1180.7" y="867.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.04%)</title><rect x="1181.0" y="899.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.0" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.02%)</title><rect x="1181.2" y="883.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.02%)</title><rect x="1181.2" y="867.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::register_new_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1181.2" y="851.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="862.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.02%)</title><rect x="1181.2" y="835.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="846.0"></text>
</g>
<g>
<title>_init (1 samples, 0.02%)</title><rect x="1181.2" y="819.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1184.2" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.02%)</title><rect x="1181.5" y="915.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.5" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.02%)</title><rect x="1181.5" y="899.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.5" y="910.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.02%)</title><rect x="1181.5" y="883.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.5" y="894.0"></text>
</g>
<g>
<title>StoreCMNode::hash() const (1 samples, 0.02%)</title><rect x="1181.5" y="867.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.5" y="878.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.02%)</title><rect x="1181.7" y="915.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.11%)</title><rect x="1182.0" y="931.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.0" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.11%)</title><rect x="1182.0" y="915.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.11%)</title><rect x="1182.0" y="899.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.11%)</title><rect x="1182.0" y="883.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.11%)</title><rect x="1182.0" y="867.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.11%)</title><rect x="1182.0" y="851.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.0" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.09%)</title><rect x="1182.0" y="835.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.0" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.09%)</title><rect x="1182.0" y="819.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.09%)</title><rect x="1182.0" y="803.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.09%)</title><rect x="1182.0" y="787.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.09%)</title><rect x="1182.0" y="771.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.07%)</title><rect x="1182.0" y="755.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.0" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1182.0" y="739.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.0" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1182.0" y="723.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1182.0" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1182.0" y="691.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1182.0" y="675.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1182.0" y="659.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1182.0" y="643.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1182.0" y="627.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1182.0" y="611.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1182.0" y="595.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1182.0" y="579.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1182.0" y="563.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.0" y="547.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1182.0" y="531.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.0" y="542.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.02%)</title><rect x="1182.0" y="515.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.0" y="526.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.02%)</title><rect x="1182.0" y="499.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.0" y="510.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1182.0" y="483.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="494.0"></text>
</g>
<g>
<title>BoolNode::hash() const (1 samples, 0.02%)</title><rect x="1182.0" y="467.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.02%)</title><rect x="1182.3" y="563.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.3" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.5" y="739.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.5" y="723.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1182.5" y="707.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1182.5" y="691.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1182.5" y="675.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1182.5" y="659.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1182.5" y="643.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.5" y="627.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.5" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1182.5" y="611.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1182.5" y="595.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1182.5" y="579.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1182.5" y="563.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1182.5" y="547.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.5" y="531.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.5" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1182.5" y="515.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1182.5" y="499.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1182.5" y="483.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1182.5" y="467.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1182.5" y="451.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1182.5" y="435.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="446.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1182.5" y="419.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.5" y="430.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1182.5" y="403.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="414.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1182.5" y="387.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="398.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1182.5" y="371.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="382.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.02%)</title><rect x="1182.5" y="355.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.5" y="366.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1182.5" y="339.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.5" y="350.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1182.5" y="323.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="334.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.136] (1 samples, 0.02%)</title><rect x="1182.5" y="307.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="318.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1182.5" y="291.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.5" y="302.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1182.5" y="275.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.5" y="286.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1182.5" y="259.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.5" y="270.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1182.5" y="243.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="254.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1182.5" y="227.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.5" y="238.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1182.5" y="211.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.5" y="222.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1182.5" y="195.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.5" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1182.5" y="179.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.5" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1182.5" y="163.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.5" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1182.5" y="147.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.5" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1182.5" y="131.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1182.5" y="115.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.5" y="126.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1182.5" y="99.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.5" y="110.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1182.5" y="83.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="94.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1182.5" y="67.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="78.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1182.5" y="51.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.5" y="62.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.129] (1 samples, 0.02%)</title><rect x="1182.5" y="35.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.5" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1182.8" y="755.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1182.8" y="739.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.8" y="750.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1182.8" y="723.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="734.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1182.8" y="707.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.0" y="835.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.0" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.0" y="819.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.0" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1183.0" y="803.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1183.0" y="787.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1183.0" y="771.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1183.0" y="755.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1183.0" y="739.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.0" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.0" y="723.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1183.0" y="707.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1183.0" y="691.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1183.0" y="675.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1183.0" y="659.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1183.0" y="643.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.0" y="627.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1183.0" y="611.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1183.0" y="595.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1183.0" y="579.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1183.0" y="563.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1183.0" y="547.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.0" y="531.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1183.0" y="515.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1183.0" y="499.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1183.0" y="483.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1183.0" y="467.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1183.0" y="451.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.0" y="435.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1183.0" y="419.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1183.0" y="403.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1183.0" y="387.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1183.0" y="371.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1183.0" y="355.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.0" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.0" y="339.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.0" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1183.0" y="323.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1183.0" y="307.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1183.0" y="291.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1183.0" y="275.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.0" y="286.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.02%)</title><rect x="1183.0" y="259.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.0" y="270.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.02%)</title><rect x="1183.0" y="243.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.0" y="254.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.02%)</title><rect x="1183.0" y="227.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.0" y="238.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1183.0" y="211.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.0" y="222.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1183.0" y="195.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.0" y="206.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1183.0" y="179.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.0" y="190.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.02%)</title><rect x="1183.0" y="163.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="174.0"></text>
</g>
<g>
<title>TypeKlassPtr::xmeet(Type const*) const (1 samples, 0.02%)</title><rect x="1183.0" y="147.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.0" y="158.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.02%)</title><rect x="1183.3" y="931.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.3" y="942.0"></text>
</g>
<g>
<title>Compile::update_dead_node_list(Unique_Node_List&amp;) (1 samples, 0.02%)</title><rect x="1183.3" y="915.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.3" y="926.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.07%)</title><rect x="1183.5" y="963.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.5" y="974.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 0.07%)</title><rect x="1183.5" y="947.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.5" y="958.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.07%)</title><rect x="1183.5" y="931.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.5" y="942.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.07%)</title><rect x="1183.5" y="915.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.5" y="926.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (3 samples, 0.07%)</title><rect x="1183.5" y="899.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.5" y="910.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.02%)</title><rect x="1183.5" y="883.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.5" y="894.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (1 samples, 0.02%)</title><rect x="1183.5" y="867.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.5" y="878.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.02%)</title><rect x="1183.5" y="851.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.5" y="862.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (1 samples, 0.02%)</title><rect x="1183.5" y="835.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.5" y="846.0"></text>
</g>
<g>
<title>PhiResolverState::reset(int) (1 samples, 0.02%)</title><rect x="1183.5" y="819.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.5" y="830.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.04%)</title><rect x="1183.8" y="883.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.8" y="894.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.02%)</title><rect x="1183.8" y="867.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.8" y="878.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) [clone .constprop.232] (1 samples, 0.02%)</title><rect x="1183.8" y="851.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.8" y="862.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.02%)</title><rect x="1183.8" y="835.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="846.0"></text>
</g>
<g>
<title>LinearScanWalker::free_collect_inactive_any(Interval*) (1 samples, 0.02%)</title><rect x="1183.8" y="819.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.8" y="830.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.02%)</title><rect x="1184.1" y="867.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.1" y="878.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.02%)</title><rect x="1184.1" y="851.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.1" y="862.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.02%)</title><rect x="1184.3" y="979.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.3" y="990.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.02%)</title><rect x="1184.3" y="963.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.3" y="974.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.02%)</title><rect x="1184.3" y="947.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.3" y="958.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="1184.3" y="931.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1187.3" y="942.0"></text>
</g>
<g>
<title>VMThread::run() (20 samples, 0.44%)</title><rect x="1184.6" y="1027.0" width="5.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.6" y="1038.0"></text>
</g>
<g>
<title>VMThread::loop() (20 samples, 0.44%)</title><rect x="1184.6" y="1011.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.6" y="1022.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.02%)</title><rect x="1184.6" y="995.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.6" y="1006.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.02%)</title><rect x="1184.6" y="979.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.6" y="990.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (4 samples, 0.09%)</title><rect x="1184.8" y="995.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.8" y="1006.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (2 samples, 0.04%)</title><rect x="1185.1" y="979.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.1" y="990.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (2 samples, 0.04%)</title><rect x="1185.1" y="963.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.1" y="974.0"></text>
</g>
<g>
<title>AbstractWorkGang::add_workers(unsigned int, bool) (1 samples, 0.02%)</title><rect x="1185.1" y="947.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.1" y="958.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.02%)</title><rect x="1185.4" y="947.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.4" y="958.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="1185.4" y="931.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1188.4" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1185.4" y="915.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1188.4" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1185.4" y="899.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1188.4" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1185.4" y="883.0" width="0.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1188.4" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1185.4" y="867.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1188.4" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1185.4" y="851.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1188.4" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1185.4" y="835.0" width="0.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1188.4" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1185.4" y="819.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1188.4" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1185.4" y="803.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1188.4" y="814.0"></text>
</g>
<g>
<title>ThreadSafepointState::examine_state_of_thread() (1 samples, 0.02%)</title><rect x="1185.6" y="979.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.6" y="990.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (15 samples, 0.33%)</title><rect x="1185.9" y="995.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.9" y="1006.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (15 samples, 0.33%)</title><rect x="1185.9" y="979.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.9" y="990.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (15 samples, 0.33%)</title><rect x="1185.9" y="963.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (13 samples, 0.28%)</title><rect x="1185.9" y="947.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.9" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(G1CollectionSet*, EvacuationInfo&amp;, unsigned long const*) (1 samples, 0.02%)</title><rect x="1185.9" y="931.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.9" y="942.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.02%)</title><rect x="1185.9" y="915.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.9" y="926.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1PrepareFreeCollectionSetClosure::do_heap_region(HeapRegion*) (1 samples, 0.02%)</title><rect x="1185.9" y="899.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.9" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (1 samples, 0.02%)</title><rect x="1186.1" y="931.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.1" y="942.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics_before_gc() (1 samples, 0.02%)</title><rect x="1186.1" y="915.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.1" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (4 samples, 0.09%)</title><rect x="1186.4" y="931.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.4" y="942.0"></text>
</g>
<g>
<title>DerivedPointerTable::update_pointers() (1 samples, 0.02%)</title><rect x="1186.6" y="915.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.6" y="926.0"></text>
</g>
<g>
<title>G1RemSet::cleanup_after_oops_into_collection_set_do() (1 samples, 0.02%)</title><rect x="1186.9" y="915.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.9" y="926.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.02%)</title><rect x="1186.9" y="899.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.9" y="910.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.02%)</title><rect x="1186.9" y="883.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.9" y="894.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="1186.9" y="867.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1189.9" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1186.9" y="851.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1189.9" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1186.9" y="835.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1189.9" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1186.9" y="819.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1189.9" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1186.9" y="803.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1189.9" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1186.9" y="787.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1189.9" y="798.0"></text>
</g>
<g>
<title>WeakProcessor::weak_oops_do(BoolObjectClosure*, OopClosure*) (1 samples, 0.02%)</title><rect x="1187.2" y="915.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.2" y="926.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print() (3 samples, 0.07%)</title><rect x="1187.4" y="931.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.4" y="942.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print_post_evacuate_collection_set() const (3 samples, 0.07%)</title><rect x="1187.4" y="915.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.4" y="926.0"></text>
</g>
<g>
<title>ReferenceProcessorPhaseTimes::print_all_references(unsigned int, bool) const (2 samples, 0.04%)</title><rect x="1187.7" y="899.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.7" y="910.0"></text>
</g>
<g>
<title>outputStream::print_cr(char const*, ...) (2 samples, 0.04%)</title><rect x="1187.7" y="883.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.7" y="894.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf_and_write_with_automatic_buffer(char const*, __va_list_tag*, bool) (2 samples, 0.04%)</title><rect x="1187.7" y="867.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.7" y="878.0"></text>
</g>
<g>
<title>LogStream::write(char const*, unsigned long) (2 samples, 0.04%)</title><rect x="1187.7" y="851.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.7" y="862.0"></text>
</g>
<g>
<title>LogTagSet::vwrite(LogLevel::type, char const*, __va_list_tag*) (1 samples, 0.02%)</title><rect x="1187.7" y="835.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.7" y="846.0"></text>
</g>
<g>
<title>LogTargetHandle::print(char const*, ...) (1 samples, 0.02%)</title><rect x="1187.9" y="835.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.9" y="846.0"></text>
</g>
<g>
<title>LogTagSet::vwrite(LogLevel::type, char const*, __va_list_tag*) (1 samples, 0.02%)</title><rect x="1187.9" y="819.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.9" y="830.0"></text>
</g>
<g>
<title>LogTagSet::label(char*, unsigned long, char const*) const (1 samples, 0.02%)</title><rect x="1187.9" y="803.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.9" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::G1ParScanThreadStateSet(G1CollectedHeap*, unsigned int, unsigned long) (1 samples, 0.02%)</title><rect x="1188.2" y="931.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.2" y="942.0"></text>
</g>
<g>
<title>G1Policy::record_collection_pause_end(double, unsigned long, unsigned long) (1 samples, 0.02%)</title><rect x="1188.5" y="931.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.5" y="942.0"></text>
</g>
<g>
<title>os::elapsedTime() (1 samples, 0.02%)</title><rect x="1188.5" y="915.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.5" y="926.0"></text>
</g>
<g>
<title>SurvRateGroup::stop_adding_regions() (1 samples, 0.02%)</title><rect x="1188.7" y="931.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.7" y="942.0"></text>
</g>
<g>
<title>TraceMemoryManagerStats::~TraceMemoryManagerStats() (1 samples, 0.02%)</title><rect x="1189.0" y="931.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="942.0"></text>
</g>
<g>
<title>G1OldGenPool::get_memory_usage() (1 samples, 0.02%)</title><rect x="1189.0" y="915.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.0" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::used() const (1 samples, 0.02%)</title><rect x="1189.2" y="947.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.2" y="958.0"></text>
</g>
<g>
<title>GCCause::to_string(GCCause::Cause) (1 samples, 0.02%)</title><rect x="1189.5" y="947.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.5" y="958.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.02%)</title><rect x="1189.7" y="1027.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.7" y="1038.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.02%)</title><rect x="1189.7" y="1011.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.7" y="1022.0"></text>
</g>
</g>
</svg>
