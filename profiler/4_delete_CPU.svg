<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1349"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1349"> </text>
<g id="frames">
<g>
<title>all (1,612 samples, 100.00%)</title><rect x="10.0" y="1315.0" width="1180.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1326.0">all</text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.06%)</title><rect x="10.0" y="1299.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.06%)</title><rect x="10.7" y="1299.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.7" y="1310.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.19%)</title><rect x="11.5" y="1299.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.5" y="1310.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.06%)</title><rect x="11.5" y="1283.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.5" y="1294.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.12%)</title><rect x="12.2" y="1283.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.2" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.12%)</title><rect x="12.2" y="1267.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="15.2" y="1278.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.06%)</title><rect x="12.2" y="1251.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.2" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.06%)</title><rect x="12.2" y="1235.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="15.2" y="1246.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.06%)</title><rect x="12.9" y="1251.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.9" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.19%)</title><rect x="13.7" y="1299.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.7" y="1310.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.19%)</title><rect x="13.7" y="1283.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="16.7" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.19%)</title><rect x="13.7" y="1267.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="16.7" y="1278.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.19%)</title><rect x="13.7" y="1251.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="16.7" y="1262.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (2 samples, 0.12%)</title><rect x="13.7" y="1235.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="16.7" y="1246.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.06%)</title><rect x="14.4" y="1219.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="17.4" y="1230.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.06%)</title><rect x="15.1" y="1235.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="18.1" y="1246.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.06%)</title><rect x="15.1" y="1219.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="18.1" y="1230.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.06%)</title><rect x="15.1" y="1203.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="18.1" y="1214.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (14 samples, 0.87%)</title><rect x="15.9" y="1299.0" width="10.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="18.9" y="1310.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.06%)</title><rect x="15.9" y="1283.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="18.9" y="1294.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (13 samples, 0.81%)</title><rect x="16.6" y="1283.0" width="9.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="19.6" y="1294.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.74] (1 samples, 0.06%)</title><rect x="16.6" y="1267.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="19.6" y="1278.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 0.25%)</title><rect x="17.3" y="1267.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="20.3" y="1278.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.74] (2 samples, 0.12%)</title><rect x="18.1" y="1251.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="21.1" y="1262.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.06%)</title><rect x="19.5" y="1251.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="22.5" y="1262.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.96] (8 samples, 0.50%)</title><rect x="20.2" y="1267.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="23.2" y="1278.0"></text>
</g>
<g>
<title>JavaThreadBlockedOnMonitorEnterState::JavaThreadBlockedOnMonitorEnterState(JavaThread*, ObjectMonitor*) (1 samples, 0.06%)</title><rect x="20.2" y="1251.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="23.2" y="1262.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (7 samples, 0.43%)</title><rect x="21.0" y="1251.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="24.0" y="1262.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.74] (4 samples, 0.25%)</title><rect x="21.7" y="1235.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="24.7" y="1246.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.06%)</title><rect x="24.6" y="1235.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="27.6" y="1246.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.06%)</title><rect x="25.4" y="1235.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="28.4" y="1246.0"></text>
</g>
<g>
<title>[not_walkable] (2 samples, 0.12%)</title><rect x="26.1" y="1299.0" width="1.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="29.1" y="1310.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.06%)</title><rect x="27.6" y="1299.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="30.6" y="1310.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.06%)</title><rect x="27.6" y="1283.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="30.6" y="1294.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.06%)</title><rect x="27.6" y="1267.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="30.6" y="1278.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.06%)</title><rect x="27.6" y="1251.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="30.6" y="1262.0"></text>
</g>
<g>
<title>[unknown_Java] (6 samples, 0.37%)</title><rect x="28.3" y="1299.0" width="4.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="31.3" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="31.2" y="1283.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="34.2" y="1294.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.06%)</title><rect x="31.2" y="1267.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="34.2" y="1278.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.06%)</title><rect x="32.0" y="1283.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="35.0" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="32.0" y="1267.0" width="0.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="35.0" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="32.0" y="1251.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="35.0" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="32.0" y="1235.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="35.0" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="32.0" y="1219.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="35.0" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="32.0" y="1203.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="35.0" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="32.0" y="1187.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="35.0" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="32.0" y="1171.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="35.0" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="32.0" y="1155.0" width="0.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="35.0" y="1166.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.06%)</title><rect x="32.7" y="1299.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="35.7" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="32.7" y="1283.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="35.7" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="32.7" y="1267.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="35.7" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="32.7" y="1251.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="35.7" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="32.7" y="1235.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="35.7" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="32.7" y="1219.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="35.7" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="32.7" y="1203.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="35.7" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="32.7" y="1187.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="35.7" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="32.7" y="1171.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="35.7" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="32.7" y="1155.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="35.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,023 samples, 63.46%)</title><rect x="33.4" y="1299.0" width="748.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="36.4" y="1310.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,023 samples, 63.46%)</title><rect x="33.4" y="1283.0" width="748.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="36.4" y="1294.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,023 samples, 63.46%)</title><rect x="33.4" y="1267.0" width="748.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="36.4" y="1278.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.31%)</title><rect x="34.9" y="1251.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="37.9" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.31%)</title><rect x="34.9" y="1235.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.9" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.31%)</title><rect x="34.9" y="1219.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="37.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.25%)</title><rect x="35.6" y="1203.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="38.6" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl$$Lambda$65/80866200.run (2 samples, 0.12%)</title><rect x="37.1" y="1187.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (255 samples, 15.82%)</title><rect x="38.5" y="1251.0" width="186.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.5" y="1262.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (254 samples, 15.76%)</title><rect x="39.3" y="1235.0" width="185.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.3" y="1246.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (184 samples, 11.41%)</title><rect x="39.3" y="1219.0" width="134.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="42.3" y="1230.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (8 samples, 0.50%)</title><rect x="43.7" y="1203.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="46.7" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.06%)</title><rect x="48.8" y="1187.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="51.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.06%)</title><rect x="48.8" y="1171.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.8" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.06%)</title><rect x="48.8" y="1155.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.8" y="1166.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.06%)</title><rect x="48.8" y="1139.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="51.8" y="1150.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.06%)</title><rect x="48.8" y="1123.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="51.8" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="48.8" y="1107.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="51.8" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="48.8" y="1091.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="51.8" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="48.8" y="1075.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="51.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (13 samples, 0.81%)</title><rect x="49.5" y="1203.0" width="9.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="52.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 0.81%)</title><rect x="49.5" y="1187.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="52.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.50%)</title><rect x="52.5" y="1171.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.50%)</title><rect x="52.5" y="1155.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="55.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.12%)</title><rect x="52.5" y="1139.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="55.5" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.37%)</title><rect x="53.9" y="1139.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="56.9" y="1150.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.06%)</title><rect x="53.9" y="1123.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="56.9" y="1134.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (5 samples, 0.31%)</title><rect x="54.7" y="1123.0" width="3.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="57.7" y="1134.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.25%)</title><rect x="55.4" y="1107.0" width="2.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="58.4" y="1118.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.25%)</title><rect x="55.4" y="1091.0" width="2.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="58.4" y="1102.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.25%)</title><rect x="55.4" y="1075.0" width="2.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="58.4" y="1086.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.25%)</title><rect x="55.4" y="1059.0" width="2.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="58.4" y="1070.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.25%)</title><rect x="55.4" y="1043.0" width="2.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="58.4" y="1054.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.25%)</title><rect x="55.4" y="1027.0" width="2.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="58.4" y="1038.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.25%)</title><rect x="55.4" y="1011.0" width="2.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="58.4" y="1022.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.25%)</title><rect x="55.4" y="995.0" width="2.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="58.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.06%)</title><rect x="58.3" y="1171.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (154 samples, 9.55%)</title><rect x="59.0" y="1203.0" width="112.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.0" y="1214.0">java/util/conc..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (149 samples, 9.24%)</title><rect x="61.2" y="1187.0" width="109.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="64.2" y="1198.0">jdk/internal/..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="65.6" y="1171.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="68.6" y="1182.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (2 samples, 0.12%)</title><rect x="66.4" y="1171.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="69.4" y="1182.0"></text>
</g>
<g>
<title>Unsafe_Park (50 samples, 3.10%)</title><rect x="67.8" y="1171.0" width="36.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="70.8" y="1182.0">Uns..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.12%)</title><rect x="72.2" y="1155.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="75.2" y="1166.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.19%)</title><rect x="73.7" y="1155.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="76.7" y="1166.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.12%)</title><rect x="75.9" y="1155.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="78.9" y="1166.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (16 samples, 0.99%)</title><rect x="77.3" y="1155.0" width="11.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="80.3" y="1166.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.25%)</title><rect x="83.2" y="1139.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="86.2" y="1150.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.19%)</title><rect x="86.1" y="1139.0" width="2.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="89.1" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="87.6" y="1123.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="90.6" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="87.6" y="1107.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="90.6" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="87.6" y="1091.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="90.6" y="1102.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.06%)</title><rect x="88.3" y="1139.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="91.3" y="1150.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.06%)</title><rect x="89.1" y="1155.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="92.1" y="1166.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 0.43%)</title><rect x="89.8" y="1155.0" width="5.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="92.8" y="1166.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.43%)</title><rect x="89.8" y="1139.0" width="5.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="92.8" y="1150.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.43%)</title><rect x="89.8" y="1123.0" width="5.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="92.8" y="1134.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.37%)</title><rect x="90.5" y="1107.0" width="4.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="93.5" y="1118.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.31%)</title><rect x="91.3" y="1091.0" width="3.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="94.3" y="1102.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.19%)</title><rect x="92.7" y="1075.0" width="2.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="95.7" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="94.2" y="1059.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="97.2" y="1070.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.12%)</title><rect x="94.9" y="1155.0" width="1.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="97.9" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.31%)</title><rect x="96.4" y="1155.0" width="3.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="99.4" y="1166.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.06%)</title><rect x="100.0" y="1155.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="103.0" y="1166.0"></text>
</g>
<g>
<title>_init (2 samples, 0.12%)</title><rect x="100.8" y="1155.0" width="1.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="103.8" y="1166.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.06%)</title><rect x="102.2" y="1155.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="105.2" y="1166.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.06%)</title><rect x="103.0" y="1155.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="106.0" y="1166.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.06%)</title><rect x="103.7" y="1155.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="106.7" y="1166.0"></text>
</g>
<g>
<title>[unknown] (87 samples, 5.40%)</title><rect x="104.4" y="1171.0" width="63.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="107.4" y="1182.0">[unknown]</text>
</g>
<g>
<title>__pthread_cleanup_push (2 samples, 0.12%)</title><rect x="104.4" y="1155.0" width="1.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="107.4" y="1166.0"></text>
</g>
<g>
<title>__pthread_cond_wait (74 samples, 4.59%)</title><rect x="105.9" y="1155.0" width="54.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="108.9" y="1166.0">__pth..</text>
</g>
<g>
<title>[unknown] (63 samples, 3.91%)</title><rect x="113.9" y="1139.0" width="46.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="116.9" y="1150.0">[unk..</text>
</g>
<g>
<title>[unknown] (63 samples, 3.91%)</title><rect x="113.9" y="1123.0" width="46.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="116.9" y="1134.0">[unk..</text>
</g>
<g>
<title>[unknown] (61 samples, 3.78%)</title><rect x="115.4" y="1107.0" width="44.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="118.4" y="1118.0">[unk..</text>
</g>
<g>
<title>[unknown] (59 samples, 3.66%)</title><rect x="116.9" y="1091.0" width="43.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="119.9" y="1102.0">[unk..</text>
</g>
<g>
<title>[unknown] (55 samples, 3.41%)</title><rect x="119.8" y="1075.0" width="40.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="122.8" y="1086.0">[un..</text>
</g>
<g>
<title>[unknown] (46 samples, 2.85%)</title><rect x="126.4" y="1059.0" width="33.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="129.4" y="1070.0">[u..</text>
</g>
<g>
<title>[unknown] (37 samples, 2.30%)</title><rect x="133.0" y="1043.0" width="27.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="136.0" y="1054.0">[..</text>
</g>
<g>
<title>[unknown] (35 samples, 2.17%)</title><rect x="134.4" y="1027.0" width="25.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="137.4" y="1038.0">[..</text>
</g>
<g>
<title>[unknown] (33 samples, 2.05%)</title><rect x="135.9" y="1011.0" width="24.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="138.9" y="1022.0">[..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="159.3" y="995.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="162.3" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="159.3" y="979.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="162.3" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="159.3" y="963.0" width="0.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="162.3" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="159.3" y="947.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="162.3" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="159.3" y="931.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="162.3" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="159.3" y="915.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="162.3" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="159.3" y="899.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="162.3" y="910.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.12%)</title><rect x="160.1" y="1155.0" width="1.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="163.1" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.12%)</title><rect x="161.5" y="1155.0" width="1.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="164.5" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.12%)</title><rect x="163.0" y="1155.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="166.0" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (5 samples, 0.31%)</title><rect x="164.5" y="1155.0" width="3.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="167.5" y="1166.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.12%)</title><rect x="166.7" y="1139.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="169.7" y="1150.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.12%)</title><rect x="166.7" y="1123.0" width="1.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="169.7" y="1134.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.12%)</title><rect x="166.7" y="1107.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="169.7" y="1118.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.12%)</title><rect x="166.7" y="1091.0" width="1.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="169.7" y="1102.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.12%)</title><rect x="166.7" y="1075.0" width="1.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="169.7" y="1086.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.12%)</title><rect x="166.7" y="1059.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="169.7" y="1070.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.12%)</title><rect x="166.7" y="1043.0" width="1.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="169.7" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.19%)</title><rect x="168.1" y="1171.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="171.1" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.12%)</title><rect x="170.3" y="1187.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="173.3" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.19%)</title><rect x="171.8" y="1203.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="174.8" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="173.2" y="1187.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="176.2" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="173.2" y="1171.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="176.2" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="173.2" y="1155.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="176.2" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="173.2" y="1139.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="176.2" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="173.2" y="1123.0" width="0.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="176.2" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="173.2" y="1107.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="176.2" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="173.2" y="1091.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="176.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.19%)</title><rect x="174.0" y="1219.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="177.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.12%)</title><rect x="176.2" y="1219.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.12%)</title><rect x="176.2" y="1203.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="179.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (2 samples, 0.12%)</title><rect x="176.2" y="1187.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.12%)</title><rect x="176.2" y="1171.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="179.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.12%)</title><rect x="176.2" y="1155.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.2" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.12%)</title><rect x="176.2" y="1139.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.2" y="1150.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.06%)</title><rect x="176.2" y="1123.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="179.2" y="1134.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.06%)</title><rect x="176.2" y="1107.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="179.2" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="176.2" y="1091.0" width="0.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="179.2" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="176.2" y="1075.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="179.2" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="176.2" y="1059.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="179.2" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="176.2" y="1043.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="179.2" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="176.2" y="1027.0" width="0.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="179.2" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="176.2" y="1011.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="179.2" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="176.9" y="1123.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="179.9" y="1134.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.06%)</title><rect x="176.9" y="1107.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="179.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (65 samples, 4.03%)</title><rect x="177.6" y="1219.0" width="47.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="180.6" y="1230.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (65 samples, 4.03%)</title><rect x="177.6" y="1203.0" width="47.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="180.6" y="1214.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (65 samples, 4.03%)</title><rect x="177.6" y="1187.0" width="47.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="180.6" y="1198.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (65 samples, 4.03%)</title><rect x="177.6" y="1171.0" width="47.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="180.6" y="1182.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (51 samples, 3.16%)</title><rect x="187.9" y="1155.0" width="37.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.9" y="1166.0">jdk..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (1 samples, 0.06%)</title><rect x="188.6" y="1139.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="191.6" y="1150.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.06%)</title><rect x="189.3" y="1139.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="192.3" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="189.3" y="1123.0" width="0.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="192.3" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="189.3" y="1107.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="192.3" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="189.3" y="1091.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="192.3" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="189.3" y="1075.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="192.3" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="189.3" y="1059.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="192.3" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="189.3" y="1043.0" width="0.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="192.3" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="189.3" y="1027.0" width="0.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="192.3" y="1038.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.06%)</title><rect x="190.1" y="1139.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="193.1" y="1150.0"></text>
</g>
<g>
<title>Unsafe_Unpark (10 samples, 0.62%)</title><rect x="190.8" y="1139.0" width="7.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="193.8" y="1150.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (2 samples, 0.12%)</title><rect x="191.5" y="1123.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="194.5" y="1134.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.06%)</title><rect x="193.0" y="1123.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="196.0" y="1134.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.12%)</title><rect x="193.7" y="1123.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="196.7" y="1134.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (3 samples, 0.19%)</title><rect x="195.2" y="1123.0" width="2.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="198.2" y="1134.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.06%)</title><rect x="197.4" y="1123.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="200.4" y="1134.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.06%)</title><rect x="198.1" y="1139.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="201.1" y="1150.0"></text>
</g>
<g>
<title>_init (1 samples, 0.06%)</title><rect x="198.9" y="1139.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="201.9" y="1150.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (35 samples, 2.17%)</title><rect x="199.6" y="1139.0" width="25.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="202.6" y="1150.0">p..</text>
</g>
<g>
<title>[unknown] (32 samples, 1.99%)</title><rect x="201.8" y="1123.0" width="23.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="204.8" y="1134.0">[..</text>
</g>
<g>
<title>[unknown] (32 samples, 1.99%)</title><rect x="201.8" y="1107.0" width="23.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="204.8" y="1118.0">[..</text>
</g>
<g>
<title>[unknown] (32 samples, 1.99%)</title><rect x="201.8" y="1091.0" width="23.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="204.8" y="1102.0">[..</text>
</g>
<g>
<title>[unknown] (32 samples, 1.99%)</title><rect x="201.8" y="1075.0" width="23.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="204.8" y="1086.0">[..</text>
</g>
<g>
<title>[unknown] (32 samples, 1.99%)</title><rect x="201.8" y="1059.0" width="23.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="204.8" y="1070.0">[..</text>
</g>
<g>
<title>[unknown] (28 samples, 1.74%)</title><rect x="204.7" y="1043.0" width="20.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="207.7" y="1054.0"></text>
</g>
<g>
<title>[unknown] (26 samples, 1.61%)</title><rect x="206.2" y="1027.0" width="19.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="209.2" y="1038.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 1.55%)</title><rect x="206.9" y="1011.0" width="18.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="209.9" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="224.5" y="995.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="227.5" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="224.5" y="979.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="227.5" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="224.5" y="963.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="227.5" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="224.5" y="947.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="227.5" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="224.5" y="931.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="227.5" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="224.5" y="915.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="227.5" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="224.5" y="899.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="227.5" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl$$Lambda$65/80866200.run (761 samples, 47.21%)</title><rect x="225.2" y="1251.0" width="557.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.2" y="1262.0">ru/mail/polis/service/alex/AsyncServiceImpl$$Lambda$65/80866200.run</text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.lambda$executeAsync$3 (760 samples, 47.15%)</title><rect x="225.9" y="1235.0" width="556.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="228.9" y="1246.0">ru/mail/polis/service/alex/AsyncServiceImpl.lambda$executeAsync$3</text>
</g>
<g>
<title>itable stub (5 samples, 0.31%)</title><rect x="229.6" y="1219.0" width="3.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="232.6" y="1230.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (580 samples, 35.98%)</title><rect x="233.3" y="1219.0" width="424.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.3" y="1230.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.25%)</title><rect x="236.9" y="1203.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="239.9" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.25%)</title><rect x="236.9" y="1187.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.25%)</title><rect x="236.9" y="1171.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.9" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="236.9" y="1155.0" width="0.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="239.9" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="236.9" y="1139.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="239.9" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="236.9" y="1123.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="239.9" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="236.9" y="1107.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="239.9" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="236.9" y="1091.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="239.9" y="1102.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.06%)</title><rect x="237.7" y="1155.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="240.7" y="1166.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.12%)</title><rect x="238.4" y="1155.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="241.4" y="1166.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.12%)</title><rect x="238.4" y="1139.0" width="1.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="241.4" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="239.1" y="1123.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="242.1" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="239.1" y="1107.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="242.1" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="239.1" y="1091.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="242.1" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="239.1" y="1075.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="242.1" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="239.1" y="1059.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="242.1" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="239.1" y="1043.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="242.1" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="239.1" y="1027.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="242.1" y="1038.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (569 samples, 35.30%)</title><rect x="239.9" y="1203.0" width="416.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.9" y="1214.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.12%)</title><rect x="242.0" y="1187.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.0" y="1198.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (18 samples, 1.12%)</title><rect x="243.5" y="1187.0" width="13.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.5" y="1198.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (9 samples, 0.56%)</title><rect x="250.1" y="1171.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="253.1" y="1182.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (9 samples, 0.56%)</title><rect x="250.1" y="1155.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="253.1" y="1166.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (9 samples, 0.56%)</title><rect x="250.1" y="1139.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="253.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.charAt (9 samples, 0.56%)</title><rect x="250.1" y="1123.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.1" y="1134.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.19%)</title><rect x="254.5" y="1107.0" width="2.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="257.5" y="1118.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (546 samples, 33.87%)</title><rect x="256.7" y="1187.0" width="399.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="259.7" y="1198.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (546 samples, 33.87%)</title><rect x="256.7" y="1171.0" width="399.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="259.7" y="1182.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.06%)</title><rect x="257.4" y="1155.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="260.4" y="1166.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (544 samples, 33.75%)</title><rect x="258.2" y="1155.0" width="398.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.2" y="1166.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (543 samples, 33.68%)</title><rect x="258.9" y="1139.0" width="397.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.9" y="1150.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 0.12%)</title><rect x="262.5" y="1123.0" width="1.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="265.5" y="1134.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 1.36%)</title><rect x="264.0" y="1123.0" width="16.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="267.0" y="1134.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 1.36%)</title><rect x="264.0" y="1107.0" width="16.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="267.0" y="1118.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (16 samples, 0.99%)</title><rect x="264.0" y="1091.0" width="11.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="267.0" y="1102.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.19%)</title><rect x="266.2" y="1075.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="269.2" y="1086.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.06%)</title><rect x="268.4" y="1075.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="271.4" y="1086.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="269.1" y="1075.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="272.1" y="1086.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.06%)</title><rect x="269.9" y="1075.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="272.9" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="269.9" y="1059.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="272.9" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="269.9" y="1043.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="272.9" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="269.9" y="1027.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="272.9" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="269.9" y="1011.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="272.9" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="269.9" y="995.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="272.9" y="1006.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.31%)</title><rect x="270.6" y="1075.0" width="3.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="273.6" y="1086.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.06%)</title><rect x="271.3" y="1059.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="274.3" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (2 samples, 0.12%)</title><rect x="272.1" y="1059.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="275.1" y="1070.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.06%)</title><rect x="273.5" y="1059.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="276.5" y="1070.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (2 samples, 0.12%)</title><rect x="274.3" y="1075.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="277.3" y="1086.0"></text>
</g>
<g>
<title>__send (3 samples, 0.19%)</title><rect x="275.7" y="1091.0" width="2.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="278.7" y="1102.0"></text>
</g>
<g>
<title>_init (1 samples, 0.06%)</title><rect x="277.9" y="1091.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="280.9" y="1102.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.12%)</title><rect x="278.6" y="1091.0" width="1.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="281.6" y="1102.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.06%)</title><rect x="280.1" y="1123.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="283.1" y="1134.0"></text>
</g>
<g>
<title>__send (513 samples, 31.82%)</title><rect x="280.8" y="1123.0" width="375.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="283.8" y="1134.0">__send</text>
</g>
<g>
<title>[unknown] (511 samples, 31.70%)</title><rect x="282.3" y="1107.0" width="374.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="285.3" y="1118.0">[unknown]</text>
</g>
<g>
<title>[unknown] (511 samples, 31.70%)</title><rect x="282.3" y="1091.0" width="374.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="285.3" y="1102.0">[unknown]</text>
</g>
<g>
<title>[unknown] (504 samples, 31.27%)</title><rect x="287.4" y="1075.0" width="369.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="290.4" y="1086.0">[unknown]</text>
</g>
<g>
<title>[unknown] (504 samples, 31.27%)</title><rect x="287.4" y="1059.0" width="369.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="290.4" y="1070.0">[unknown]</text>
</g>
<g>
<title>[unknown] (496 samples, 30.77%)</title><rect x="293.3" y="1043.0" width="363.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="296.3" y="1054.0">[unknown]</text>
</g>
<g>
<title>[unknown] (492 samples, 30.52%)</title><rect x="296.2" y="1027.0" width="360.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="299.2" y="1038.0">[unknown]</text>
</g>
<g>
<title>[unknown] (485 samples, 30.09%)</title><rect x="301.3" y="1011.0" width="355.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="304.3" y="1022.0">[unknown]</text>
</g>
<g>
<title>[unknown] (483 samples, 29.96%)</title><rect x="302.8" y="995.0" width="353.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="305.8" y="1006.0">[unknown]</text>
</g>
<g>
<title>[unknown] (460 samples, 28.54%)</title><rect x="319.6" y="979.0" width="336.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="322.6" y="990.0">[unknown]</text>
</g>
<g>
<title>[unknown] (436 samples, 27.05%)</title><rect x="337.2" y="963.0" width="319.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="340.2" y="974.0">[unknown]</text>
</g>
<g>
<title>[unknown] (412 samples, 25.56%)</title><rect x="354.8" y="947.0" width="301.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="357.8" y="958.0">[unknown]</text>
</g>
<g>
<title>[unknown] (389 samples, 24.13%)</title><rect x="371.6" y="931.0" width="284.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="374.6" y="942.0">[unknown]</text>
</g>
<g>
<title>[unknown] (371 samples, 23.01%)</title><rect x="384.8" y="915.0" width="271.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="387.8" y="926.0">[unknown]</text>
</g>
<g>
<title>[unknown] (365 samples, 22.64%)</title><rect x="389.2" y="899.0" width="267.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="392.2" y="910.0">[unknown]</text>
</g>
<g>
<title>[unknown] (357 samples, 22.15%)</title><rect x="395.0" y="883.0" width="261.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="398.0" y="894.0">[unknown]</text>
</g>
<g>
<title>[unknown] (348 samples, 21.59%)</title><rect x="401.6" y="867.0" width="254.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="404.6" y="878.0">[unknown]</text>
</g>
<g>
<title>[unknown] (341 samples, 21.15%)</title><rect x="406.7" y="851.0" width="249.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="409.7" y="862.0">[unknown]</text>
</g>
<g>
<title>[unknown] (327 samples, 20.29%)</title><rect x="417.0" y="835.0" width="239.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="420.0" y="846.0">[unknown]</text>
</g>
<g>
<title>[unknown] (318 samples, 19.73%)</title><rect x="423.6" y="819.0" width="232.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="426.6" y="830.0">[unknown]</text>
</g>
<g>
<title>[unknown] (296 samples, 18.36%)</title><rect x="439.7" y="803.0" width="216.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="442.7" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (263 samples, 16.32%)</title><rect x="463.8" y="787.0" width="192.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="466.8" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (244 samples, 15.14%)</title><rect x="477.8" y="771.0" width="178.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="480.8" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (231 samples, 14.33%)</title><rect x="487.3" y="755.0" width="169.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="490.3" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (220 samples, 13.65%)</title><rect x="495.3" y="739.0" width="161.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="498.3" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (215 samples, 13.34%)</title><rect x="499.0" y="723.0" width="157.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="502.0" y="734.0">[unknown]</text>
</g>
<g>
<title>[unknown] (209 samples, 12.97%)</title><rect x="503.4" y="707.0" width="153.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="506.4" y="718.0">[unknown]</text>
</g>
<g>
<title>[unknown] (204 samples, 12.66%)</title><rect x="507.0" y="691.0" width="149.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="510.0" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (199 samples, 12.34%)</title><rect x="510.7" y="675.0" width="145.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="513.7" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (192 samples, 11.91%)</title><rect x="515.8" y="659.0" width="140.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="518.8" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (190 samples, 11.79%)</title><rect x="517.3" y="643.0" width="139.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="520.3" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (187 samples, 11.60%)</title><rect x="519.5" y="627.0" width="136.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="522.5" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (182 samples, 11.29%)</title><rect x="523.1" y="611.0" width="133.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="526.1" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (170 samples, 10.55%)</title><rect x="531.9" y="595.0" width="124.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="534.9" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (154 samples, 9.55%)</title><rect x="543.6" y="579.0" width="112.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="546.6" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (142 samples, 8.81%)</title><rect x="552.4" y="563.0" width="104.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="555.4" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (118 samples, 7.32%)</title><rect x="570.0" y="547.0" width="86.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="573.0" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (89 samples, 5.52%)</title><rect x="591.2" y="531.0" width="65.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="594.2" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (84 samples, 5.21%)</title><rect x="594.9" y="515.0" width="61.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="597.9" y="526.0">[unkno..</text>
</g>
<g>
<title>[unknown] (80 samples, 4.96%)</title><rect x="597.8" y="499.0" width="58.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="600.8" y="510.0">[unkno..</text>
</g>
<g>
<title>[unknown] (6 samples, 0.37%)</title><rect x="652.0" y="483.0" width="4.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="655.0" y="494.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.31%)</title><rect x="652.7" y="467.0" width="3.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="655.7" y="478.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.12%)</title><rect x="654.9" y="451.0" width="1.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="657.9" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.12%)</title><rect x="656.4" y="1203.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="659.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.06%)</title><rect x="657.1" y="1187.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="660.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.06%)</title><rect x="657.1" y="1171.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="660.1" y="1182.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl$$Lambda$86/1397931477.action (170 samples, 10.55%)</title><rect x="657.8" y="1219.0" width="124.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="660.8" y="1230.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.lambda$entity$2 (163 samples, 10.11%)</title><rect x="663.0" y="1203.0" width="119.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.0" y="1214.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.delete (163 samples, 10.11%)</title><rect x="663.0" y="1187.0" width="119.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="666.0" y="1198.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/AlexDAO.remove (163 samples, 10.11%)</title><rect x="663.0" y="1171.0" width="119.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="666.0" y="1182.0">ru/mail/polis/d..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.06%)</title><rect x="663.0" y="1155.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="666.0" y="1166.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTablePool.remove (162 samples, 10.05%)</title><rect x="663.7" y="1155.0" width="118.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="666.7" y="1166.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (7 samples, 0.43%)</title><rect x="665.1" y="1139.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="668.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (7 samples, 0.43%)</title><rect x="665.1" y="1123.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="668.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (7 samples, 0.43%)</title><rect x="665.1" y="1107.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="668.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.25%)</title><rect x="665.1" y="1091.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="668.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (4 samples, 0.25%)</title><rect x="665.1" y="1075.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="668.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.25%)</title><rect x="665.1" y="1059.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="668.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (4 samples, 0.25%)</title><rect x="665.1" y="1043.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="668.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.06%)</title><rect x="666.6" y="1027.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="669.6" y="1038.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.06%)</title><rect x="667.3" y="1027.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="670.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.12%)</title><rect x="668.1" y="1091.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="671.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.12%)</title><rect x="668.1" y="1075.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="671.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.12%)</title><rect x="668.1" y="1059.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="671.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (1 samples, 0.06%)</title><rect x="669.5" y="1091.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="672.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (1 samples, 0.06%)</title><rect x="669.5" y="1075.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="672.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (6 samples, 0.37%)</title><rect x="670.3" y="1139.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="673.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (3 samples, 0.19%)</title><rect x="670.3" y="1123.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="673.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (3 samples, 0.19%)</title><rect x="670.3" y="1107.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="673.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.12%)</title><rect x="671.0" y="1091.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="674.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.12%)</title><rect x="671.0" y="1075.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="674.0" y="1086.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.19%)</title><rect x="672.5" y="1123.0" width="2.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="675.5" y="1134.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTable.remove (141 samples, 8.75%)</title><rect x="674.7" y="1139.0" width="103.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="677.7" y="1150.0">ru/mail/poli..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (123 samples, 7.63%)</title><rect x="675.4" y="1123.0" width="90.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="678.4" y="1134.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (123 samples, 7.63%)</title><rect x="675.4" y="1107.0" width="90.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="678.4" y="1118.0">java/util/..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (10 samples, 0.62%)</title><rect x="676.1" y="1091.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="679.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (8 samples, 0.50%)</title><rect x="677.6" y="1075.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="680.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (14 samples, 0.87%)</title><rect x="683.4" y="1091.0" width="10.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="686.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Node.&lt;init&gt; (1 samples, 0.06%)</title><rect x="693.7" y="1091.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="696.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (2 samples, 0.12%)</title><rect x="694.4" y="1091.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="697.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.06%)</title><rect x="694.4" y="1075.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="697.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.06%)</title><rect x="694.4" y="1059.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="697.4" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.06%)</title><rect x="694.4" y="1043.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="697.4" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.06%)</title><rect x="694.4" y="1027.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="697.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.06%)</title><rect x="695.2" y="1075.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="698.2" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.06%)</title><rect x="695.2" y="1059.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="698.2" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.06%)</title><rect x="695.2" y="1043.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="698.2" y="1054.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.06%)</title><rect x="695.2" y="1027.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="698.2" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (1 samples, 0.06%)</title><rect x="695.2" y="1011.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="698.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (95 samples, 5.89%)</title><rect x="695.9" y="1091.0" width="69.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="698.9" y="1102.0">java/ut..</text>
</g>
<g>
<title>java/lang/Long.compareTo (36 samples, 2.23%)</title><rect x="700.3" y="1075.0" width="26.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="703.3" y="1086.0">j..</text>
</g>
<g>
<title>java/lang/Long.compareTo (28 samples, 1.74%)</title><rect x="703.9" y="1059.0" width="20.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="706.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.compare (28 samples, 1.74%)</title><rect x="703.9" y="1043.0" width="20.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="706.9" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.19%)</title><rect x="724.4" y="1059.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="727.4" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (53 samples, 3.29%)</title><rect x="726.6" y="1075.0" width="38.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="729.6" y="1086.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (53 samples, 3.29%)</title><rect x="726.6" y="1059.0" width="38.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="729.6" y="1070.0">jav..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (52 samples, 3.23%)</title><rect x="727.4" y="1043.0" width="38.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="730.4" y="1054.0">jav..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (10 samples, 0.62%)</title><rect x="737.6" y="1027.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="740.6" y="1038.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (10 samples, 0.62%)</title><rect x="737.6" y="1011.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="740.6" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (28 samples, 1.74%)</title><rect x="744.9" y="1027.0" width="20.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="747.9" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.12%)</title><rect x="764.0" y="1011.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="767.0" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.of (13 samples, 0.81%)</title><rect x="765.4" y="1123.0" width="9.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="768.4" y="1134.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.06%)</title><rect x="770.6" y="1107.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="773.6" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (1 samples, 0.06%)</title><rect x="771.3" y="1107.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="774.3" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.19%)</title><rect x="772.0" y="1107.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="775.0" y="1118.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.19%)</title><rect x="772.0" y="1091.0" width="2.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="775.0" y="1102.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.12%)</title><rect x="772.8" y="1075.0" width="1.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="775.8" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.&lt;init&gt; (1 samples, 0.06%)</title><rect x="774.2" y="1107.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="777.2" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Value.getData (3 samples, 0.19%)</title><rect x="775.0" y="1123.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="778.0" y="1134.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.19%)</title><rect x="775.0" y="1107.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="778.0" y="1118.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.06%)</title><rect x="776.4" y="1091.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="779.4" y="1102.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="776.4" y="1075.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="779.4" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="776.4" y="1059.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="779.4" y="1070.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="776.4" y="1043.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="779.4" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.06%)</title><rect x="776.4" y="1027.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="779.4" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Value.tombstone (1 samples, 0.06%)</title><rect x="777.1" y="1123.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="780.1" y="1134.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Value.&lt;init&gt; (1 samples, 0.06%)</title><rect x="777.1" y="1107.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="780.1" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTablePool.setToFlush (1 samples, 0.06%)</title><rect x="777.1" y="1091.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="780.1" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTablePool.setToFlush (6 samples, 0.37%)</title><rect x="777.9" y="1139.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="780.9" y="1150.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (524 samples, 32.51%)</title><rect x="782.3" y="1299.0" width="383.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="785.3" y="1310.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>[unknown] (3 samples, 0.19%)</title><rect x="784.5" y="1283.0" width="2.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="787.5" y="1294.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.19%)</title><rect x="784.5" y="1267.0" width="2.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="787.5" y="1278.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.19%)</title><rect x="784.5" y="1251.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="787.5" y="1262.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.06%)</title><rect x="786.7" y="1283.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="789.7" y="1294.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.06%)</title><rect x="787.4" y="1283.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="790.4" y="1294.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (162 samples, 10.05%)</title><rect x="788.1" y="1283.0" width="118.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="791.1" y="1294.0">one/nio/net/Na..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (150 samples, 9.31%)</title><rect x="796.9" y="1267.0" width="109.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="799.9" y="1278.0">one/nio/net/N..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.06%)</title><rect x="800.6" y="1251.0" width="0.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="803.6" y="1262.0"></text>
</g>
<g>
<title>[unknown] (136 samples, 8.44%)</title><rect x="801.3" y="1251.0" width="99.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="804.3" y="1262.0">[unknown]</text>
</g>
<g>
<title>__libc_disable_asynccancel (3 samples, 0.19%)</title><rect x="801.3" y="1235.0" width="2.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="804.3" y="1246.0"></text>
</g>
<g>
<title>clock_gettime (7 samples, 0.43%)</title><rect x="803.5" y="1235.0" width="5.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="806.5" y="1246.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.25%)</title><rect x="804.2" y="1219.0" width="3.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="807.2" y="1230.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (2 samples, 0.12%)</title><rect x="807.2" y="1219.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="810.2" y="1230.0"></text>
</g>
<g>
<title>epoll_wait (126 samples, 7.82%)</title><rect x="808.6" y="1235.0" width="92.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="811.6" y="1246.0">epoll_wait</text>
</g>
<g>
<title>[unknown] (124 samples, 7.69%)</title><rect x="810.1" y="1219.0" width="90.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="813.1" y="1230.0">[unknown]</text>
</g>
<g>
<title>[unknown] (124 samples, 7.69%)</title><rect x="810.1" y="1203.0" width="90.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="813.1" y="1214.0">[unknown]</text>
</g>
<g>
<title>[unknown] (121 samples, 7.51%)</title><rect x="812.3" y="1187.0" width="88.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="815.3" y="1198.0">[unknown]</text>
</g>
<g>
<title>[unknown] (120 samples, 7.44%)</title><rect x="813.0" y="1171.0" width="87.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="816.0" y="1182.0">[unknown]</text>
</g>
<g>
<title>[unknown] (118 samples, 7.32%)</title><rect x="814.5" y="1155.0" width="86.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="817.5" y="1166.0">[unknown]</text>
</g>
<g>
<title>[unknown] (104 samples, 6.45%)</title><rect x="824.7" y="1139.0" width="76.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="827.7" y="1150.0">[unknown]</text>
</g>
<g>
<title>[unknown] (84 samples, 5.21%)</title><rect x="839.4" y="1123.0" width="61.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="842.4" y="1134.0">[unkno..</text>
</g>
<g>
<title>[unknown] (74 samples, 4.59%)</title><rect x="846.7" y="1107.0" width="54.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="849.7" y="1118.0">[unkn..</text>
</g>
<g>
<title>[unknown] (59 samples, 3.66%)</title><rect x="857.7" y="1091.0" width="43.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="860.7" y="1102.0">[unk..</text>
</g>
<g>
<title>[unknown] (50 samples, 3.10%)</title><rect x="864.3" y="1075.0" width="36.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="867.3" y="1086.0">[un..</text>
</g>
<g>
<title>[unknown] (3 samples, 0.19%)</title><rect x="898.7" y="1059.0" width="2.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="901.7" y="1070.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.19%)</title><rect x="898.7" y="1043.0" width="2.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="901.7" y="1054.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.19%)</title><rect x="898.7" y="1027.0" width="2.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="901.7" y="1038.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.19%)</title><rect x="898.7" y="1011.0" width="2.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="901.7" y="1022.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.12%)</title><rect x="899.4" y="995.0" width="1.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="902.4" y="1006.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.12%)</title><rect x="899.4" y="979.0" width="1.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="902.4" y="990.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.12%)</title><rect x="899.4" y="963.0" width="1.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="902.4" y="974.0"></text>
</g>
<g>
<title>_init (2 samples, 0.12%)</title><rect x="900.9" y="1251.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="903.9" y="1262.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.12%)</title><rect x="902.3" y="1251.0" width="1.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="905.3" y="1262.0"></text>
</g>
<g>
<title>epoll_wait (4 samples, 0.25%)</title><rect x="903.8" y="1251.0" width="2.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="906.8" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="906.0" y="1235.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="909.0" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="906.0" y="1219.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="909.0" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="906.0" y="1203.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="909.0" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="906.0" y="1187.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="909.0" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="906.0" y="1171.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="909.0" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="906.0" y="1155.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="909.0" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="906.0" y="1139.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="909.0" y="1150.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (353 samples, 21.90%)</title><rect x="906.7" y="1283.0" width="258.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="909.7" y="1294.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (348 samples, 21.59%)</title><rect x="910.4" y="1267.0" width="254.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="913.4" y="1278.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (210 samples, 13.03%)</title><rect x="911.1" y="1251.0" width="153.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="914.1" y="1262.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (155 samples, 9.62%)</title><rect x="917.0" y="1235.0" width="113.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.0" y="1246.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (155 samples, 9.62%)</title><rect x="917.0" y="1219.0" width="113.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="920.0" y="1230.0">one/nio/http/H..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (138 samples, 8.56%)</title><rect x="917.0" y="1203.0" width="101.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="920.0" y="1214.0">RequestHandl..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (20 samples, 1.24%)</title><rect x="917.0" y="1187.0" width="14.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="920.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.31%)</title><rect x="919.9" y="1171.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="922.9" y="1182.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.31%)</title><rect x="919.9" y="1155.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="922.9" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="922.8" y="1139.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="925.8" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="922.8" y="1123.0" width="0.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="925.8" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="922.8" y="1107.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="925.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.06%)</title><rect x="923.5" y="1171.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="926.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.06%)</title><rect x="923.5" y="1155.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="926.5" y="1166.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.06%)</title><rect x="924.3" y="1171.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="927.3" y="1182.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="925.0" y="1171.0" width="0.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="928.0" y="1182.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (8 samples, 0.50%)</title><rect x="925.7" y="1171.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="928.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.25%)</title><rect x="928.7" y="1155.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="931.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.25%)</title><rect x="928.7" y="1139.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="931.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.25%)</title><rect x="928.7" y="1123.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="931.7" y="1134.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.25%)</title><rect x="931.6" y="1187.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="934.6" y="1198.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.entity (114 samples, 7.07%)</title><rect x="934.5" y="1187.0" width="83.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="937.5" y="1198.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.06%)</title><rect x="934.5" y="1171.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="937.5" y="1182.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.06%)</title><rect x="934.5" y="1155.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="937.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.06%)</title><rect x="934.5" y="1139.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="937.5" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.executeAsync (113 samples, 7.01%)</title><rect x="935.3" y="1171.0" width="82.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="938.3" y="1182.0">ru/mail/p..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (105 samples, 6.51%)</title><rect x="941.1" y="1155.0" width="76.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="944.1" y="1166.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (105 samples, 6.51%)</title><rect x="941.1" y="1139.0" width="76.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="944.1" y="1150.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (100 samples, 6.20%)</title><rect x="941.1" y="1123.0" width="73.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="944.1" y="1134.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.31%)</title><rect x="941.1" y="1107.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="944.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 0.31%)</title><rect x="941.1" y="1091.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="944.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 0.31%)</title><rect x="941.1" y="1075.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="944.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (95 samples, 5.89%)</title><rect x="944.8" y="1107.0" width="69.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="947.8" y="1118.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (95 samples, 5.89%)</title><rect x="944.8" y="1091.0" width="69.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="947.8" y="1102.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (95 samples, 5.89%)</title><rect x="944.8" y="1075.0" width="69.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="947.8" y="1086.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (95 samples, 5.89%)</title><rect x="944.8" y="1059.0" width="69.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="947.8" y="1070.0">java/ut..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (95 samples, 5.89%)</title><rect x="944.8" y="1043.0" width="69.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="947.8" y="1054.0">jdk/int..</text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.12%)</title><rect x="947.0" y="1027.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="950.0" y="1038.0"></text>
</g>
<g>
<title>Unsafe_Unpark (23 samples, 1.43%)</title><rect x="948.4" y="1027.0" width="16.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="951.4" y="1038.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (1 samples, 0.06%)</title><rect x="950.6" y="1011.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="953.6" y="1022.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.19%)</title><rect x="951.4" y="1011.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="954.4" y="1022.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.19%)</title><rect x="953.6" y="1011.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="956.6" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (7 samples, 0.43%)</title><rect x="955.8" y="1011.0" width="5.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="958.8" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.06%)</title><rect x="960.9" y="1011.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="963.9" y="1022.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.06%)</title><rect x="961.6" y="1011.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="964.6" y="1022.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.12%)</title><rect x="962.3" y="1011.0" width="1.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="965.3" y="1022.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.12%)</title><rect x="963.8" y="1011.0" width="1.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="966.8" y="1022.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.12%)</title><rect x="965.3" y="1027.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="968.3" y="1038.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.19%)</title><rect x="966.7" y="1027.0" width="2.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="969.7" y="1038.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (62 samples, 3.85%)</title><rect x="968.9" y="1027.0" width="45.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="971.9" y="1038.0">pthr..</text>
</g>
<g>
<title>[unknown] (59 samples, 3.66%)</title><rect x="971.1" y="1011.0" width="43.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="974.1" y="1022.0">[unk..</text>
</g>
<g>
<title>[unknown] (59 samples, 3.66%)</title><rect x="971.1" y="995.0" width="43.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="974.1" y="1006.0">[unk..</text>
</g>
<g>
<title>[unknown] (58 samples, 3.60%)</title><rect x="971.9" y="979.0" width="42.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="974.9" y="990.0">[unk..</text>
</g>
<g>
<title>[unknown] (57 samples, 3.54%)</title><rect x="972.6" y="963.0" width="41.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="975.6" y="974.0">[un..</text>
</g>
<g>
<title>[unknown] (55 samples, 3.41%)</title><rect x="974.1" y="947.0" width="40.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="977.1" y="958.0">[un..</text>
</g>
<g>
<title>[unknown] (51 samples, 3.16%)</title><rect x="977.0" y="931.0" width="37.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="980.0" y="942.0">[un..</text>
</g>
<g>
<title>[unknown] (48 samples, 2.98%)</title><rect x="979.2" y="915.0" width="35.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="982.2" y="926.0">[un..</text>
</g>
<g>
<title>[unknown] (44 samples, 2.73%)</title><rect x="982.1" y="899.0" width="32.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="985.1" y="910.0">[u..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.31%)</title><rect x="1014.3" y="1123.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1017.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.31%)</title><rect x="1014.3" y="1107.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1017.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.31%)</title><rect x="1014.3" y="1091.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1017.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.31%)</title><rect x="1014.3" y="1075.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1017.3" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (17 samples, 1.05%)</title><rect x="1018.0" y="1203.0" width="12.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1021.0" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.get (17 samples, 1.05%)</title><rect x="1018.0" y="1187.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1021.0" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.31%)</title><rect x="1018.0" y="1171.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1021.0" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (12 samples, 0.74%)</title><rect x="1021.6" y="1171.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1024.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (12 samples, 0.74%)</title><rect x="1021.6" y="1155.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1024.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (12 samples, 0.74%)</title><rect x="1021.6" y="1139.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1024.6" y="1150.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="1029.0" y="1123.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1032.0" y="1134.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.06%)</title><rect x="1029.7" y="1123.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1032.7" y="1134.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (35 samples, 2.17%)</title><rect x="1030.4" y="1235.0" width="25.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1033.4" y="1246.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.19%)</title><rect x="1039.2" y="1219.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1042.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.19%)</title><rect x="1039.2" y="1203.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1042.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.19%)</title><rect x="1039.2" y="1187.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1042.2" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.19%)</title><rect x="1039.2" y="1171.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1042.2" y="1182.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 0.93%)</title><rect x="1041.4" y="1219.0" width="11.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1044.4" y="1230.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.87%)</title><rect x="1042.1" y="1203.0" width="10.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1045.1" y="1214.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (5 samples, 0.31%)</title><rect x="1052.4" y="1219.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1055.4" y="1230.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.31%)</title><rect x="1056.0" y="1235.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1059.0" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.06%)</title><rect x="1059.0" y="1219.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1062.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.06%)</title><rect x="1059.0" y="1203.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1062.0" y="1214.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.43%)</title><rect x="1059.7" y="1235.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1062.7" y="1246.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (2 samples, 0.12%)</title><rect x="1060.4" y="1219.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1063.4" y="1230.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.25%)</title><rect x="1061.9" y="1219.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1064.9" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (3 samples, 0.19%)</title><rect x="1064.8" y="1251.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1067.8" y="1262.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (134 samples, 8.31%)</title><rect x="1067.0" y="1251.0" width="98.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1070.0" y="1262.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (131 samples, 8.13%)</title><rect x="1069.2" y="1235.0" width="95.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1072.2" y="1246.0">one/nio/net..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.12%)</title><rect x="1072.1" y="1219.0" width="1.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1075.1" y="1230.0"></text>
</g>
<g>
<title>[unknown] (38 samples, 2.36%)</title><rect x="1073.6" y="1219.0" width="27.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1076.6" y="1230.0">[..</text>
</g>
<g>
<title>[unknown] (38 samples, 2.36%)</title><rect x="1073.6" y="1203.0" width="27.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1076.6" y="1214.0">[..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (31 samples, 1.92%)</title><rect x="1073.6" y="1187.0" width="22.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1076.6" y="1198.0">J..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.25%)</title><rect x="1074.3" y="1171.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1077.3" y="1182.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.06%)</title><rect x="1077.3" y="1171.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.3" y="1182.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.12%)</title><rect x="1078.0" y="1171.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.0" y="1182.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (2 samples, 0.12%)</title><rect x="1079.5" y="1171.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1082.5" y="1182.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (2 samples, 0.12%)</title><rect x="1080.9" y="1171.0" width="1.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1083.9" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1081.7" y="1155.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1084.7" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1081.7" y="1139.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1084.7" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1081.7" y="1123.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1084.7" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1081.7" y="1107.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1084.7" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1081.7" y="1091.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1084.7" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1081.7" y="1075.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1084.7" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1081.7" y="1059.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1084.7" y="1070.0"></text>
</g>
<g>
<title>_init (2 samples, 0.12%)</title><rect x="1082.4" y="1171.0" width="1.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1085.4" y="1182.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (16 samples, 0.99%)</title><rect x="1083.9" y="1171.0" width="11.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1086.9" y="1182.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.19%)</title><rect x="1086.1" y="1155.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.1" y="1166.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (4 samples, 0.25%)</title><rect x="1088.3" y="1155.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1091.3" y="1166.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (6 samples, 0.37%)</title><rect x="1091.2" y="1155.0" width="4.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1094.2" y="1166.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.06%)</title><rect x="1094.8" y="1139.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1097.8" y="1150.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.06%)</title><rect x="1095.6" y="1171.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.6" y="1182.0"></text>
</g>
<g>
<title>__GI___recv (3 samples, 0.19%)</title><rect x="1096.3" y="1187.0" width="2.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1099.3" y="1198.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.06%)</title><rect x="1098.5" y="1187.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1101.5" y="1198.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.19%)</title><rect x="1099.2" y="1187.0" width="2.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1102.2" y="1198.0"></text>
</g>
<g>
<title>__GI___recv (87 samples, 5.40%)</title><rect x="1101.4" y="1219.0" width="63.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1104.4" y="1230.0">__GI___..</text>
</g>
<g>
<title>[unknown] (86 samples, 5.33%)</title><rect x="1102.2" y="1203.0" width="62.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1105.2" y="1214.0">[unkno..</text>
</g>
<g>
<title>[unknown] (86 samples, 5.33%)</title><rect x="1102.2" y="1187.0" width="62.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1105.2" y="1198.0">[unkno..</text>
</g>
<g>
<title>[unknown] (81 samples, 5.02%)</title><rect x="1105.8" y="1171.0" width="59.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1108.8" y="1182.0">[unkno..</text>
</g>
<g>
<title>[unknown] (81 samples, 5.02%)</title><rect x="1105.8" y="1155.0" width="59.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1108.8" y="1166.0">[unkno..</text>
</g>
<g>
<title>[unknown] (74 samples, 4.59%)</title><rect x="1110.9" y="1139.0" width="54.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1113.9" y="1150.0">[unkn..</text>
</g>
<g>
<title>[unknown] (68 samples, 4.22%)</title><rect x="1115.3" y="1123.0" width="49.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1118.3" y="1134.0">[unkn..</text>
</g>
<g>
<title>[unknown] (57 samples, 3.54%)</title><rect x="1123.4" y="1107.0" width="41.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1126.4" y="1118.0">[un..</text>
</g>
<g>
<title>[unknown] (35 samples, 2.17%)</title><rect x="1139.5" y="1091.0" width="25.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1142.5" y="1102.0">[..</text>
</g>
<g>
<title>[unknown] (24 samples, 1.49%)</title><rect x="1147.5" y="1075.0" width="17.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1150.5" y="1086.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 1.05%)</title><rect x="1152.7" y="1059.0" width="12.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1155.7" y="1070.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.81%)</title><rect x="1155.6" y="1043.0" width="9.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1158.6" y="1054.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.50%)</title><rect x="1159.3" y="1027.0" width="5.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1162.3" y="1038.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.12%)</title><rect x="1163.6" y="1011.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1166.6" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1164.4" y="995.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1167.4" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1164.4" y="979.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1167.4" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1164.4" y="963.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1167.4" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.06%)</title><rect x="1165.1" y="1283.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.1" y="1294.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.06%)</title><rect x="1165.1" y="1267.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1168.1" y="1278.0"></text>
</g>
<g>
<title>start_thread (33 samples, 2.05%)</title><rect x="1165.8" y="1299.0" width="24.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1168.8" y="1310.0">s..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (33 samples, 2.05%)</title><rect x="1165.8" y="1283.0" width="24.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1168.8" y="1294.0">t..</text>
</g>
<g>
<title>Thread::call_run() (33 samples, 2.05%)</title><rect x="1165.8" y="1267.0" width="24.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.8" y="1278.0">T..</text>
</g>
<g>
<title>GangWorker::loop() (17 samples, 1.05%)</title><rect x="1165.8" y="1251.0" width="12.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.8" y="1262.0"></text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (2 samples, 0.12%)</title><rect x="1165.8" y="1235.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.8" y="1246.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (2 samples, 0.12%)</title><rect x="1165.8" y="1219.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.8" y="1230.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.154] (1 samples, 0.06%)</title><rect x="1165.8" y="1203.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.8" y="1214.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.06%)</title><rect x="1166.6" y="1203.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.6" y="1214.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (1 samples, 0.06%)</title><rect x="1167.3" y="1235.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.3" y="1246.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (1 samples, 0.06%)</title><rect x="1167.3" y="1219.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.3" y="1230.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.06%)</title><rect x="1167.3" y="1203.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1170.3" y="1214.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 0.87%)</title><rect x="1168.0" y="1235.0" width="10.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.0" y="1246.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.43%)</title><rect x="1168.0" y="1219.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.0" y="1230.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 0.37%)</title><rect x="1168.0" y="1203.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.0" y="1214.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 0.31%)</title><rect x="1168.8" y="1187.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.8" y="1198.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="1171.7" y="1171.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.7" y="1182.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.06%)</title><rect x="1172.4" y="1203.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1175.4" y="1214.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (6 samples, 0.37%)</title><rect x="1173.2" y="1219.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.2" y="1230.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (6 samples, 0.37%)</title><rect x="1173.2" y="1203.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.2" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (6 samples, 0.37%)</title><rect x="1173.2" y="1187.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.2" y="1198.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (6 samples, 0.37%)</title><rect x="1173.2" y="1171.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.2" y="1182.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.37%)</title><rect x="1173.2" y="1155.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.2" y="1166.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (4 samples, 0.25%)</title><rect x="1173.2" y="1139.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.2" y="1150.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.12%)</title><rect x="1174.6" y="1123.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.6" y="1134.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="1175.4" y="1107.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.4" y="1118.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.123] (2 samples, 0.12%)</title><rect x="1176.1" y="1139.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.1" y="1150.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.06%)</title><rect x="1176.1" y="1123.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.1" y="1134.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.06%)</title><rect x="1176.8" y="1123.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.8" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.06%)</title><rect x="1177.6" y="1219.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.6" y="1230.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.06%)</title><rect x="1177.6" y="1203.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.6" y="1214.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.06%)</title><rect x="1177.6" y="1187.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="1198.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.06%)</title><rect x="1177.6" y="1171.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.6" y="1182.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (1 samples, 0.06%)</title><rect x="1177.6" y="1155.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="1166.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.06%)</title><rect x="1177.6" y="1139.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="1150.0"></text>
</g>
<g>
<title>JavaThread::run() (15 samples, 0.93%)</title><rect x="1178.3" y="1251.0" width="11.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.3" y="1262.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (15 samples, 0.93%)</title><rect x="1178.3" y="1235.0" width="11.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.3" y="1246.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (15 samples, 0.93%)</title><rect x="1178.3" y="1219.0" width="11.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.3" y="1230.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (15 samples, 0.93%)</title><rect x="1178.3" y="1203.0" width="11.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.3" y="1214.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (15 samples, 0.93%)</title><rect x="1178.3" y="1187.0" width="11.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.3" y="1198.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (15 samples, 0.93%)</title><rect x="1178.3" y="1171.0" width="11.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="1182.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (8 samples, 0.50%)</title><rect x="1178.3" y="1155.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="1166.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.06%)</title><rect x="1178.3" y="1139.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.3" y="1150.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.06%)</title><rect x="1178.3" y="1123.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.3" y="1134.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.06%)</title><rect x="1178.3" y="1107.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.3" y="1118.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.12%)</title><rect x="1179.0" y="1139.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.0" y="1150.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.12%)</title><rect x="1179.0" y="1123.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.0" y="1134.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.06%)</title><rect x="1179.8" y="1107.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="1118.0"></text>
</g>
<g>
<title>LoadNNode::ideal_reg() const (1 samples, 0.06%)</title><rect x="1179.8" y="1091.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.8" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (5 samples, 0.31%)</title><rect x="1180.5" y="1139.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.06%)</title><rect x="1180.5" y="1123.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.5" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.06%)</title><rect x="1180.5" y="1107.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.5" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.06%)</title><rect x="1181.2" y="1123.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.06%)</title><rect x="1181.2" y="1107.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.06%)</title><rect x="1181.2" y="1091.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.2" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.82] (1 samples, 0.06%)</title><rect x="1181.9" y="1123.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.9" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.06%)</title><rect x="1182.7" y="1123.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.7" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.06%)</title><rect x="1182.7" y="1107.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.7" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.06%)</title><rect x="1183.4" y="1123.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.4" y="1134.0"></text>
</g>
<g>
<title>Compile::Optimize() (4 samples, 0.25%)</title><rect x="1184.1" y="1155.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="1166.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.06%)</title><rect x="1184.1" y="1139.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.1" y="1150.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.06%)</title><rect x="1184.1" y="1123.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (2 samples, 0.12%)</title><rect x="1184.9" y="1139.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.06%)</title><rect x="1184.9" y="1123.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.9" y="1134.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.06%)</title><rect x="1184.9" y="1107.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.06%)</title><rect x="1185.6" y="1123.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.06%)</title><rect x="1186.3" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.06%)</title><rect x="1186.3" y="1123.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.3" y="1134.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1186.3" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.3" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.136] (1 samples, 0.06%)</title><rect x="1186.3" y="1091.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.3" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1186.3" y="1075.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.3" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1186.3" y="1059.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.3" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1186.3" y="1043.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.3" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1186.3" y="1027.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.3" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1186.3" y="1011.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.3" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1186.3" y="995.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.3" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1186.3" y="979.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.3" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1186.3" y="963.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.3" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1186.3" y="947.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.3" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1186.3" y="931.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.3" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1186.3" y="915.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.3" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1186.3" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.3" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1186.3" y="883.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.3" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1186.3" y="867.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.3" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1186.3" y="851.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.3" y="862.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.129] (1 samples, 0.06%)</title><rect x="1186.3" y="835.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.3" y="846.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="1186.3" y="819.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.3" y="830.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.06%)</title><rect x="1187.1" y="1155.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.1" y="1166.0"></text>
</g>
<g>
<title>PhaseStringOpts::PhaseStringOpts(PhaseGVN*, Unique_Node_List*) (1 samples, 0.06%)</title><rect x="1187.1" y="1139.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.1" y="1150.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.06%)</title><rect x="1187.1" y="1123.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.1" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.12%)</title><rect x="1187.8" y="1155.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.8" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.12%)</title><rect x="1187.8" y="1139.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.8" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.12%)</title><rect x="1187.8" y="1123.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.8" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.12%)</title><rect x="1187.8" y="1107.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.12%)</title><rect x="1187.8" y="1091.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.12%)</title><rect x="1187.8" y="1075.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.8" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1187.8" y="1059.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.8" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1187.8" y="1043.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1187.8" y="1027.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1187.8" y="1011.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1187.8" y="995.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1187.8" y="979.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.8" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1187.8" y="963.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.8" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1187.8" y="947.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1187.8" y="931.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1187.8" y="915.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1187.8" y="899.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1187.8" y="883.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.8" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1187.8" y="867.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.8" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1187.8" y="851.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.8" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1187.8" y="835.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1187.8" y="819.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1187.8" y="803.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1187.8" y="787.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1187.8" y="771.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.8" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1187.8" y="755.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.8" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1187.8" y="739.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1187.8" y="723.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1187.8" y="707.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1187.8" y="691.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1187.8" y="675.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.8" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1187.8" y="659.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.8" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1187.8" y="643.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.8" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1187.8" y="627.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1187.8" y="611.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1187.8" y="595.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1187.8" y="579.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1187.8" y="563.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.8" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1187.8" y="547.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.8" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1187.8" y="531.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1187.8" y="515.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1187.8" y="499.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1187.8" y="483.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1187.8" y="467.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.8" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1187.8" y="451.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.8" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1187.8" y="435.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1187.8" y="419.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1187.8" y="403.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1187.8" y="387.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1187.8" y="371.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1187.8" y="355.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1187.8" y="339.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1187.8" y="323.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1187.8" y="307.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1187.8" y="291.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1187.8" y="275.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.8" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1187.8" y="259.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.8" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1187.8" y="243.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1187.8" y="227.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1187.8" y="211.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1187.8" y="195.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1187.8" y="179.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.8" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1187.8" y="163.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.8" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1187.8" y="147.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1187.8" y="131.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1187.8" y="115.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1187.8" y="99.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.8" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1187.8" y="83.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.8" y="94.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.06%)</title><rect x="1187.8" y="67.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.8" y="78.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.06%)</title><rect x="1187.8" y="51.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.8" y="62.0"></text>
</g>
<g>
<title>TypeTuple::fields(unsigned int) (1 samples, 0.06%)</title><rect x="1187.8" y="35.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.8" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1188.5" y="1059.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.5" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1188.5" y="1043.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.5" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1188.5" y="1027.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1188.5" y="1011.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1188.5" y="995.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1188.5" y="979.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1188.5" y="963.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.5" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1188.5" y="947.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.5" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1188.5" y="931.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1188.5" y="915.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1188.5" y="899.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1188.5" y="883.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1188.5" y="867.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.5" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1188.5" y="851.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.5" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1188.5" y="835.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1188.5" y="819.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1188.5" y="803.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1188.5" y="787.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1188.5" y="771.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.5" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1188.5" y="755.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.5" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1188.5" y="739.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1188.5" y="723.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1188.5" y="707.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1188.5" y="691.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1188.5" y="675.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.5" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1188.5" y="659.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.5" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1188.5" y="643.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.5" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1188.5" y="627.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1188.5" y="611.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1188.5" y="595.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1188.5" y="579.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1188.5" y="563.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.5" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1188.5" y="547.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.5" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1188.5" y="531.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1188.5" y="515.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1188.5" y="499.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1188.5" y="483.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1188.5" y="467.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.5" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1188.5" y="451.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.5" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1188.5" y="435.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1188.5" y="419.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1188.5" y="403.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1188.5" y="387.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1188.5" y="371.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.5" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1188.5" y="355.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.5" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1188.5" y="339.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1188.5" y="323.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1188.5" y="307.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1188.5" y="291.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.06%)</title><rect x="1188.5" y="275.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.06%)</title><rect x="1188.5" y="259.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.5" y="270.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.06%)</title><rect x="1188.5" y="243.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.5" y="254.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.06%)</title><rect x="1188.5" y="227.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.5" y="238.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.06%)</title><rect x="1188.5" y="211.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.5" y="222.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.06%)</title><rect x="1188.5" y="195.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.5" y="206.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 0.06%)</title><rect x="1188.5" y="179.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.5" y="190.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.06%)</title><rect x="1189.3" y="1251.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.3" y="1262.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.06%)</title><rect x="1189.3" y="1235.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.3" y="1246.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.06%)</title><rect x="1189.3" y="1219.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.3" y="1230.0"></text>
</g>
</g>
</svg>
