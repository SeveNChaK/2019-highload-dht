<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1574" onload="init(evt)" viewBox="0 0 1200 1574" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1557"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1557"> </text>
<g id="frames">
<g>
<title>all (2,572 samples, 100.00%)</title><rect x="10.0" y="1523.0" width="1180.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="13.0" y="1534.0">all</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.04%)</title><rect x="10.0" y="1507.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="10.5" y="1507.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.5" y="1518.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.19%)</title><rect x="10.9" y="1507.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.9" y="1518.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.08%)</title><rect x="11.4" y="1491.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.4" y="1502.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.08%)</title><rect x="11.4" y="1475.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.4" y="1486.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.08%)</title><rect x="11.4" y="1459.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.4" y="1470.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="11.4" y="1443.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.4" y="1454.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.04%)</title><rect x="11.4" y="1427.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.4" y="1438.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.04%)</title><rect x="11.8" y="1443.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.8" y="1454.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.08%)</title><rect x="12.3" y="1491.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.3" y="1502.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.08%)</title><rect x="12.3" y="1475.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.3" y="1486.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="12.3" y="1459.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.3" y="1470.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="12.3" y="1443.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.3" y="1454.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="12.3" y="1427.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.3" y="1438.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.04%)</title><rect x="12.3" y="1411.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="15.3" y="1422.0"></text>
</g>
<g>
<title>VM_CollectForAllocation::VM_CollectForAllocation(unsigned long, unsigned int, GCCause::Cause) (1 samples, 0.04%)</title><rect x="12.3" y="1395.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.3" y="1406.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.04%)</title><rect x="12.8" y="1459.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="15.8" y="1470.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.16%)</title><rect x="13.2" y="1507.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="16.2" y="1518.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.16%)</title><rect x="13.2" y="1491.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="16.2" y="1502.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.12%)</title><rect x="13.7" y="1475.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="16.7" y="1486.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.12%)</title><rect x="13.7" y="1459.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.7" y="1470.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.04%)</title><rect x="13.7" y="1443.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="16.7" y="1454.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.04%)</title><rect x="13.7" y="1427.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="16.7" y="1438.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.08%)</title><rect x="14.1" y="1443.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="17.1" y="1454.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.04%)</title><rect x="14.6" y="1427.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="17.6" y="1438.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (28 samples, 1.09%)</title><rect x="15.0" y="1507.0" width="12.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="18.0" y="1518.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (24 samples, 0.93%)</title><rect x="16.9" y="1491.0" width="11.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="19.9" y="1502.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (24 samples, 0.93%)</title><rect x="16.9" y="1475.0" width="11.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="19.9" y="1486.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (20 samples, 0.78%)</title><rect x="16.9" y="1459.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="19.9" y="1470.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (3 samples, 0.12%)</title><rect x="16.9" y="1443.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="19.9" y="1454.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (2 samples, 0.08%)</title><rect x="17.3" y="1427.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="20.3" y="1438.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.08%)</title><rect x="18.3" y="1443.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="21.3" y="1454.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.04%)</title><rect x="19.2" y="1443.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="22.2" y="1454.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (12 samples, 0.47%)</title><rect x="19.6" y="1443.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="22.6" y="1454.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.04%)</title><rect x="20.1" y="1427.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="23.1" y="1438.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (2 samples, 0.08%)</title><rect x="20.6" y="1427.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="23.6" y="1438.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (3 samples, 0.12%)</title><rect x="21.5" y="1427.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="24.5" y="1438.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.08%)</title><rect x="21.5" y="1411.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="24.5" y="1422.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (2 samples, 0.08%)</title><rect x="21.5" y="1395.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="24.5" y="1406.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.04%)</title><rect x="21.5" y="1379.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="24.5" y="1390.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.04%)</title><rect x="21.5" y="1363.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="24.5" y="1374.0"></text>
</g>
<g>
<title>G1SurvivorRegions::length() const (1 samples, 0.04%)</title><rect x="21.9" y="1379.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="24.9" y="1390.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.04%)</title><rect x="22.4" y="1411.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="25.4" y="1422.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (4 samples, 0.16%)</title><rect x="22.8" y="1427.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="25.8" y="1438.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (2 samples, 0.08%)</title><rect x="22.8" y="1411.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="25.8" y="1422.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.08%)</title><rect x="22.8" y="1395.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="25.8" y="1406.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.04%)</title><rect x="23.8" y="1411.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="26.8" y="1422.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.04%)</title><rect x="24.2" y="1411.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="27.2" y="1422.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.04%)</title><rect x="24.7" y="1427.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="27.7" y="1438.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.04%)</title><rect x="25.1" y="1443.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="28.1" y="1454.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.04%)</title><rect x="25.6" y="1443.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="28.6" y="1454.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.08%)</title><rect x="26.1" y="1459.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="29.1" y="1470.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.08%)</title><rect x="27.0" y="1459.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="30.0" y="1470.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.31%)</title><rect x="27.9" y="1507.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="30.9" y="1518.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (8 samples, 0.31%)</title><rect x="27.9" y="1491.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="30.9" y="1502.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.08%)</title><rect x="27.9" y="1475.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="30.9" y="1486.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.04%)</title><rect x="27.9" y="1459.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="30.9" y="1470.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="28.4" y="1459.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="31.4" y="1470.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.96] (6 samples, 0.23%)</title><rect x="28.8" y="1475.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="31.8" y="1486.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.04%)</title><rect x="29.3" y="1459.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="32.3" y="1470.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (4 samples, 0.16%)</title><rect x="29.7" y="1459.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="32.7" y="1470.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="29.7" y="1443.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="32.7" y="1454.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.04%)</title><rect x="30.2" y="1443.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="33.2" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="30.2" y="1427.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="33.2" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="30.2" y="1411.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="33.2" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="30.2" y="1395.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="33.2" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="30.2" y="1379.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="33.2" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="30.2" y="1363.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="33.2" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="30.2" y="1347.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="33.2" y="1358.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.04%)</title><rect x="30.6" y="1443.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="33.6" y="1454.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.04%)</title><rect x="31.1" y="1443.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="34.1" y="1454.0"></text>
</g>
<g>
<title>[not_walkable] (1 samples, 0.04%)</title><rect x="31.6" y="1507.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="34.6" y="1518.0"></text>
</g>
<g>
<title>[not_walkable_Java] (13 samples, 0.51%)</title><rect x="32.0" y="1507.0" width="6.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="35.0" y="1518.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (4 samples, 0.16%)</title><rect x="33.4" y="1491.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="36.4" y="1502.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="34.8" y="1475.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="37.8" y="1486.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="34.8" y="1459.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="37.8" y="1470.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="34.8" y="1443.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="37.8" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="34.8" y="1427.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="37.8" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="34.8" y="1411.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="37.8" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="34.8" y="1395.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="37.8" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="34.8" y="1379.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="37.8" y="1390.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="35.2" y="1491.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="38.2" y="1502.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (1 samples, 0.04%)</title><rect x="35.2" y="1475.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="38.2" y="1486.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.16%)</title><rect x="35.7" y="1491.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="38.7" y="1502.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.04%)</title><rect x="35.7" y="1475.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="38.7" y="1486.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.12%)</title><rect x="36.2" y="1475.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="39.2" y="1486.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (3 samples, 0.12%)</title><rect x="36.2" y="1459.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="39.2" y="1470.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.12%)</title><rect x="36.2" y="1443.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="39.2" y="1454.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.04%)</title><rect x="37.5" y="1491.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="40.5" y="1502.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="38.0" y="1507.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="41.0" y="1518.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.1 (1 samples, 0.04%)</title><rect x="38.0" y="1491.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="41.0" y="1502.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="38.0" y="1475.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="41.0" y="1486.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="38.0" y="1459.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="41.0" y="1470.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="38.0" y="1443.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="41.0" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="38.0" y="1427.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="41.0" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="38.0" y="1411.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="41.0" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="38.0" y="1395.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="41.0" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="38.0" y="1379.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="41.0" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="38.0" y="1363.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="41.0" y="1374.0"></text>
</g>
<g>
<title>[unknown_Java] (32 samples, 1.24%)</title><rect x="38.4" y="1507.0" width="14.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="41.4" y="1518.0"></text>
</g>
<g>
<title>G1BarrierSetRuntime::write_ref_array_post_entry(HeapWord*, unsigned long) (1 samples, 0.04%)</title><rect x="51.7" y="1491.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="54.7" y="1502.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="52.2" y="1491.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="55.2" y="1502.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="52.2" y="1475.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="55.2" y="1486.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="52.2" y="1459.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="55.2" y="1470.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="52.2" y="1443.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="55.2" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="52.2" y="1427.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="55.2" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="52.2" y="1411.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="55.2" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="52.2" y="1395.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="55.2" y="1406.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.04%)</title><rect x="52.7" y="1491.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="55.7" y="1502.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="52.7" y="1475.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="55.7" y="1486.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="52.7" y="1459.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="55.7" y="1470.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="52.7" y="1443.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="55.7" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="52.7" y="1427.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="55.7" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="52.7" y="1411.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="55.7" y="1422.0"></text>
</g>
<g>
<title>__GI__IO_default_xsputn (1 samples, 0.04%)</title><rect x="53.1" y="1507.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="56.1" y="1518.0"></text>
</g>
<g>
<title>_int_malloc (3 samples, 0.12%)</title><rect x="53.6" y="1507.0" width="1.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="56.6" y="1518.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,730 samples, 67.26%)</title><rect x="55.0" y="1507.0" width="793.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="58.0" y="1518.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,730 samples, 67.26%)</title><rect x="55.0" y="1491.0" width="793.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="58.0" y="1502.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,730 samples, 67.26%)</title><rect x="55.0" y="1475.0" width="793.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.0" y="1486.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (8 samples, 0.31%)</title><rect x="55.9" y="1459.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="58.9" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.31%)</title><rect x="55.9" y="1443.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="58.9" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.31%)</title><rect x="55.9" y="1427.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="58.9" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.08%)</title><rect x="58.6" y="1411.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="61.6" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (289 samples, 11.24%)</title><rect x="59.5" y="1459.0" width="132.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="62.5" y="1470.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (289 samples, 11.24%)</title><rect x="59.5" y="1443.0" width="132.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.5" y="1454.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (181 samples, 7.04%)</title><rect x="60.0" y="1427.0" width="83.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="63.0" y="1438.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.16%)</title><rect x="60.9" y="1411.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.9" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="61.8" y="1395.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="64.8" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="61.8" y="1379.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="64.8" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="61.8" y="1363.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="64.8" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.04%)</title><rect x="62.3" y="1395.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="65.3" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.04%)</title><rect x="62.3" y="1379.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.3" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.04%)</title><rect x="62.3" y="1363.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="65.3" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="62.3" y="1347.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="65.3" y="1358.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.04%)</title><rect x="62.3" y="1331.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="65.3" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="62.3" y="1315.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="65.3" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="62.3" y="1299.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="65.3" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="62.3" y="1283.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="65.3" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="62.3" y="1267.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="65.3" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="62.3" y="1251.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="65.3" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="62.3" y="1235.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="65.3" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="62.3" y="1219.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="65.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (14 samples, 0.54%)</title><rect x="62.8" y="1411.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="65.8" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 0.54%)</title><rect x="62.8" y="1395.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="65.8" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 0.54%)</title><rect x="62.8" y="1379.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="65.8" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 0.54%)</title><rect x="62.8" y="1363.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.8" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (14 samples, 0.54%)</title><rect x="62.8" y="1347.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="65.8" y="1358.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.04%)</title><rect x="62.8" y="1331.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="65.8" y="1342.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.04%)</title><rect x="62.8" y="1315.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="65.8" y="1326.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (13 samples, 0.51%)</title><rect x="63.2" y="1331.0" width="6.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="66.2" y="1342.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.51%)</title><rect x="63.2" y="1315.0" width="6.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="66.2" y="1326.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.51%)</title><rect x="63.2" y="1299.0" width="6.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="66.2" y="1310.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.51%)</title><rect x="63.2" y="1283.0" width="6.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="66.2" y="1294.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.47%)</title><rect x="63.7" y="1267.0" width="5.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="66.7" y="1278.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.47%)</title><rect x="63.7" y="1251.0" width="5.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="66.7" y="1262.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.43%)</title><rect x="64.1" y="1235.0" width="5.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="67.1" y="1246.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.39%)</title><rect x="64.6" y="1219.0" width="4.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="67.6" y="1230.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.39%)</title><rect x="64.6" y="1203.0" width="4.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="67.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (3 samples, 0.12%)</title><rect x="69.2" y="1411.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="72.2" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (3 samples, 0.12%)</title><rect x="69.2" y="1395.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="72.2" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (158 samples, 6.14%)</title><rect x="70.6" y="1411.0" width="72.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="73.6" y="1422.0">java/uti..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (158 samples, 6.14%)</title><rect x="70.6" y="1395.0" width="72.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="73.6" y="1406.0">jdk/inte..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="74.7" y="1379.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="77.7" y="1390.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.08%)</title><rect x="75.1" y="1379.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="78.1" y="1390.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="76.1" y="1379.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="79.1" y="1390.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (2 samples, 0.08%)</title><rect x="76.5" y="1379.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="79.5" y="1390.0"></text>
</g>
<g>
<title>Unsafe_Park (62 samples, 2.41%)</title><rect x="77.4" y="1379.0" width="28.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="80.4" y="1390.0">Un..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.08%)</title><rect x="80.2" y="1363.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="83.2" y="1374.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.08%)</title><rect x="81.1" y="1363.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="84.1" y="1374.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.04%)</title><rect x="82.0" y="1363.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="85.0" y="1374.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (19 samples, 0.74%)</title><rect x="82.5" y="1363.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="85.5" y="1374.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.12%)</title><rect x="87.5" y="1347.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="90.5" y="1358.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.16%)</title><rect x="88.9" y="1347.0" width="1.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="91.9" y="1358.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="90.7" y="1347.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="93.7" y="1358.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (2 samples, 0.08%)</title><rect x="91.2" y="1363.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="94.2" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="92.1" y="1363.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="95.1" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="92.1" y="1347.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="95.1" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="92.1" y="1331.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="95.1" y="1342.0"></text>
</g>
<g>
<title>__lll_unlock_wake (13 samples, 0.51%)</title><rect x="92.6" y="1363.0" width="5.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="95.6" y="1374.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.51%)</title><rect x="92.6" y="1347.0" width="5.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="95.6" y="1358.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.51%)</title><rect x="92.6" y="1331.0" width="5.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="95.6" y="1342.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.43%)</title><rect x="93.5" y="1315.0" width="5.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="96.5" y="1326.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.35%)</title><rect x="94.4" y="1299.0" width="4.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="97.4" y="1310.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.31%)</title><rect x="94.9" y="1283.0" width="3.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="97.9" y="1294.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="97.6" y="1267.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="100.6" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="98.1" y="1251.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="101.1" y="1262.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.04%)</title><rect x="98.5" y="1363.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="101.5" y="1374.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.04%)</title><rect x="99.0" y="1363.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="102.0" y="1374.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.12%)</title><rect x="99.5" y="1363.0" width="1.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="102.5" y="1374.0"></text>
</g>
<g>
<title>_init (3 samples, 0.12%)</title><rect x="100.8" y="1363.0" width="1.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="103.8" y="1374.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.04%)</title><rect x="102.2" y="1363.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="105.2" y="1374.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.08%)</title><rect x="102.7" y="1363.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="105.7" y="1374.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (5 samples, 0.19%)</title><rect x="103.6" y="1363.0" width="2.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="106.6" y="1374.0"></text>
</g>
<g>
<title>[unknown] (81 samples, 3.15%)</title><rect x="105.9" y="1379.0" width="37.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="108.9" y="1390.0">[un..</text>
</g>
<g>
<title>__pthread_cleanup_push (2 samples, 0.08%)</title><rect x="105.9" y="1363.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="108.9" y="1374.0"></text>
</g>
<g>
<title>__pthread_cond_wait (75 samples, 2.92%)</title><rect x="106.8" y="1363.0" width="34.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="109.8" y="1374.0">__..</text>
</g>
<g>
<title>[unknown] (62 samples, 2.41%)</title><rect x="112.8" y="1347.0" width="28.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="115.8" y="1358.0">[u..</text>
</g>
<g>
<title>[unknown] (62 samples, 2.41%)</title><rect x="112.8" y="1331.0" width="28.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="115.8" y="1342.0">[u..</text>
</g>
<g>
<title>[unknown] (60 samples, 2.33%)</title><rect x="113.7" y="1315.0" width="27.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="116.7" y="1326.0">[..</text>
</g>
<g>
<title>[unknown] (59 samples, 2.29%)</title><rect x="114.1" y="1299.0" width="27.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="117.1" y="1310.0">[..</text>
</g>
<g>
<title>[unknown] (55 samples, 2.14%)</title><rect x="116.0" y="1283.0" width="25.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="119.0" y="1294.0">[..</text>
</g>
<g>
<title>[unknown] (47 samples, 1.83%)</title><rect x="119.7" y="1267.0" width="21.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="122.7" y="1278.0">[..</text>
</g>
<g>
<title>[unknown] (37 samples, 1.44%)</title><rect x="124.2" y="1251.0" width="17.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="127.2" y="1262.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 1.13%)</title><rect x="127.9" y="1235.0" width="13.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="130.9" y="1246.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 1.05%)</title><rect x="128.8" y="1219.0" width="12.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="131.8" y="1230.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.04%)</title><rect x="141.2" y="1363.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="144.2" y="1374.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.04%)</title><rect x="141.7" y="1363.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="144.7" y="1374.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.08%)</title><rect x="142.1" y="1363.0" width="0.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="145.1" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (39 samples, 1.52%)</title><rect x="143.0" y="1427.0" width="17.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="146.0" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (39 samples, 1.52%)</title><rect x="143.0" y="1411.0" width="17.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.0" y="1422.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.08%)</title><rect x="144.0" y="1395.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="147.0" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.08%)</title><rect x="144.0" y="1379.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="147.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (34 samples, 1.32%)</title><rect x="144.9" y="1395.0" width="15.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="147.9" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="148.1" y="1379.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="151.1" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="148.1" y="1363.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="151.1" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="148.1" y="1347.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="151.1" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.predecessor (1 samples, 0.04%)</title><rect x="148.6" y="1379.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="151.6" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (8 samples, 0.31%)</title><rect x="149.0" y="1379.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="152.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 0.31%)</title><rect x="149.0" y="1363.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="152.0" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (5 samples, 0.19%)</title><rect x="149.0" y="1347.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="152.0" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.04%)</title><rect x="150.8" y="1331.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="153.8" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.12%)</title><rect x="151.3" y="1347.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="154.3" y="1358.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (1 samples, 0.04%)</title><rect x="151.3" y="1331.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="154.3" y="1342.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.04%)</title><rect x="151.8" y="1331.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="154.8" y="1342.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.04%)</title><rect x="151.8" y="1315.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="154.8" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="151.8" y="1299.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="154.8" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="151.8" y="1283.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="154.8" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="151.8" y="1267.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="154.8" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="151.8" y="1251.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="154.8" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="152.2" y="1331.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="155.2" y="1342.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.04%)</title><rect x="152.2" y="1315.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="155.2" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="152.2" y="1299.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="155.2" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="152.2" y="1283.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="155.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (5 samples, 0.19%)</title><rect x="152.7" y="1379.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="155.7" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="154.5" y="1363.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="157.5" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="154.5" y="1347.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="157.5" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="154.5" y="1331.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="157.5" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="154.5" y="1315.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="157.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (12 samples, 0.47%)</title><rect x="155.0" y="1379.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="158.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (12 samples, 0.47%)</title><rect x="155.0" y="1363.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="158.0" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.04%)</title><rect x="155.0" y="1347.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="158.0" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (11 samples, 0.43%)</title><rect x="155.4" y="1347.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="158.4" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (11 samples, 0.43%)</title><rect x="155.4" y="1331.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="158.4" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (2 samples, 0.08%)</title><rect x="155.4" y="1315.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="158.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (9 samples, 0.35%)</title><rect x="156.4" y="1315.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="159.4" y="1326.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (9 samples, 0.35%)</title><rect x="156.4" y="1299.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.4" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.04%)</title><rect x="160.5" y="1395.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="163.5" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.04%)</title><rect x="160.5" y="1379.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.5" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.04%)</title><rect x="160.5" y="1363.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="163.5" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (68 samples, 2.64%)</title><rect x="160.9" y="1427.0" width="31.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="163.9" y="1438.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (68 samples, 2.64%)</title><rect x="160.9" y="1411.0" width="31.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="163.9" y="1422.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (68 samples, 2.64%)</title><rect x="160.9" y="1395.0" width="31.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="163.9" y="1406.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (68 samples, 2.64%)</title><rect x="160.9" y="1379.0" width="31.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="163.9" y="1390.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (68 samples, 2.64%)</title><rect x="160.9" y="1363.0" width="31.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="163.9" y="1374.0">jd..</text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.04%)</title><rect x="160.9" y="1347.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="163.9" y="1358.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.04%)</title><rect x="161.4" y="1347.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="164.4" y="1358.0"></text>
</g>
<g>
<title>Unsafe_Unpark (11 samples, 0.43%)</title><rect x="161.9" y="1347.0" width="5.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="164.9" y="1358.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.08%)</title><rect x="162.8" y="1331.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="165.8" y="1342.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.04%)</title><rect x="163.7" y="1331.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="166.7" y="1342.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.04%)</title><rect x="164.2" y="1331.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="167.2" y="1342.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.04%)</title><rect x="164.6" y="1331.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="167.6" y="1342.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (4 samples, 0.16%)</title><rect x="165.1" y="1331.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="168.1" y="1342.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (55 samples, 2.14%)</title><rect x="166.9" y="1347.0" width="25.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="169.9" y="1358.0">p..</text>
</g>
<g>
<title>[unknown] (52 samples, 2.02%)</title><rect x="168.3" y="1331.0" width="23.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="171.3" y="1342.0">[..</text>
</g>
<g>
<title>[unknown] (52 samples, 2.02%)</title><rect x="168.3" y="1315.0" width="23.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="171.3" y="1326.0">[..</text>
</g>
<g>
<title>[unknown] (49 samples, 1.91%)</title><rect x="169.7" y="1299.0" width="22.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="172.7" y="1310.0">[..</text>
</g>
<g>
<title>[unknown] (49 samples, 1.91%)</title><rect x="169.7" y="1283.0" width="22.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="172.7" y="1294.0">[..</text>
</g>
<g>
<title>[unknown] (48 samples, 1.87%)</title><rect x="170.1" y="1267.0" width="22.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="173.1" y="1278.0">[..</text>
</g>
<g>
<title>[unknown] (42 samples, 1.63%)</title><rect x="172.9" y="1251.0" width="19.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="175.9" y="1262.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 1.59%)</title><rect x="173.3" y="1235.0" width="18.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="176.3" y="1246.0"></text>
</g>
<g>
<title>[unknown] (38 samples, 1.48%)</title><rect x="174.7" y="1219.0" width="17.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="177.7" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="191.7" y="1203.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="194.7" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="191.7" y="1187.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="194.7" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="191.7" y="1171.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="194.7" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="191.7" y="1155.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="194.7" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="191.7" y="1139.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="194.7" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="191.7" y="1123.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="194.7" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="191.7" y="1107.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="194.7" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl$$Lambda$65/80866200.run (1,431 samples, 55.64%)</title><rect x="192.1" y="1459.0" width="656.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="195.1" y="1470.0">ru/mail/polis/service/alex/AsyncServiceImpl$$Lambda$65/80866200.run</text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.lambda$executeAsync$3 (1,431 samples, 55.64%)</title><rect x="192.1" y="1443.0" width="656.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="195.1" y="1454.0">ru/mail/polis/service/alex/AsyncServiceImpl.lambda$executeAsync$3</text>
</g>
<g>
<title>itable stub (8 samples, 0.31%)</title><rect x="192.1" y="1427.0" width="3.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="195.1" y="1438.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (636 samples, 24.73%)</title><rect x="195.8" y="1427.0" width="291.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="198.8" y="1438.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.12%)</title><rect x="199.9" y="1411.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.9" y="1422.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.12%)</title><rect x="199.9" y="1395.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="202.9" y="1406.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.12%)</title><rect x="199.9" y="1379.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="202.9" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="199.9" y="1363.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="202.9" y="1374.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.04%)</title><rect x="199.9" y="1347.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="202.9" y="1358.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="200.4" y="1363.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="203.4" y="1374.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.04%)</title><rect x="200.9" y="1363.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="203.9" y="1374.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="200.9" y="1347.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="203.9" y="1358.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.04%)</title><rect x="200.9" y="1331.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="203.9" y="1342.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (619 samples, 24.07%)</title><rect x="201.3" y="1411.0" width="284.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.3" y="1422.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (19 samples, 0.74%)</title><rect x="202.2" y="1395.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.2" y="1406.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (12 samples, 0.47%)</title><rect x="205.4" y="1379.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="208.4" y="1390.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (12 samples, 0.47%)</title><rect x="205.4" y="1363.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="208.4" y="1374.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (12 samples, 0.47%)</title><rect x="205.4" y="1347.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.4" y="1358.0"></text>
</g>
<g>
<title>java/lang/String.charAt (12 samples, 0.47%)</title><rect x="205.4" y="1331.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.4" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="209.6" y="1315.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="212.6" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="209.6" y="1299.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="212.6" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="209.6" y="1283.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="212.6" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="209.6" y="1267.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="212.6" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="209.6" y="1251.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="212.6" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="209.6" y="1235.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="212.6" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="209.6" y="1219.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="212.6" y="1230.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.08%)</title><rect x="210.0" y="1315.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="213.0" y="1326.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (598 samples, 23.25%)</title><rect x="210.9" y="1395.0" width="274.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.9" y="1406.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (598 samples, 23.25%)</title><rect x="210.9" y="1379.0" width="274.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.9" y="1390.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.04%)</title><rect x="213.2" y="1363.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.2" y="1374.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (592 samples, 23.02%)</title><rect x="213.7" y="1363.0" width="271.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.7" y="1374.0">one/nio/net/Session$ArrayQueueItem.w..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (591 samples, 22.98%)</title><rect x="214.2" y="1347.0" width="271.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="217.2" y="1358.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.04%)</title><rect x="216.9" y="1331.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="219.9" y="1342.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 1.32%)</title><rect x="217.4" y="1331.0" width="15.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="220.4" y="1342.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 1.32%)</title><rect x="217.4" y="1315.0" width="15.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="220.4" y="1326.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (29 samples, 1.13%)</title><rect x="217.4" y="1299.0" width="13.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="220.4" y="1310.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.12%)</title><rect x="219.2" y="1283.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="222.2" y="1294.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (3 samples, 0.12%)</title><rect x="220.6" y="1283.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="223.6" y="1294.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (4 samples, 0.16%)</title><rect x="222.0" y="1283.0" width="1.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="225.0" y="1294.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.04%)</title><rect x="223.8" y="1283.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="226.8" y="1294.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (11 samples, 0.43%)</title><rect x="224.3" y="1283.0" width="5.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="227.3" y="1294.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.08%)</title><rect x="224.3" y="1267.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="227.3" y="1278.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="225.2" y="1267.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="228.2" y="1278.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (3 samples, 0.12%)</title><rect x="225.6" y="1267.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="228.6" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="226.5" y="1251.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="229.5" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="226.5" y="1235.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="229.5" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="226.5" y="1219.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="229.5" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="226.5" y="1203.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="229.5" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="226.5" y="1187.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="229.5" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="226.5" y="1171.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="229.5" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="226.5" y="1155.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="229.5" y="1166.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.19%)</title><rect x="227.0" y="1267.0" width="2.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="230.0" y="1278.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (5 samples, 0.19%)</title><rect x="227.0" y="1251.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="230.0" y="1262.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.04%)</title><rect x="229.3" y="1283.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="232.3" y="1294.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.08%)</title><rect x="229.8" y="1283.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="232.8" y="1294.0"></text>
</g>
<g>
<title>__send (3 samples, 0.12%)</title><rect x="230.7" y="1299.0" width="1.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="233.7" y="1310.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="232.1" y="1299.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="235.1" y="1310.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.04%)</title><rect x="232.5" y="1299.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="235.5" y="1310.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.08%)</title><rect x="233.0" y="1331.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="236.0" y="1342.0"></text>
</g>
<g>
<title>__send (548 samples, 21.31%)</title><rect x="233.9" y="1331.0" width="251.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="236.9" y="1342.0">__send</text>
</g>
<g>
<title>[unknown] (543 samples, 21.11%)</title><rect x="236.2" y="1315.0" width="249.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="239.2" y="1326.0">[unknown]</text>
</g>
<g>
<title>[unknown] (543 samples, 21.11%)</title><rect x="236.2" y="1299.0" width="249.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="239.2" y="1310.0">[unknown]</text>
</g>
<g>
<title>[unknown] (536 samples, 20.84%)</title><rect x="239.4" y="1283.0" width="245.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="242.4" y="1294.0">[unknown]</text>
</g>
<g>
<title>[unknown] (535 samples, 20.80%)</title><rect x="239.9" y="1267.0" width="245.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="242.9" y="1278.0">[unknown]</text>
</g>
<g>
<title>[unknown] (526 samples, 20.45%)</title><rect x="244.0" y="1251.0" width="241.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="247.0" y="1262.0">[unknown]</text>
</g>
<g>
<title>[unknown] (523 samples, 20.33%)</title><rect x="245.4" y="1235.0" width="239.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="248.4" y="1246.0">[unknown]</text>
</g>
<g>
<title>[unknown] (518 samples, 20.14%)</title><rect x="247.7" y="1219.0" width="237.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="250.7" y="1230.0">[unknown]</text>
</g>
<g>
<title>[unknown] (515 samples, 20.02%)</title><rect x="249.0" y="1203.0" width="236.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="252.0" y="1214.0">[unknown]</text>
</g>
<g>
<title>[unknown] (495 samples, 19.25%)</title><rect x="258.2" y="1187.0" width="227.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="261.2" y="1198.0">[unknown]</text>
</g>
<g>
<title>[unknown] (474 samples, 18.43%)</title><rect x="267.8" y="1171.0" width="217.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="270.8" y="1182.0">[unknown]</text>
</g>
<g>
<title>[unknown] (454 samples, 17.65%)</title><rect x="277.0" y="1155.0" width="208.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="280.0" y="1166.0">[unknown]</text>
</g>
<g>
<title>[unknown] (432 samples, 16.80%)</title><rect x="287.1" y="1139.0" width="198.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="290.1" y="1150.0">[unknown]</text>
</g>
<g>
<title>[unknown] (408 samples, 15.86%)</title><rect x="298.1" y="1123.0" width="187.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="301.1" y="1134.0">[unknown]</text>
</g>
<g>
<title>[unknown] (396 samples, 15.40%)</title><rect x="303.6" y="1107.0" width="181.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="306.6" y="1118.0">[unknown]</text>
</g>
<g>
<title>[unknown] (388 samples, 15.09%)</title><rect x="307.3" y="1091.0" width="178.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="310.3" y="1102.0">[unknown]</text>
</g>
<g>
<title>[unknown] (382 samples, 14.85%)</title><rect x="310.0" y="1075.0" width="175.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="313.0" y="1086.0">[unknown]</text>
</g>
<g>
<title>[unknown] (377 samples, 14.66%)</title><rect x="312.3" y="1059.0" width="173.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="315.3" y="1070.0">[unknown]</text>
</g>
<g>
<title>[unknown] (364 samples, 14.15%)</title><rect x="318.3" y="1043.0" width="167.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="321.3" y="1054.0">[unknown]</text>
</g>
<g>
<title>[unknown] (350 samples, 13.61%)</title><rect x="324.7" y="1027.0" width="160.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="327.7" y="1038.0">[unknown]</text>
</g>
<g>
<title>[unknown] (332 samples, 12.91%)</title><rect x="333.0" y="1011.0" width="152.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="336.0" y="1022.0">[unknown]</text>
</g>
<g>
<title>[unknown] (298 samples, 11.59%)</title><rect x="348.6" y="995.0" width="136.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="351.6" y="1006.0">[unknown]</text>
</g>
<g>
<title>[unknown] (282 samples, 10.96%)</title><rect x="355.9" y="979.0" width="129.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="358.9" y="990.0">[unknown]</text>
</g>
<g>
<title>[unknown] (260 samples, 10.11%)</title><rect x="366.0" y="963.0" width="119.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="369.0" y="974.0">[unknown]</text>
</g>
<g>
<title>[unknown] (246 samples, 9.56%)</title><rect x="372.4" y="947.0" width="112.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="375.4" y="958.0">[unknown]</text>
</g>
<g>
<title>[unknown] (241 samples, 9.37%)</title><rect x="374.7" y="931.0" width="110.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="377.7" y="942.0">[unknown]</text>
</g>
<g>
<title>[unknown] (237 samples, 9.21%)</title><rect x="376.6" y="915.0" width="108.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="379.6" y="926.0">[unknown]</text>
</g>
<g>
<title>[unknown] (234 samples, 9.10%)</title><rect x="377.9" y="899.0" width="107.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="380.9" y="910.0">[unknown]</text>
</g>
<g>
<title>[unknown] (227 samples, 8.83%)</title><rect x="381.2" y="883.0" width="104.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="384.2" y="894.0">[unknown]</text>
</g>
<g>
<title>[unknown] (223 samples, 8.67%)</title><rect x="383.0" y="867.0" width="102.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="386.0" y="878.0">[unknown]</text>
</g>
<g>
<title>[unknown] (217 samples, 8.44%)</title><rect x="385.7" y="851.0" width="99.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="388.7" y="862.0">[unknown]</text>
</g>
<g>
<title>[unknown] (215 samples, 8.36%)</title><rect x="386.7" y="835.0" width="98.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="389.7" y="846.0">[unknown]</text>
</g>
<g>
<title>[unknown] (206 samples, 8.01%)</title><rect x="390.8" y="819.0" width="94.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="393.8" y="830.0">[unknown]</text>
</g>
<g>
<title>[unknown] (193 samples, 7.50%)</title><rect x="396.8" y="803.0" width="88.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="399.8" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (178 samples, 6.92%)</title><rect x="403.6" y="787.0" width="81.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="406.6" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (170 samples, 6.61%)</title><rect x="407.3" y="771.0" width="78.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="410.3" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (142 samples, 5.52%)</title><rect x="420.2" y="755.0" width="65.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="423.2" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (117 samples, 4.55%)</title><rect x="431.6" y="739.0" width="53.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="434.6" y="750.0">[unkn..</text>
</g>
<g>
<title>[unknown] (112 samples, 4.35%)</title><rect x="433.9" y="723.0" width="51.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="436.9" y="734.0">[unkn..</text>
</g>
<g>
<title>[unknown] (102 samples, 3.97%)</title><rect x="438.5" y="707.0" width="46.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="441.5" y="718.0">[unk..</text>
</g>
<g>
<title>[unknown] (6 samples, 0.23%)</title><rect x="482.6" y="691.0" width="2.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="485.6" y="702.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.16%)</title><rect x="483.5" y="675.0" width="1.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="486.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.12%)</title><rect x="483.9" y="659.0" width="1.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="486.9" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.19%)</title><rect x="485.3" y="1411.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="488.3" y="1422.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="487.1" y="1395.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="490.1" y="1406.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.04%)</title><rect x="487.1" y="1379.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="490.1" y="1390.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl$$Lambda$71/1479409169.action (787 samples, 30.60%)</title><rect x="487.6" y="1427.0" width="361.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="490.6" y="1438.0">ru/mail/polis/service/alex/AsyncServiceImpl$$Lamb..</text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.lambda$entity$0 (784 samples, 30.48%)</title><rect x="489.0" y="1411.0" width="359.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="492.0" y="1422.0">ru/mail/polis/service/alex/AsyncServiceImpl.lambd..</text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.get (784 samples, 30.48%)</title><rect x="489.0" y="1395.0" width="359.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="492.0" y="1406.0">ru/mail/polis/service/alex/AsyncServiceImpl.get</text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.04%)</title><rect x="489.4" y="1379.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="492.4" y="1390.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (9 samples, 0.35%)</title><rect x="489.9" y="1379.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="492.9" y="1390.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (7 samples, 0.27%)</title><rect x="490.8" y="1363.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="493.8" y="1374.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="491.3" y="1347.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="494.3" y="1358.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="491.3" y="1331.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="494.3" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.16%)</title><rect x="491.7" y="1347.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="494.7" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.12%)</title><rect x="492.2" y="1331.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="495.2" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.12%)</title><rect x="492.2" y="1315.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="495.2" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.12%)</title><rect x="492.2" y="1299.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="495.2" y="1310.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.08%)</title><rect x="492.6" y="1283.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="495.6" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (1 samples, 0.04%)</title><rect x="493.6" y="1347.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="496.6" y="1358.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.08%)</title><rect x="494.0" y="1379.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="497.0" y="1390.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.08%)</title><rect x="494.0" y="1363.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="497.0" y="1374.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="494.5" y="1347.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="497.5" y="1358.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="494.5" y="1331.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="497.5" y="1342.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (12 samples, 0.47%)</title><rect x="494.9" y="1379.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="497.9" y="1390.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.16%)</title><rect x="498.6" y="1363.0" width="1.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="501.6" y="1374.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (759 samples, 29.51%)</title><rect x="500.4" y="1379.0" width="348.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="503.4" y="1390.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (101 samples, 3.93%)</title><rect x="500.4" y="1363.0" width="46.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="503.4" y="1374.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (99 samples, 3.85%)</title><rect x="501.4" y="1347.0" width="45.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="504.4" y="1358.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (99 samples, 3.85%)</title><rect x="501.4" y="1331.0" width="45.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="504.4" y="1342.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (99 samples, 3.85%)</title><rect x="501.4" y="1315.0" width="45.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="504.4" y="1326.0">com/..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (99 samples, 3.85%)</title><rect x="501.4" y="1299.0" width="45.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="504.4" y="1310.0">ru/m..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (77 samples, 2.99%)</title><rect x="501.8" y="1283.0" width="35.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="504.8" y="1294.0">com..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.04%)</title><rect x="502.3" y="1267.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="505.3" y="1278.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (1 samples, 0.04%)</title><rect x="502.7" y="1267.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="505.7" y="1278.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.04%)</title><rect x="502.7" y="1251.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="505.7" y="1262.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (1 samples, 0.04%)</title><rect x="502.7" y="1235.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="505.7" y="1246.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (1 samples, 0.04%)</title><rect x="502.7" y="1219.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="505.7" y="1230.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1 samples, 0.04%)</title><rect x="502.7" y="1203.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="505.7" y="1214.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.04%)</title><rect x="502.7" y="1187.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="505.7" y="1198.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.04%)</title><rect x="502.7" y="1171.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="505.7" y="1182.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (1 samples, 0.04%)</title><rect x="503.2" y="1267.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="506.2" y="1278.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (32 samples, 1.24%)</title><rect x="503.7" y="1267.0" width="14.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="506.7" y="1278.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (32 samples, 1.24%)</title><rect x="503.7" y="1251.0" width="14.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="506.7" y="1262.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (32 samples, 1.24%)</title><rect x="503.7" y="1235.0" width="14.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="506.7" y="1246.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (31 samples, 1.21%)</title><rect x="504.1" y="1219.0" width="14.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="507.1" y="1230.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (30 samples, 1.17%)</title><rect x="504.6" y="1203.0" width="13.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="507.6" y="1214.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.04%)</title><rect x="504.6" y="1187.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="507.6" y="1198.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (1 samples, 0.04%)</title><rect x="505.0" y="1187.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="508.0" y="1198.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$74/1875785945.compare (28 samples, 1.09%)</title><rect x="505.5" y="1187.0" width="12.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="508.5" y="1198.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.compareTo (28 samples, 1.09%)</title><rect x="505.5" y="1171.0" width="12.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="508.5" y="1182.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (28 samples, 1.09%)</title><rect x="505.5" y="1155.0" width="12.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="508.5" y="1166.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (28 samples, 1.09%)</title><rect x="505.5" y="1139.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="508.5" y="1150.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (28 samples, 1.09%)</title><rect x="505.5" y="1123.0" width="12.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="508.5" y="1134.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (28 samples, 1.09%)</title><rect x="505.5" y="1107.0" width="12.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="508.5" y="1118.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1961113671.compare (26 samples, 1.01%)</title><rect x="506.4" y="1091.0" width="11.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="509.4" y="1102.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (26 samples, 1.01%)</title><rect x="506.4" y="1075.0" width="11.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="509.4" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 0.51%)</title><rect x="506.9" y="1059.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="509.9" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 0.51%)</title><rect x="506.9" y="1043.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="509.9" y="1054.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (11 samples, 0.43%)</title><rect x="506.9" y="1027.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="509.9" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (1 samples, 0.04%)</title><rect x="508.7" y="1011.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="511.7" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.12%)</title><rect x="509.2" y="1011.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="512.2" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.04%)</title><rect x="510.1" y="995.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="513.1" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.04%)</title><rect x="510.5" y="1011.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="513.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.04%)</title><rect x="510.5" y="995.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="513.5" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (1 samples, 0.04%)</title><rect x="511.0" y="1011.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="514.0" y="1022.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.04%)</title><rect x="511.5" y="1011.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="514.5" y="1022.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.08%)</title><rect x="511.9" y="1027.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="514.9" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row$$Lambda$66/837197855.apply (12 samples, 0.47%)</title><rect x="512.8" y="1059.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="515.8" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (12 samples, 0.47%)</title><rect x="512.8" y="1043.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="515.8" y="1054.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.27%)</title><rect x="512.8" y="1027.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="515.8" y="1038.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.27%)</title><rect x="512.8" y="1011.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="515.8" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.27%)</title><rect x="512.8" y="995.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="515.8" y="1006.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="515.1" y="979.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="518.1" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="515.1" y="963.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="518.1" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="515.1" y="947.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="518.1" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="515.1" y="931.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="518.1" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="515.1" y="915.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="518.1" y="926.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.19%)</title><rect x="516.0" y="1027.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="519.0" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (5 samples, 0.19%)</title><rect x="516.0" y="1011.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="519.0" y="1022.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.19%)</title><rect x="516.0" y="995.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="519.0" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="517.4" y="979.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="520.4" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="517.4" y="963.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="520.4" y="974.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (41 samples, 1.59%)</title><rect x="518.3" y="1267.0" width="18.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="521.3" y="1278.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (41 samples, 1.59%)</title><rect x="518.3" y="1251.0" width="18.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="521.3" y="1262.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (41 samples, 1.59%)</title><rect x="518.3" y="1235.0" width="18.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="521.3" y="1246.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (41 samples, 1.59%)</title><rect x="518.3" y="1219.0" width="18.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="521.3" y="1230.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (40 samples, 1.56%)</title><rect x="518.8" y="1203.0" width="18.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="521.8" y="1214.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (40 samples, 1.56%)</title><rect x="518.8" y="1187.0" width="18.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="521.8" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="519.3" y="1171.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="522.3" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="519.3" y="1155.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="522.3" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="519.3" y="1139.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="522.3" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="519.3" y="1123.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="522.3" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="519.3" y="1107.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="522.3" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="519.3" y="1091.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="522.3" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="519.3" y="1075.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="522.3" y="1086.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (24 samples, 0.93%)</title><rect x="519.7" y="1171.0" width="11.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="522.7" y="1182.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable$SSTableIterator.next (23 samples, 0.89%)</title><rect x="520.2" y="1155.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="523.2" y="1166.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable$SSTableIterator.next (22 samples, 0.86%)</title><rect x="520.6" y="1139.0" width="10.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="523.6" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.transform (21 samples, 0.82%)</title><rect x="521.1" y="1123.0" width="9.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="524.1" y="1134.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.keyAt (12 samples, 0.47%)</title><rect x="521.1" y="1107.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="524.1" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (9 samples, 0.35%)</title><rect x="521.1" y="1091.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="524.1" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (9 samples, 0.35%)</title><rect x="521.1" y="1075.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="524.1" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (9 samples, 0.35%)</title><rect x="521.1" y="1059.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="524.1" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (9 samples, 0.35%)</title><rect x="521.1" y="1043.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="524.1" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="522.9" y="1027.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="525.9" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="522.9" y="1011.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="525.9" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="522.9" y="995.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="525.9" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="522.9" y="979.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="525.9" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="522.9" y="963.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="525.9" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="522.9" y="947.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="525.9" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="522.9" y="931.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="525.9" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.16%)</title><rect x="523.4" y="1027.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="526.4" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="523.8" y="1011.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="526.8" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="523.8" y="995.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="526.8" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="523.8" y="979.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="526.8" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="524.3" y="963.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="527.3" y="974.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="524.3" y="947.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="527.3" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="524.3" y="931.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="527.3" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="524.3" y="915.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="527.3" y="926.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.04%)</title><rect x="524.8" y="963.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="527.8" y="974.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (3 samples, 0.12%)</title><rect x="525.2" y="1091.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="528.2" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.12%)</title><rect x="525.2" y="1075.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="528.2" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="525.2" y="1059.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="528.2" y="1070.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="525.2" y="1043.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="528.2" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="525.2" y="1027.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="528.2" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="525.2" y="1011.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="528.2" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="525.2" y="995.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="528.2" y="1006.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.08%)</title><rect x="525.7" y="979.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="528.7" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.08%)</title><rect x="525.7" y="963.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="528.7" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.08%)</title><rect x="525.7" y="947.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="528.7" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.08%)</title><rect x="525.7" y="931.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="528.7" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.rowAt (7 samples, 0.27%)</title><rect x="526.6" y="1107.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="529.6" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.23%)</title><rect x="526.6" y="1091.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="529.6" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.23%)</title><rect x="526.6" y="1075.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="529.6" y="1086.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="527.1" y="1059.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="530.1" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.16%)</title><rect x="527.5" y="1059.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="530.5" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.16%)</title><rect x="527.5" y="1043.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="530.5" y="1054.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.16%)</title><rect x="527.5" y="1027.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="530.5" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.16%)</title><rect x="527.5" y="1011.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="530.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.16%)</title><rect x="527.5" y="995.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="530.5" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.16%)</title><rect x="527.5" y="979.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="530.5" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.08%)</title><rect x="527.5" y="963.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="530.5" y="974.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.08%)</title><rect x="527.5" y="947.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="530.5" y="958.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.08%)</title><rect x="528.4" y="963.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="531.4" y="974.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.08%)</title><rect x="528.4" y="947.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="531.4" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="528.9" y="931.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="531.9" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="528.9" y="915.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="531.9" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (1 samples, 0.04%)</title><rect x="529.3" y="1091.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="532.3" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.04%)</title><rect x="529.3" y="1075.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="532.3" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="529.3" y="1059.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="532.3" y="1070.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="529.3" y="1043.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="532.3" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="529.3" y="1027.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="532.3" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="529.3" y="1011.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="532.3" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="529.3" y="995.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="532.3" y="1006.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="529.3" y="979.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="532.3" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="529.3" y="963.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="532.3" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="529.3" y="947.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="532.3" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="529.3" y="931.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="532.3" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="529.3" y="915.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="532.3" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="529.3" y="899.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="532.3" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="529.3" y="883.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="532.3" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.timestampAt (2 samples, 0.08%)</title><rect x="529.8" y="1107.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="532.8" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.08%)</title><rect x="529.8" y="1091.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="532.8" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.08%)</title><rect x="529.8" y="1075.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="532.8" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.08%)</title><rect x="529.8" y="1059.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="532.8" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="529.8" y="1043.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="532.8" y="1054.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="530.3" y="1027.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="533.3" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="530.3" y="1011.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="533.3" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="530.3" y="995.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="533.3" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="530.3" y="979.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="533.3" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$74/1875785945.compare (14 samples, 0.54%)</title><rect x="530.7" y="1171.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="533.7" y="1182.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.compareTo (14 samples, 0.54%)</title><rect x="530.7" y="1155.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="533.7" y="1166.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (14 samples, 0.54%)</title><rect x="530.7" y="1139.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="533.7" y="1150.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (14 samples, 0.54%)</title><rect x="530.7" y="1123.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="533.7" y="1134.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (14 samples, 0.54%)</title><rect x="530.7" y="1107.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="533.7" y="1118.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (14 samples, 0.54%)</title><rect x="530.7" y="1091.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="533.7" y="1102.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1961113671.compare (12 samples, 0.47%)</title><rect x="531.6" y="1075.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="534.6" y="1086.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (12 samples, 0.47%)</title><rect x="531.6" y="1059.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="534.6" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.35%)</title><rect x="531.6" y="1043.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="534.6" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.35%)</title><rect x="531.6" y="1027.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="534.6" y="1038.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.23%)</title><rect x="532.1" y="1011.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="535.1" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (2 samples, 0.08%)</title><rect x="533.0" y="995.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="536.0" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.08%)</title><rect x="533.9" y="995.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="536.9" y="1006.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.08%)</title><rect x="534.9" y="1011.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="537.9" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row$$Lambda$66/837197855.apply (2 samples, 0.08%)</title><rect x="535.8" y="1043.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="538.8" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (2 samples, 0.08%)</title><rect x="535.8" y="1027.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="538.8" y="1038.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.08%)</title><rect x="535.8" y="1011.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="538.8" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.08%)</title><rect x="535.8" y="995.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="538.8" y="1006.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.08%)</title><rect x="535.8" y="979.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="538.8" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Value.compareTo (1 samples, 0.04%)</title><rect x="536.7" y="1043.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="539.7" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Value.compareTo (1 samples, 0.04%)</title><rect x="536.7" y="1027.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="539.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.compare (1 samples, 0.04%)</title><rect x="536.7" y="1011.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="539.7" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (12 samples, 0.47%)</title><rect x="537.1" y="1283.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="540.1" y="1294.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (12 samples, 0.47%)</title><rect x="537.1" y="1267.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="540.1" y="1278.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.12%)</title><rect x="540.4" y="1251.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="543.4" y="1262.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.08%)</title><rect x="540.8" y="1235.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="543.8" y="1246.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.08%)</title><rect x="541.7" y="1251.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="544.7" y="1262.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$76/404085938.apply (9 samples, 0.35%)</title><rect x="542.7" y="1283.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="545.7" y="1294.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (9 samples, 0.35%)</title><rect x="542.7" y="1267.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="545.7" y="1278.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.16%)</title><rect x="542.7" y="1251.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="545.7" y="1262.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.16%)</title><rect x="542.7" y="1235.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="545.7" y="1246.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.16%)</title><rect x="542.7" y="1219.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="545.7" y="1230.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.16%)</title><rect x="542.7" y="1203.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="545.7" y="1214.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.16%)</title><rect x="542.7" y="1187.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="545.7" y="1198.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="543.6" y="1171.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="546.6" y="1182.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="543.6" y="1155.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="546.6" y="1166.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="543.6" y="1139.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="546.6" y="1150.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.04%)</title><rect x="543.6" y="1123.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="546.6" y="1134.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="544.0" y="1123.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="547.0" y="1134.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.19%)</title><rect x="544.5" y="1251.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="547.5" y="1262.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (5 samples, 0.19%)</title><rect x="544.5" y="1235.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="547.5" y="1246.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.19%)</title><rect x="544.5" y="1219.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="547.5" y="1230.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.19%)</title><rect x="544.5" y="1203.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="547.5" y="1214.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.19%)</title><rect x="544.5" y="1187.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="547.5" y="1198.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="545.4" y="1171.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="548.4" y="1182.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (11 samples, 0.43%)</title><rect x="546.8" y="1363.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="549.8" y="1374.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (4 samples, 0.16%)</title><rect x="546.8" y="1347.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="549.8" y="1358.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (7 samples, 0.27%)</title><rect x="548.6" y="1347.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="551.6" y="1358.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/AlexDAO$$Lambda$83/1121401899.apply (7 samples, 0.27%)</title><rect x="548.6" y="1331.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="551.6" y="1342.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/AlexDAO.lambda$iterator$0 (6 samples, 0.23%)</title><rect x="549.1" y="1315.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="552.1" y="1326.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (1 samples, 0.04%)</title><rect x="549.1" y="1299.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="552.1" y="1310.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (3 samples, 0.12%)</title><rect x="549.5" y="1299.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="552.5" y="1310.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.08%)</title><rect x="549.5" y="1283.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="552.5" y="1294.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.08%)</title><rect x="549.5" y="1267.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="552.5" y="1278.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.08%)</title><rect x="549.5" y="1251.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="552.5" y="1262.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="549.5" y="1235.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="552.5" y="1246.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="549.5" y="1219.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="552.5" y="1230.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="549.5" y="1203.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="552.5" y="1214.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.04%)</title><rect x="550.5" y="1283.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="553.5" y="1294.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getValue (1 samples, 0.04%)</title><rect x="550.9" y="1299.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="553.9" y="1310.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Value.getData (1 samples, 0.04%)</title><rect x="551.4" y="1299.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="554.4" y="1310.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.04%)</title><rect x="551.4" y="1283.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="554.4" y="1294.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.04%)</title><rect x="551.4" y="1267.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="554.4" y="1278.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.04%)</title><rect x="551.4" y="1251.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="554.4" y="1262.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="551.4" y="1235.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="554.4" y="1246.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="551.4" y="1219.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="554.4" y="1230.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="551.4" y="1203.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="554.4" y="1214.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="551.4" y="1187.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="554.4" y="1198.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="551.4" y="1171.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="554.4" y="1182.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="551.4" y="1155.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="554.4" y="1166.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="551.4" y="1139.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="554.4" y="1150.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="551.4" y="1123.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="554.4" y="1134.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="551.4" y="1107.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="554.4" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (4 samples, 0.16%)</title><rect x="551.8" y="1363.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="554.8" y="1374.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.16%)</title><rect x="551.8" y="1347.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="554.8" y="1358.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.08%)</title><rect x="552.7" y="1331.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="555.7" y="1342.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.04%)</title><rect x="553.2" y="1315.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="556.2" y="1326.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (6 samples, 0.23%)</title><rect x="553.7" y="1363.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="556.7" y="1374.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.04%)</title><rect x="554.6" y="1347.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="557.6" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="555.0" y="1347.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="558.0" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="555.0" y="1331.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="558.0" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="555.0" y="1315.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="558.0" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="555.0" y="1299.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="558.0" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="555.0" y="1283.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="558.0" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="555.0" y="1267.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="558.0" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="555.0" y="1251.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="558.0" y="1262.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.08%)</title><rect x="555.5" y="1347.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="558.5" y="1358.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.08%)</title><rect x="555.5" y="1331.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="558.5" y="1342.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.08%)</title><rect x="555.5" y="1315.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="558.5" y="1326.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="555.5" y="1299.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="558.5" y="1310.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="555.5" y="1283.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="558.5" y="1294.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="555.5" y="1267.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="558.5" y="1278.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="555.5" y="1251.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="558.5" y="1262.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="556.0" y="1235.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="559.0" y="1246.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="556.0" y="1219.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="559.0" y="1230.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="556.0" y="1203.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="559.0" y="1214.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="556.0" y="1187.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="559.0" y="1198.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (2 samples, 0.08%)</title><rect x="556.4" y="1363.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="559.4" y="1374.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.08%)</title><rect x="556.4" y="1347.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="559.4" y="1358.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.08%)</title><rect x="556.4" y="1331.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="559.4" y="1342.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.08%)</title><rect x="556.4" y="1315.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="559.4" y="1326.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="556.4" y="1299.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="559.4" y="1310.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="556.9" y="1283.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="559.9" y="1294.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="556.9" y="1267.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="559.9" y="1278.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="556.9" y="1251.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="559.9" y="1262.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/AlexDAO.iterator (634 samples, 24.65%)</title><rect x="557.3" y="1363.0" width="290.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="560.3" y="1374.0">ru/mail/polis/dao/alex/AlexDAO.iterator</text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="575.7" y="1347.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="578.7" y="1358.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.04%)</title><rect x="575.7" y="1331.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="578.7" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="575.7" y="1315.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="578.7" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="575.7" y="1299.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="578.7" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="575.7" y="1283.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="578.7" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="575.7" y="1267.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="578.7" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="575.7" y="1251.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="578.7" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="575.7" y="1235.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="578.7" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="575.7" y="1219.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="578.7" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="575.7" y="1203.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="578.7" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="575.7" y="1187.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="578.7" y="1198.0"></text>
</g>
<g>
<title>com/google/common/base/Preconditions.checkNotNull (1 samples, 0.04%)</title><rect x="576.1" y="1347.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="579.1" y="1358.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (1 samples, 0.04%)</title><rect x="576.6" y="1347.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="579.6" y="1358.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.04%)</title><rect x="577.1" y="1347.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="580.1" y="1358.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (2 samples, 0.08%)</title><rect x="577.5" y="1347.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="580.5" y="1358.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.04%)</title><rect x="578.4" y="1347.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="581.4" y="1358.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.04%)</title><rect x="578.9" y="1347.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="581.9" y="1358.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.12%)</title><rect x="579.4" y="1347.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="582.4" y="1358.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1 samples, 0.04%)</title><rect x="580.7" y="1347.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="583.7" y="1358.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (2 samples, 0.08%)</title><rect x="581.2" y="1347.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="584.2" y="1358.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.&lt;init&gt; (1 samples, 0.04%)</title><rect x="582.1" y="1347.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="585.1" y="1358.0"></text>
</g>
<g>
<title>java/util/TreeMap.getLastEntry (1 samples, 0.04%)</title><rect x="582.6" y="1347.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="585.6" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.hasNext (1 samples, 0.04%)</title><rect x="583.0" y="1347.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="586.0" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (1 samples, 0.04%)</title><rect x="583.5" y="1347.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="586.5" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (1 samples, 0.04%)</title><rect x="583.9" y="1347.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="586.9" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.08%)</title><rect x="584.4" y="1347.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="587.4" y="1358.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (1 samples, 0.04%)</title><rect x="585.3" y="1347.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="588.3" y="1358.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/AlexDAO.rowsIterator (570 samples, 22.16%)</title><rect x="585.8" y="1347.0" width="261.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="588.8" y="1358.0">ru/mail/polis/dao/alex/AlexDAO.rows..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.combineTables (405 samples, 15.75%)</title><rect x="585.8" y="1331.0" width="185.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="588.8" y="1342.0">ru/mail/polis/dao/alex/T..</text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.08%)</title><rect x="586.2" y="1315.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="589.2" y="1326.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.08%)</title><rect x="586.2" y="1299.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="589.2" y="1310.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.08%)</title><rect x="586.2" y="1283.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="589.2" y="1294.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.08%)</title><rect x="586.2" y="1267.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="589.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (8 samples, 0.31%)</title><rect x="587.2" y="1315.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="590.2" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (8 samples, 0.31%)</title><rect x="587.2" y="1299.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="590.2" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.descend (8 samples, 0.31%)</title><rect x="587.2" y="1283.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="590.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (1 samples, 0.04%)</title><rect x="587.2" y="1267.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="590.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.04%)</title><rect x="587.2" y="1251.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="590.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (7 samples, 0.27%)</title><rect x="587.6" y="1267.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="590.6" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (6 samples, 0.23%)</title><rect x="588.1" y="1251.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="591.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (6 samples, 0.23%)</title><rect x="588.1" y="1235.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="591.1" y="1246.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTablePool.iterator (119 samples, 4.63%)</title><rect x="590.8" y="1315.0" width="54.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="593.8" y="1326.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (5 samples, 0.19%)</title><rect x="590.8" y="1299.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="593.8" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (5 samples, 0.19%)</title><rect x="590.8" y="1283.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="593.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (5 samples, 0.19%)</title><rect x="590.8" y="1267.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="593.8" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="590.8" y="1251.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="593.8" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.04%)</title><rect x="590.8" y="1235.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="593.8" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.04%)</title><rect x="590.8" y="1219.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="593.8" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.04%)</title><rect x="590.8" y="1203.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="593.8" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.04%)</title><rect x="590.8" y="1187.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="593.8" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.16%)</title><rect x="591.3" y="1251.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="594.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.16%)</title><rect x="591.3" y="1235.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="594.3" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (4 samples, 0.16%)</title><rect x="591.3" y="1219.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="594.3" y="1230.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.combineTables (102 samples, 3.97%)</title><rect x="593.1" y="1299.0" width="46.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="596.1" y="1310.0">ru/m..</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (13 samples, 0.51%)</title><rect x="594.5" y="1283.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="597.5" y="1294.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (13 samples, 0.51%)</title><rect x="594.5" y="1267.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="597.5" y="1278.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.04%)</title><rect x="595.9" y="1251.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="598.9" y="1262.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (6 samples, 0.23%)</title><rect x="596.3" y="1251.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="599.3" y="1262.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.08%)</title><rect x="597.2" y="1235.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="600.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (2 samples, 0.08%)</title><rect x="598.2" y="1235.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="601.2" y="1246.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.transformRows (3 samples, 0.12%)</title><rect x="599.1" y="1251.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="602.1" y="1262.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (7 samples, 0.27%)</title><rect x="600.5" y="1283.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="603.5" y="1294.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (6 samples, 0.23%)</title><rect x="600.9" y="1267.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="603.9" y="1278.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (4 samples, 0.16%)</title><rect x="601.8" y="1251.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="604.8" y="1262.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (4 samples, 0.16%)</title><rect x="601.8" y="1235.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="604.8" y="1246.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (2 samples, 0.08%)</title><rect x="601.8" y="1219.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="604.8" y="1230.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.08%)</title><rect x="602.8" y="1219.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="605.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (3 samples, 0.12%)</title><rect x="603.7" y="1283.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="606.7" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (3 samples, 0.12%)</title><rect x="603.7" y="1267.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="606.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (1 samples, 0.04%)</title><rect x="603.7" y="1251.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="606.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.descend (2 samples, 0.08%)</title><rect x="604.1" y="1251.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="607.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (1 samples, 0.04%)</title><rect x="604.6" y="1235.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="607.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (1 samples, 0.04%)</title><rect x="605.0" y="1283.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="608.0" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (1 samples, 0.04%)</title><rect x="605.5" y="1283.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="608.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (1 samples, 0.04%)</title><rect x="605.5" y="1267.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="608.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (1 samples, 0.04%)</title><rect x="605.5" y="1251.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="608.5" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandle.acquireFence (1 samples, 0.04%)</title><rect x="605.5" y="1235.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="608.5" y="1246.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTable.iterator (73 samples, 2.84%)</title><rect x="606.0" y="1283.0" width="33.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="609.0" y="1294.0">ru..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (1 samples, 0.04%)</title><rect x="606.0" y="1267.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="609.0" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (3 samples, 0.12%)</title><rect x="606.4" y="1267.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="609.4" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.&lt;init&gt; (3 samples, 0.12%)</title><rect x="606.4" y="1251.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="609.4" y="1262.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (3 samples, 0.12%)</title><rect x="606.4" y="1235.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="609.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.12%)</title><rect x="606.4" y="1219.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="609.4" y="1230.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (2 samples, 0.08%)</title><rect x="606.9" y="1203.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="609.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (66 samples, 2.57%)</title><rect x="607.8" y="1267.0" width="30.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="610.8" y="1278.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (64 samples, 2.49%)</title><rect x="608.7" y="1251.0" width="29.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="611.7" y="1262.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (64 samples, 2.49%)</title><rect x="608.7" y="1235.0" width="29.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="611.7" y="1246.0">ja..</text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.04%)</title><rect x="613.3" y="1219.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="616.3" y="1230.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.04%)</title><rect x="613.3" y="1203.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="616.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (1 samples, 0.04%)</title><rect x="613.8" y="1219.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="616.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (1 samples, 0.04%)</title><rect x="613.8" y="1203.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="616.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.04%)</title><rect x="613.8" y="1187.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="616.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (52 samples, 2.02%)</title><rect x="614.2" y="1219.0" width="23.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="617.2" y="1230.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (52 samples, 2.02%)</title><rect x="614.2" y="1203.0" width="23.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="617.2" y="1214.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3 samples, 0.12%)</title><rect x="616.5" y="1187.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="619.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (1 samples, 0.04%)</title><rect x="617.4" y="1171.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="620.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (44 samples, 1.71%)</title><rect x="617.9" y="1187.0" width="20.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="620.9" y="1198.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.04%)</title><rect x="621.1" y="1171.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="624.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (36 samples, 1.40%)</title><rect x="621.6" y="1171.0" width="16.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="624.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (12 samples, 0.47%)</title><rect x="623.4" y="1155.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="626.4" y="1166.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (20 samples, 0.78%)</title><rect x="628.9" y="1155.0" width="9.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="631.9" y="1166.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (20 samples, 0.78%)</title><rect x="628.9" y="1139.0" width="9.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="631.9" y="1150.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (19 samples, 0.74%)</title><rect x="629.4" y="1123.0" width="8.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="632.4" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (10 samples, 0.39%)</title><rect x="633.5" y="1107.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="636.5" y="1118.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.04%)</title><rect x="637.2" y="1091.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="640.2" y="1102.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.04%)</title><rect x="637.6" y="1091.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="640.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.08%)</title><rect x="638.1" y="1267.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="641.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.08%)</title><rect x="638.1" y="1251.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="641.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.08%)</title><rect x="638.1" y="1235.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="641.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (2 samples, 0.08%)</title><rect x="638.1" y="1219.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="641.1" y="1230.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.04%)</title><rect x="639.0" y="1267.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="642.0" y="1278.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.iterator (1 samples, 0.04%)</title><rect x="639.5" y="1283.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="642.5" y="1294.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.transformRows (12 samples, 0.47%)</title><rect x="639.9" y="1299.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="642.9" y="1310.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (8 samples, 0.31%)</title><rect x="639.9" y="1283.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="642.9" y="1294.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (7 samples, 0.27%)</title><rect x="640.4" y="1267.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="643.4" y="1278.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.04%)</title><rect x="641.3" y="1251.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="644.3" y="1262.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (4 samples, 0.16%)</title><rect x="641.7" y="1251.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="644.7" y="1262.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (4 samples, 0.16%)</title><rect x="641.7" y="1235.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="644.7" y="1246.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (4 samples, 0.16%)</title><rect x="641.7" y="1219.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="644.7" y="1230.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (3 samples, 0.12%)</title><rect x="642.2" y="1203.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="645.2" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (4 samples, 0.16%)</title><rect x="643.6" y="1283.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="646.6" y="1294.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (4 samples, 0.16%)</title><rect x="643.6" y="1267.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="646.6" y="1278.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (4 samples, 0.16%)</title><rect x="643.6" y="1251.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="646.6" y="1262.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (3 samples, 0.12%)</title><rect x="643.6" y="1235.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="646.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (3 samples, 0.12%)</title><rect x="643.6" y="1219.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="646.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (3 samples, 0.12%)</title><rect x="643.6" y="1203.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="646.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (1 samples, 0.04%)</title><rect x="644.5" y="1187.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="647.5" y="1198.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1 samples, 0.04%)</title><rect x="645.0" y="1235.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="648.0" y="1246.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1 samples, 0.04%)</title><rect x="645.0" y="1219.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="648.0" y="1230.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.iterator (275 samples, 10.69%)</title><rect x="645.4" y="1315.0" width="126.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="648.4" y="1326.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable$SSTableIterator.&lt;init&gt; (275 samples, 10.69%)</title><rect x="645.4" y="1299.0" width="126.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="648.4" y="1310.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.position (274 samples, 10.65%)</title><rect x="645.9" y="1283.0" width="125.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="648.9" y="1294.0">ru/mail/polis/d..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="651.8" y="1267.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="654.8" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="651.8" y="1251.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="654.8" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="651.8" y="1235.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="654.8" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="651.8" y="1219.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="654.8" y="1230.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (62 samples, 2.41%)</title><rect x="652.3" y="1267.0" width="28.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="655.3" y="1278.0">ja..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (53 samples, 2.06%)</title><rect x="654.1" y="1251.0" width="24.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="657.1" y="1262.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (7 samples, 0.27%)</title><rect x="662.4" y="1235.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="665.4" y="1246.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.12%)</title><rect x="664.2" y="1219.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="667.2" y="1230.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (4 samples, 0.16%)</title><rect x="665.6" y="1235.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="668.6" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (22 samples, 0.86%)</title><rect x="667.4" y="1235.0" width="10.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="670.4" y="1246.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.16%)</title><rect x="674.8" y="1219.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="677.8" y="1230.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.08%)</title><rect x="676.6" y="1219.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="679.6" y="1230.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.08%)</title><rect x="677.5" y="1235.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="680.5" y="1246.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.16%)</title><rect x="678.5" y="1251.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="681.5" y="1262.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.04%)</title><rect x="679.8" y="1235.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="682.8" y="1246.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.04%)</title><rect x="680.3" y="1251.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="683.3" y="1262.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.keyAt (101 samples, 3.93%)</title><rect x="680.7" y="1267.0" width="46.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="683.7" y="1278.0">ru/m..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (27 samples, 1.05%)</title><rect x="682.1" y="1251.0" width="12.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="685.1" y="1262.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (2 samples, 0.08%)</title><rect x="682.1" y="1235.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="685.1" y="1246.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (25 samples, 0.97%)</title><rect x="683.0" y="1235.0" width="11.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="686.0" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (25 samples, 0.97%)</title><rect x="683.0" y="1219.0" width="11.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="686.0" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (24 samples, 0.93%)</title><rect x="683.5" y="1203.0" width="11.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="686.5" y="1214.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (42 samples, 1.63%)</title><rect x="694.5" y="1251.0" width="19.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="697.5" y="1262.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (42 samples, 1.63%)</title><rect x="694.5" y="1235.0" width="19.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="697.5" y="1246.0"></text>
</g>
<g>
<title>java/nio/Buffer.capacity (1 samples, 0.04%)</title><rect x="695.9" y="1219.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="698.9" y="1230.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (38 samples, 1.48%)</title><rect x="696.3" y="1219.0" width="17.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="699.3" y="1230.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (38 samples, 1.48%)</title><rect x="696.3" y="1203.0" width="17.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="699.3" y="1214.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (37 samples, 1.44%)</title><rect x="696.8" y="1187.0" width="17.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="699.8" y="1198.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (37 samples, 1.44%)</title><rect x="696.8" y="1171.0" width="17.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="699.8" y="1182.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (37 samples, 1.44%)</title><rect x="696.8" y="1155.0" width="17.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="699.8" y="1166.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (15 samples, 0.58%)</title><rect x="704.6" y="1139.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="707.6" y="1150.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.19%)</title><rect x="706.9" y="1123.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="709.9" y="1134.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.08%)</title><rect x="708.3" y="1107.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="711.3" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.08%)</title><rect x="708.3" y="1091.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="711.3" y="1102.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="708.7" y="1075.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="711.7" y="1086.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="709.2" y="1123.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="712.2" y="1134.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="709.2" y="1107.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="712.2" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="709.2" y="1091.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="712.2" y="1102.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="709.2" y="1075.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="712.2" y="1086.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.16%)</title><rect x="709.7" y="1123.0" width="1.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="712.7" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (2 samples, 0.08%)</title><rect x="711.5" y="1139.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="714.5" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.rowAt (3 samples, 0.12%)</title><rect x="712.4" y="1139.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="715.4" y="1150.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (28 samples, 1.09%)</title><rect x="713.8" y="1251.0" width="12.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="716.8" y="1262.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (28 samples, 1.09%)</title><rect x="713.8" y="1235.0" width="12.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="716.8" y="1246.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (28 samples, 1.09%)</title><rect x="713.8" y="1219.0" width="12.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="716.8" y="1230.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (28 samples, 1.09%)</title><rect x="713.8" y="1203.0" width="12.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="716.8" y="1214.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (28 samples, 1.09%)</title><rect x="713.8" y="1187.0" width="12.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="716.8" y="1198.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (28 samples, 1.09%)</title><rect x="713.8" y="1171.0" width="12.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="716.8" y="1182.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (24 samples, 0.93%)</title><rect x="715.6" y="1155.0" width="11.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="718.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.12%)</title><rect x="718.8" y="1139.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="721.8" y="1150.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (2 samples, 0.08%)</title><rect x="719.3" y="1123.0" width="0.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="722.3" y="1134.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.43%)</title><rect x="720.2" y="1139.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="723.2" y="1150.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.31%)</title><rect x="721.6" y="1123.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="724.6" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.31%)</title><rect x="721.6" y="1107.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="724.6" y="1118.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (8 samples, 0.31%)</title><rect x="721.6" y="1091.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="724.6" y="1102.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.12%)</title><rect x="725.2" y="1139.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="728.2" y="1150.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.12%)</title><rect x="725.2" y="1123.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="728.2" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.12%)</title><rect x="725.2" y="1107.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="728.2" y="1118.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.12%)</title><rect x="725.2" y="1091.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="728.2" y="1102.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.04%)</title><rect x="726.6" y="1251.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="729.6" y="1262.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.rowAt (97 samples, 3.77%)</title><rect x="727.1" y="1267.0" width="44.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="730.1" y="1278.0">ru/m..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (67 samples, 2.60%)</title><rect x="727.1" y="1251.0" width="30.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="730.1" y="1262.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (67 samples, 2.60%)</title><rect x="727.1" y="1235.0" width="30.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="730.1" y="1246.0">ja..</text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.08%)</title><rect x="732.6" y="1219.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="735.6" y="1230.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (53 samples, 2.06%)</title><rect x="733.5" y="1219.0" width="24.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="736.5" y="1230.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (53 samples, 2.06%)</title><rect x="733.5" y="1203.0" width="24.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="736.5" y="1214.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (53 samples, 2.06%)</title><rect x="733.5" y="1187.0" width="24.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="736.5" y="1198.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (53 samples, 2.06%)</title><rect x="733.5" y="1171.0" width="24.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="736.5" y="1182.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (53 samples, 2.06%)</title><rect x="733.5" y="1155.0" width="24.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="736.5" y="1166.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (53 samples, 2.06%)</title><rect x="733.5" y="1139.0" width="24.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="736.5" y="1150.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (50 samples, 1.94%)</title><rect x="733.5" y="1123.0" width="22.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="736.5" y="1134.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (50 samples, 1.94%)</title><rect x="733.5" y="1107.0" width="22.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="736.5" y="1118.0">j..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="752.8" y="1091.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="755.8" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="752.8" y="1075.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="755.8" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="752.8" y="1059.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="755.8" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="752.8" y="1043.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="755.8" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="752.8" y="1027.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="755.8" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="752.8" y="1011.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="755.8" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="752.8" y="995.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="755.8" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.27%)</title><rect x="753.2" y="1091.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="756.2" y="1102.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (7 samples, 0.27%)</title><rect x="753.2" y="1075.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="756.2" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="756.0" y="1059.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="759.0" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="756.0" y="1043.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="759.0" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="756.0" y="1027.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="759.0" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="756.0" y="1011.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="759.0" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="756.0" y="995.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="759.0" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="756.0" y="979.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="759.0" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="756.0" y="963.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="759.0" y="974.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.12%)</title><rect x="756.4" y="1123.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="759.4" y="1134.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.12%)</title><rect x="756.4" y="1107.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="759.4" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="756.4" y="1091.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="759.4" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.08%)</title><rect x="756.9" y="1091.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="759.9" y="1102.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.08%)</title><rect x="756.9" y="1075.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="759.9" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (30 samples, 1.17%)</title><rect x="757.8" y="1251.0" width="13.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="760.8" y="1262.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (30 samples, 1.17%)</title><rect x="757.8" y="1235.0" width="13.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="760.8" y="1246.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (30 samples, 1.17%)</title><rect x="757.8" y="1219.0" width="13.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="760.8" y="1230.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (30 samples, 1.17%)</title><rect x="757.8" y="1203.0" width="13.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="760.8" y="1214.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (30 samples, 1.17%)</title><rect x="757.8" y="1187.0" width="13.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="760.8" y="1198.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (30 samples, 1.17%)</title><rect x="757.8" y="1171.0" width="13.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="760.8" y="1182.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (30 samples, 1.17%)</title><rect x="757.8" y="1155.0" width="13.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="760.8" y="1166.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (22 samples, 0.86%)</title><rect x="757.8" y="1139.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="760.8" y="1150.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (22 samples, 0.86%)</title><rect x="757.8" y="1123.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="760.8" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (22 samples, 0.86%)</title><rect x="757.8" y="1107.0" width="10.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="760.8" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.16%)</title><rect x="766.1" y="1091.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="769.1" y="1102.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.31%)</title><rect x="767.9" y="1139.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="770.9" y="1150.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.31%)</title><rect x="767.9" y="1123.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="770.9" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (8 samples, 0.31%)</title><rect x="767.9" y="1107.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="770.9" y="1118.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.16%)</title><rect x="768.8" y="1091.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="771.8" y="1102.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.08%)</title><rect x="770.7" y="1091.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="773.7" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.transformRows (165 samples, 6.42%)</title><rect x="771.6" y="1331.0" width="75.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="774.6" y="1342.0">ru/mail/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (1 samples, 0.04%)</title><rect x="771.6" y="1315.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="774.6" y="1326.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (129 samples, 5.02%)</title><rect x="772.0" y="1315.0" width="59.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="775.0" y="1326.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (129 samples, 5.02%)</title><rect x="772.0" y="1299.0" width="59.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="775.0" y="1310.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (41 samples, 1.59%)</title><rect x="773.0" y="1283.0" width="18.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="776.0" y="1294.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (41 samples, 1.59%)</title><rect x="773.0" y="1267.0" width="18.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="776.0" y="1278.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (41 samples, 1.59%)</title><rect x="773.0" y="1251.0" width="18.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="776.0" y="1262.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (41 samples, 1.59%)</title><rect x="773.0" y="1235.0" width="18.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="776.0" y="1246.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (12 samples, 0.47%)</title><rect x="775.7" y="1219.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="778.7" y="1230.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (1 samples, 0.04%)</title><rect x="776.6" y="1203.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="779.6" y="1214.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (2 samples, 0.08%)</title><rect x="777.1" y="1203.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="780.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (1 samples, 0.04%)</title><rect x="777.6" y="1187.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="780.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (1 samples, 0.04%)</title><rect x="777.6" y="1171.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="780.6" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.descend (1 samples, 0.04%)</title><rect x="777.6" y="1155.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="780.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (1 samples, 0.04%)</title><rect x="777.6" y="1139.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="780.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (1 samples, 0.04%)</title><rect x="777.6" y="1123.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="780.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandle.acquireFence (1 samples, 0.04%)</title><rect x="777.6" y="1107.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="780.6" y="1118.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.08%)</title><rect x="778.0" y="1203.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="781.0" y="1214.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1 samples, 0.04%)</title><rect x="778.9" y="1203.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="781.9" y="1214.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1 samples, 0.04%)</title><rect x="778.9" y="1187.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="781.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.hasNext (4 samples, 0.16%)</title><rect x="779.4" y="1203.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="782.4" y="1214.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (13 samples, 0.51%)</title><rect x="781.2" y="1219.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="784.2" y="1230.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (13 samples, 0.51%)</title><rect x="781.2" y="1203.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="784.2" y="1214.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (4 samples, 0.16%)</title><rect x="783.1" y="1187.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="786.1" y="1198.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.16%)</title><rect x="784.9" y="1187.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="787.9" y="1198.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.04%)</title><rect x="785.3" y="1171.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="788.3" y="1182.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.08%)</title><rect x="785.8" y="1171.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="788.8" y="1182.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.04%)</title><rect x="786.7" y="1187.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="789.7" y="1198.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$76/404085938.apply (10 samples, 0.39%)</title><rect x="787.2" y="1219.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="790.2" y="1230.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (10 samples, 0.39%)</title><rect x="787.2" y="1203.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="790.2" y="1214.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.12%)</title><rect x="787.2" y="1187.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="790.2" y="1198.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.12%)</title><rect x="787.2" y="1171.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="790.2" y="1182.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.12%)</title><rect x="787.2" y="1155.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="790.2" y="1166.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="787.2" y="1139.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="790.2" y="1150.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="787.2" y="1123.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="790.2" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="788.1" y="1107.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="791.1" y="1118.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (7 samples, 0.27%)</title><rect x="788.6" y="1187.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="791.6" y="1198.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (7 samples, 0.27%)</title><rect x="788.6" y="1171.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="791.6" y="1182.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.27%)</title><rect x="788.6" y="1155.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="791.6" y="1166.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.27%)</title><rect x="788.6" y="1139.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="791.6" y="1150.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.27%)</title><rect x="788.6" y="1123.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="791.6" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.12%)</title><rect x="789.9" y="1107.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="792.9" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="790.9" y="1091.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="793.9" y="1102.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="790.9" y="1075.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="793.9" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="791.3" y="1107.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="794.3" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="791.3" y="1091.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="794.3" y="1102.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="791.3" y="1075.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="794.3" y="1086.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (1 samples, 0.04%)</title><rect x="791.8" y="1283.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="794.8" y="1294.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (1 samples, 0.04%)</title><rect x="792.2" y="1283.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="795.2" y="1294.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (84 samples, 3.27%)</title><rect x="792.7" y="1283.0" width="38.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="795.7" y="1294.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (84 samples, 3.27%)</title><rect x="792.7" y="1267.0" width="38.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="795.7" y="1278.0">jav..</text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.04%)</title><rect x="792.7" y="1251.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="795.7" y="1262.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (5 samples, 0.19%)</title><rect x="793.1" y="1251.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="796.1" y="1262.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.04%)</title><rect x="795.0" y="1235.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="798.0" y="1246.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (78 samples, 3.03%)</title><rect x="795.4" y="1251.0" width="35.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="798.4" y="1262.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (78 samples, 3.03%)</title><rect x="795.4" y="1235.0" width="35.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="798.4" y="1246.0">jav..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (77 samples, 2.99%)</title><rect x="795.9" y="1219.0" width="35.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="798.9" y="1230.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (77 samples, 2.99%)</title><rect x="795.9" y="1203.0" width="35.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="798.9" y="1214.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (41 samples, 1.59%)</title><rect x="795.9" y="1187.0" width="18.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="798.9" y="1198.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (4 samples, 0.16%)</title><rect x="797.3" y="1171.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="800.3" y="1182.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (2 samples, 0.08%)</title><rect x="798.2" y="1155.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="801.2" y="1166.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (2 samples, 0.08%)</title><rect x="798.2" y="1139.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="801.2" y="1150.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (2 samples, 0.08%)</title><rect x="798.2" y="1123.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="801.2" y="1134.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (2 samples, 0.08%)</title><rect x="798.2" y="1107.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="801.2" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable$SSTableIterator.next (34 samples, 1.32%)</title><rect x="799.1" y="1171.0" width="15.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="802.1" y="1182.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable$SSTableIterator.next (33 samples, 1.28%)</title><rect x="799.6" y="1155.0" width="15.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="802.6" y="1166.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable$SSTableIterator.hasNext (2 samples, 0.08%)</title><rect x="800.0" y="1139.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="803.0" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.transform (30 samples, 1.17%)</title><rect x="800.9" y="1139.0" width="13.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="803.9" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.keyAt (12 samples, 0.47%)</title><rect x="801.4" y="1123.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="804.4" y="1134.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (3 samples, 0.12%)</title><rect x="801.4" y="1107.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="804.4" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.27%)</title><rect x="802.8" y="1107.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="805.8" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.23%)</title><rect x="803.2" y="1091.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="806.2" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.16%)</title><rect x="804.2" y="1075.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="807.2" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.16%)</title><rect x="804.2" y="1059.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="807.2" y="1070.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="805.1" y="1043.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="808.1" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="805.1" y="1027.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="808.1" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="805.5" y="1011.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="808.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="805.5" y="995.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="808.5" y="1006.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.08%)</title><rect x="806.0" y="1107.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="809.0" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.08%)</title><rect x="806.0" y="1091.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="809.0" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="806.0" y="1075.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="809.0" y="1086.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="806.5" y="1059.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="809.5" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="806.5" y="1043.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="809.5" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="806.5" y="1027.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="809.5" y="1038.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="806.5" y="1011.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="809.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="806.5" y="995.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="809.5" y="1006.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="806.5" y="979.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="809.5" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="806.5" y="963.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="809.5" y="974.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="806.5" y="947.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="809.5" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.rowAt (6 samples, 0.23%)</title><rect x="806.9" y="1123.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="809.9" y="1134.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.12%)</title><rect x="806.9" y="1107.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="809.9" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.12%)</title><rect x="806.9" y="1091.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="809.9" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.12%)</title><rect x="806.9" y="1075.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="809.9" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="806.9" y="1059.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="809.9" y="1070.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="806.9" y="1043.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="809.9" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="806.9" y="1027.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="809.9" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="806.9" y="1011.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="809.9" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="806.9" y="995.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="809.9" y="1006.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.12%)</title><rect x="806.9" y="979.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="809.9" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.12%)</title><rect x="806.9" y="963.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="809.9" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="807.8" y="947.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="810.8" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="807.8" y="931.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="810.8" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (3 samples, 0.12%)</title><rect x="808.3" y="1107.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="811.3" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.12%)</title><rect x="808.3" y="1091.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="811.3" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="808.3" y="1075.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="811.3" y="1086.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="808.3" y="1059.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="811.3" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="808.3" y="1043.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="811.3" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="808.3" y="1027.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="811.3" y="1038.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="808.3" y="1011.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="811.3" y="1022.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.08%)</title><rect x="808.3" y="995.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="811.3" y="1006.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.08%)</title><rect x="808.3" y="979.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="811.3" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.08%)</title><rect x="808.3" y="963.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="811.3" y="974.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="809.2" y="995.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="812.2" y="1006.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="809.2" y="979.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="812.2" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="809.2" y="963.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="812.2" y="974.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="809.2" y="947.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="812.2" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.timestampAt (8 samples, 0.31%)</title><rect x="809.7" y="1123.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="812.7" y="1134.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (1 samples, 0.04%)</title><rect x="809.7" y="1107.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="812.7" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (1 samples, 0.04%)</title><rect x="809.7" y="1091.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="812.7" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (1 samples, 0.04%)</title><rect x="809.7" y="1075.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="812.7" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.27%)</title><rect x="810.1" y="1107.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="813.1" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.27%)</title><rect x="810.1" y="1091.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="813.1" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.23%)</title><rect x="810.6" y="1075.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="813.6" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.19%)</title><rect x="811.0" y="1059.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="814.0" y="1070.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="812.9" y="1043.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="815.9" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.valueAt (3 samples, 0.12%)</title><rect x="813.3" y="1123.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="816.3" y="1134.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (3 samples, 0.12%)</title><rect x="813.3" y="1107.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="816.3" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.12%)</title><rect x="813.3" y="1091.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="816.3" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="813.3" y="1075.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="816.3" y="1086.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="813.3" y="1059.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="816.3" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="813.3" y="1043.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="816.3" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="813.3" y="1027.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="816.3" y="1038.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="813.3" y="1011.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="816.3" y="1022.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.04%)</title><rect x="814.3" y="995.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="817.3" y="1006.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.04%)</title><rect x="814.3" y="979.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="817.3" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="814.3" y="963.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="817.3" y="974.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="814.3" y="947.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="817.3" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$74/1875785945.compare (36 samples, 1.40%)</title><rect x="814.7" y="1187.0" width="16.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="817.7" y="1198.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.compareTo (36 samples, 1.40%)</title><rect x="814.7" y="1171.0" width="16.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="817.7" y="1182.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (36 samples, 1.40%)</title><rect x="814.7" y="1155.0" width="16.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="817.7" y="1166.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (35 samples, 1.36%)</title><rect x="815.2" y="1139.0" width="16.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="818.2" y="1150.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1961113671.compare (4 samples, 0.16%)</title><rect x="815.2" y="1123.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="818.2" y="1134.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (4 samples, 0.16%)</title><rect x="815.2" y="1107.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="818.2" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row$$Lambda$66/837197855.apply (4 samples, 0.16%)</title><rect x="815.2" y="1091.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="818.2" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (4 samples, 0.16%)</title><rect x="815.2" y="1075.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="818.2" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.16%)</title><rect x="815.2" y="1059.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="818.2" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.16%)</title><rect x="815.2" y="1043.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="818.2" y="1054.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.16%)</title><rect x="815.2" y="1027.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="818.2" y="1038.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.16%)</title><rect x="815.2" y="1011.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="818.2" y="1022.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.16%)</title><rect x="815.2" y="995.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="818.2" y="1006.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.04%)</title><rect x="815.2" y="979.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="818.2" y="990.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.04%)</title><rect x="815.2" y="963.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="818.2" y="974.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (1 samples, 0.04%)</title><rect x="815.2" y="947.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="818.2" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Value.compareTo (3 samples, 0.12%)</title><rect x="815.6" y="979.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="818.6" y="990.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (31 samples, 1.21%)</title><rect x="817.0" y="1123.0" width="14.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="820.0" y="1134.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (31 samples, 1.21%)</title><rect x="817.0" y="1107.0" width="14.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="820.0" y="1118.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1961113671.compare (28 samples, 1.09%)</title><rect x="818.4" y="1091.0" width="12.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="821.4" y="1102.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (28 samples, 1.09%)</title><rect x="818.4" y="1075.0" width="12.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="821.4" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.31%)</title><rect x="818.8" y="1059.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="821.8" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.31%)</title><rect x="818.8" y="1043.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="821.8" y="1054.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.31%)</title><rect x="818.8" y="1027.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="821.8" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (1 samples, 0.04%)</title><rect x="820.7" y="1011.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="823.7" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.08%)</title><rect x="821.1" y="1011.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="824.1" y="1022.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.04%)</title><rect x="822.1" y="1011.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="825.1" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row$$Lambda$66/837197855.apply (18 samples, 0.70%)</title><rect x="822.5" y="1059.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="825.5" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (18 samples, 0.70%)</title><rect x="822.5" y="1043.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="825.5" y="1054.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (10 samples, 0.39%)</title><rect x="822.5" y="1027.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="825.5" y="1038.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (10 samples, 0.39%)</title><rect x="822.5" y="1011.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="825.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (10 samples, 0.39%)</title><rect x="822.5" y="995.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="825.5" y="1006.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.04%)</title><rect x="825.3" y="979.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="828.3" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.04%)</title><rect x="825.7" y="979.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="828.7" y="990.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="826.2" y="979.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="829.2" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="826.2" y="963.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="829.2" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="826.2" y="947.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="829.2" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="826.2" y="931.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="829.2" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="826.2" y="915.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="829.2" y="926.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (8 samples, 0.31%)</title><rect x="827.1" y="1027.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="830.1" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (8 samples, 0.31%)</title><rect x="827.1" y="1011.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="830.1" y="1022.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.31%)</title><rect x="827.1" y="995.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="830.1" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.19%)</title><rect x="828.5" y="979.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="831.5" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.19%)</title><rect x="828.5" y="963.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="831.5" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.12%)</title><rect x="828.5" y="947.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="831.5" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.08%)</title><rect x="828.9" y="931.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="831.9" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.08%)</title><rect x="828.9" y="915.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="831.9" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.08%)</title><rect x="829.9" y="947.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="832.9" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Value.compareTo (1 samples, 0.04%)</title><rect x="830.8" y="1059.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="833.8" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (35 samples, 1.36%)</title><rect x="831.2" y="1315.0" width="16.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="834.2" y="1326.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (34 samples, 1.32%)</title><rect x="831.7" y="1299.0" width="15.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="834.7" y="1310.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (32 samples, 1.24%)</title><rect x="832.6" y="1283.0" width="14.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="835.6" y="1294.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (1 samples, 0.04%)</title><rect x="833.1" y="1267.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="836.1" y="1278.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.04%)</title><rect x="833.1" y="1251.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="836.1" y="1262.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (1 samples, 0.04%)</title><rect x="833.1" y="1235.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="836.1" y="1246.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (1 samples, 0.04%)</title><rect x="833.1" y="1219.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="836.1" y="1230.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1 samples, 0.04%)</title><rect x="833.1" y="1203.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="836.1" y="1214.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.04%)</title><rect x="833.1" y="1187.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="836.1" y="1198.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.04%)</title><rect x="833.1" y="1171.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="836.1" y="1182.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (15 samples, 0.58%)</title><rect x="833.5" y="1267.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="836.5" y="1278.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (14 samples, 0.54%)</title><rect x="834.0" y="1251.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="837.0" y="1262.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (14 samples, 0.54%)</title><rect x="834.0" y="1235.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="837.0" y="1246.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (11 samples, 0.43%)</title><rect x="834.9" y="1219.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="837.9" y="1230.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (11 samples, 0.43%)</title><rect x="834.9" y="1203.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="837.9" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$74/1875785945.compare (11 samples, 0.43%)</title><rect x="834.9" y="1187.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="837.9" y="1198.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.compareTo (9 samples, 0.35%)</title><rect x="835.8" y="1171.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="838.8" y="1182.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (9 samples, 0.35%)</title><rect x="835.8" y="1155.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="838.8" y="1166.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (9 samples, 0.35%)</title><rect x="835.8" y="1139.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="838.8" y="1150.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (9 samples, 0.35%)</title><rect x="835.8" y="1123.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="838.8" y="1134.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (9 samples, 0.35%)</title><rect x="835.8" y="1107.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="838.8" y="1118.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1961113671.compare (8 samples, 0.31%)</title><rect x="836.3" y="1091.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="839.3" y="1102.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (8 samples, 0.31%)</title><rect x="836.3" y="1075.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="839.3" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.19%)</title><rect x="836.3" y="1059.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="839.3" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.19%)</title><rect x="836.3" y="1043.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="839.3" y="1054.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.19%)</title><rect x="836.3" y="1027.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="839.3" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (3 samples, 0.12%)</title><rect x="837.2" y="1011.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="840.2" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row$$Lambda$66/837197855.apply (3 samples, 0.12%)</title><rect x="838.6" y="1059.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="841.6" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (3 samples, 0.12%)</title><rect x="838.6" y="1043.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="841.6" y="1054.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.08%)</title><rect x="838.6" y="1027.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="841.6" y="1038.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.08%)</title><rect x="838.6" y="1011.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="841.6" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.08%)</title><rect x="838.6" y="995.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="841.6" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.04%)</title><rect x="838.6" y="979.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="841.6" y="990.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="839.0" y="979.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="842.0" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="839.0" y="963.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="842.0" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="839.0" y="947.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="842.0" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="839.0" y="931.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="842.0" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="839.0" y="915.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="842.0" y="926.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.04%)</title><rect x="839.5" y="1027.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="842.5" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.04%)</title><rect x="839.5" y="1011.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="842.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="839.5" y="995.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="842.5" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="839.5" y="979.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="842.5" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="839.5" y="963.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="842.5" y="974.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.04%)</title><rect x="839.5" y="947.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="842.5" y="958.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (1 samples, 0.04%)</title><rect x="839.9" y="1219.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="842.9" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="839.9" y="1203.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="842.9" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="839.9" y="1187.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="842.9" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="839.9" y="1171.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="842.9" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="839.9" y="1155.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="842.9" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="839.9" y="1139.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="842.9" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="839.9" y="1123.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="842.9" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="839.9" y="1107.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="842.9" y="1118.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (14 samples, 0.54%)</title><rect x="840.4" y="1267.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="843.4" y="1278.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (14 samples, 0.54%)</title><rect x="840.4" y="1251.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="843.4" y="1262.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (13 samples, 0.51%)</title><rect x="840.9" y="1235.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="843.9" y="1246.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (13 samples, 0.51%)</title><rect x="840.9" y="1219.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="843.9" y="1230.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13 samples, 0.51%)</title><rect x="840.9" y="1203.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="843.9" y="1214.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13 samples, 0.51%)</title><rect x="840.9" y="1187.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="843.9" y="1198.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (6 samples, 0.23%)</title><rect x="841.3" y="1171.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="844.3" y="1182.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable$SSTableIterator.next (6 samples, 0.23%)</title><rect x="841.3" y="1155.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="844.3" y="1166.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable$SSTableIterator.next (6 samples, 0.23%)</title><rect x="841.3" y="1139.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="844.3" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable$SSTableIterator.hasNext (1 samples, 0.04%)</title><rect x="841.3" y="1123.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="844.3" y="1134.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.transform (5 samples, 0.19%)</title><rect x="841.8" y="1123.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="844.8" y="1134.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.keyAt (2 samples, 0.08%)</title><rect x="841.8" y="1107.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="844.8" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.08%)</title><rect x="841.8" y="1091.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="844.8" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.08%)</title><rect x="841.8" y="1075.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="844.8" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.08%)</title><rect x="841.8" y="1059.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="844.8" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="841.8" y="1043.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="844.8" y="1054.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="841.8" y="1027.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="844.8" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="841.8" y="1011.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="844.8" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="841.8" y="995.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="844.8" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="841.8" y="979.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="844.8" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.04%)</title><rect x="841.8" y="963.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="844.8" y="974.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="842.2" y="963.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="845.2" y="974.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="842.2" y="947.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="845.2" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="842.2" y="931.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="845.2" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="842.2" y="915.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="845.2" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.rowAt (2 samples, 0.08%)</title><rect x="842.7" y="1107.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="845.7" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.08%)</title><rect x="842.7" y="1091.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="845.7" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.08%)</title><rect x="842.7" y="1075.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="845.7" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="842.7" y="1059.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="845.7" y="1070.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="842.7" y="1043.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="845.7" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="842.7" y="1027.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="845.7" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="842.7" y="1011.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="845.7" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="842.7" y="995.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="845.7" y="1006.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.08%)</title><rect x="842.7" y="979.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="845.7" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.08%)</title><rect x="842.7" y="963.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="845.7" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.08%)</title><rect x="842.7" y="947.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="845.7" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.valueAt (1 samples, 0.04%)</title><rect x="843.6" y="1107.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="846.6" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (1 samples, 0.04%)</title><rect x="843.6" y="1091.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="846.6" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.04%)</title><rect x="843.6" y="1075.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="846.6" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="843.6" y="1059.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="846.6" y="1070.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="843.6" y="1043.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="846.6" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="843.6" y="1027.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="846.6" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="843.6" y="1011.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="846.6" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="843.6" y="995.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="846.6" y="1006.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.04%)</title><rect x="843.6" y="979.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="846.6" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.04%)</title><rect x="843.6" y="963.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="846.6" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="843.6" y="947.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="846.6" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="843.6" y="931.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="846.6" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$74/1875785945.compare (6 samples, 0.23%)</title><rect x="844.1" y="1171.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="847.1" y="1182.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.compareTo (6 samples, 0.23%)</title><rect x="844.1" y="1155.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="847.1" y="1166.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (6 samples, 0.23%)</title><rect x="844.1" y="1139.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="847.1" y="1150.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (6 samples, 0.23%)</title><rect x="844.1" y="1123.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="847.1" y="1134.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (6 samples, 0.23%)</title><rect x="844.1" y="1107.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="847.1" y="1118.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (6 samples, 0.23%)</title><rect x="844.1" y="1091.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="847.1" y="1102.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1961113671.compare (5 samples, 0.19%)</title><rect x="844.5" y="1075.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="847.5" y="1086.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (5 samples, 0.19%)</title><rect x="844.5" y="1059.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="847.5" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.08%)</title><rect x="844.5" y="1043.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="847.5" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.08%)</title><rect x="844.5" y="1027.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="847.5" y="1038.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.04%)</title><rect x="845.0" y="1011.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="848.0" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row$$Lambda$66/837197855.apply (3 samples, 0.12%)</title><rect x="845.5" y="1043.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="848.5" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (3 samples, 0.12%)</title><rect x="845.5" y="1027.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="848.5" y="1038.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.04%)</title><rect x="845.5" y="1011.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="848.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.04%)</title><rect x="845.5" y="995.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="848.5" y="1006.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.04%)</title><rect x="845.5" y="979.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="848.5" y="990.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.08%)</title><rect x="845.9" y="1011.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="848.9" y="1022.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.08%)</title><rect x="845.9" y="995.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="848.9" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="845.9" y="979.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="848.9" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable$SSTableIterator.hasNext (1 samples, 0.04%)</title><rect x="846.8" y="1267.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="849.8" y="1278.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.iterator (2 samples, 0.08%)</title><rect x="847.3" y="1347.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="850.3" y="1358.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.transformRows (1 samples, 0.04%)</title><rect x="848.2" y="1363.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="851.2" y="1374.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (1 samples, 0.04%)</title><rect x="848.2" y="1347.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="851.2" y="1358.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (1 samples, 0.04%)</title><rect x="848.2" y="1331.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="851.2" y="1342.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.04%)</title><rect x="848.2" y="1315.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="851.2" y="1326.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1 samples, 0.04%)</title><rect x="848.2" y="1299.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="851.2" y="1310.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.04%)</title><rect x="848.2" y="1283.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="851.2" y="1294.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.04%)</title><rect x="848.2" y="1267.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="851.2" y="1278.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="848.2" y="1251.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="851.2" y="1262.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="848.2" y="1235.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="851.2" y="1246.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (509 samples, 19.79%)</title><rect x="848.7" y="1507.0" width="233.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="851.7" y="1518.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>_init (2 samples, 0.08%)</title><rect x="850.5" y="1491.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="853.5" y="1502.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2 samples, 0.08%)</title><rect x="851.4" y="1491.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="854.4" y="1502.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (127 samples, 4.94%)</title><rect x="852.3" y="1491.0" width="58.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="855.3" y="1502.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (115 samples, 4.47%)</title><rect x="857.8" y="1475.0" width="52.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="860.8" y="1486.0">one/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (3 samples, 0.12%)</title><rect x="862.9" y="1459.0" width="1.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="865.9" y="1470.0"></text>
</g>
<g>
<title>[unknown] (98 samples, 3.81%)</title><rect x="864.3" y="1459.0" width="44.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="867.3" y="1470.0">[unk..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.08%)</title><rect x="864.3" y="1443.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="867.3" y="1454.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.08%)</title><rect x="865.2" y="1443.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="868.2" y="1454.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.04%)</title><rect x="866.1" y="1443.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="869.1" y="1454.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.08%)</title><rect x="866.6" y="1443.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="869.6" y="1454.0"></text>
</g>
<g>
<title>epoll_wait (91 samples, 3.54%)</title><rect x="867.5" y="1443.0" width="41.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="870.5" y="1454.0">epo..</text>
</g>
<g>
<title>[unknown] (81 samples, 3.15%)</title><rect x="872.1" y="1427.0" width="37.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="875.1" y="1438.0">[un..</text>
</g>
<g>
<title>[unknown] (81 samples, 3.15%)</title><rect x="872.1" y="1411.0" width="37.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="875.1" y="1422.0">[un..</text>
</g>
<g>
<title>[unknown] (80 samples, 3.11%)</title><rect x="872.5" y="1395.0" width="36.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="875.5" y="1406.0">[un..</text>
</g>
<g>
<title>[unknown] (79 samples, 3.07%)</title><rect x="873.0" y="1379.0" width="36.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="876.0" y="1390.0">[un..</text>
</g>
<g>
<title>[unknown] (75 samples, 2.92%)</title><rect x="874.8" y="1363.0" width="34.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="877.8" y="1374.0">[u..</text>
</g>
<g>
<title>[unknown] (65 samples, 2.53%)</title><rect x="879.4" y="1347.0" width="29.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="882.4" y="1358.0">[u..</text>
</g>
<g>
<title>[unknown] (50 samples, 1.94%)</title><rect x="886.3" y="1331.0" width="22.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="889.3" y="1342.0">[..</text>
</g>
<g>
<title>[unknown] (37 samples, 1.44%)</title><rect x="892.2" y="1315.0" width="17.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="895.2" y="1326.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 1.32%)</title><rect x="893.6" y="1299.0" width="15.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="896.6" y="1310.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 1.05%)</title><rect x="896.8" y="1283.0" width="12.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="899.8" y="1294.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.16%)</title><rect x="907.4" y="1267.0" width="1.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="910.4" y="1278.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="908.3" y="1251.0" width="0.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="911.3" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="908.8" y="1235.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="911.8" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="908.8" y="1219.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="911.8" y="1230.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="909.2" y="1459.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="912.2" y="1470.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.08%)</title><rect x="909.7" y="1459.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="912.7" y="1470.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (372 samples, 14.46%)</title><rect x="910.6" y="1491.0" width="170.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="913.6" y="1502.0">one/nio/net/Session.pr..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (367 samples, 14.27%)</title><rect x="912.4" y="1475.0" width="168.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="915.4" y="1486.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (219 samples, 8.51%)</title><rect x="912.9" y="1459.0" width="100.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="915.9" y="1470.0">one/nio/http..</text>
</g>
<g>
<title>_new_array_Java (1 samples, 0.04%)</title><rect x="918.4" y="1443.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="921.4" y="1454.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (181 samples, 7.04%)</title><rect x="918.9" y="1443.0" width="83.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="921.9" y="1454.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (181 samples, 7.04%)</title><rect x="918.9" y="1427.0" width="83.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="921.9" y="1438.0">one/nio/h..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (159 samples, 6.18%)</title><rect x="919.3" y="1411.0" width="73.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="922.3" y="1422.0">RequestH..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (12 samples, 0.47%)</title><rect x="919.8" y="1395.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="922.8" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.04%)</title><rect x="921.2" y="1379.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="924.2" y="1390.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="921.2" y="1363.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="924.2" y="1374.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.entity (1 samples, 0.04%)</title><rect x="921.2" y="1347.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="924.2" y="1358.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.04%)</title><rect x="921.6" y="1379.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="924.6" y="1390.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.08%)</title><rect x="922.1" y="1379.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="925.1" y="1390.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (5 samples, 0.19%)</title><rect x="923.0" y="1379.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="926.0" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.04%)</title><rect x="924.8" y="1363.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="927.8" y="1374.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.04%)</title><rect x="924.8" y="1347.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="927.8" y="1358.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.04%)</title><rect x="924.8" y="1331.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="927.8" y="1342.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.12%)</title><rect x="925.3" y="1395.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="928.3" y="1406.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.entity (143 samples, 5.56%)</title><rect x="926.7" y="1395.0" width="65.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="929.7" y="1406.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.executeAsync (143 samples, 5.56%)</title><rect x="926.7" y="1379.0" width="65.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="929.7" y="1390.0">ru/mail..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (136 samples, 5.29%)</title><rect x="929.9" y="1363.0" width="62.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="932.9" y="1374.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (134 samples, 5.21%)</title><rect x="930.8" y="1347.0" width="61.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="933.8" y="1358.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (112 samples, 4.35%)</title><rect x="930.8" y="1331.0" width="51.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="933.8" y="1342.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.19%)</title><rect x="930.8" y="1315.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="933.8" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 0.19%)</title><rect x="930.8" y="1299.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="933.8" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 0.19%)</title><rect x="930.8" y="1283.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="933.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (107 samples, 4.16%)</title><rect x="933.1" y="1315.0" width="49.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="936.1" y="1326.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (107 samples, 4.16%)</title><rect x="933.1" y="1299.0" width="49.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="936.1" y="1310.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (107 samples, 4.16%)</title><rect x="933.1" y="1283.0" width="49.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="936.1" y="1294.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (107 samples, 4.16%)</title><rect x="933.1" y="1267.0" width="49.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="936.1" y="1278.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (106 samples, 4.12%)</title><rect x="933.5" y="1251.0" width="48.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="936.5" y="1262.0">jdk/..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.04%)</title><rect x="934.0" y="1235.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="937.0" y="1246.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.08%)</title><rect x="934.5" y="1235.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="937.5" y="1246.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.04%)</title><rect x="935.4" y="1235.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="938.4" y="1246.0"></text>
</g>
<g>
<title>Unsafe_Unpark (18 samples, 0.70%)</title><rect x="935.8" y="1235.0" width="8.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="938.8" y="1246.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (2 samples, 0.08%)</title><rect x="937.7" y="1219.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="940.7" y="1230.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.12%)</title><rect x="938.6" y="1219.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="941.6" y="1230.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.04%)</title><rect x="940.0" y="1219.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="943.0" y="1230.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (5 samples, 0.19%)</title><rect x="940.4" y="1219.0" width="2.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="943.4" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.04%)</title><rect x="942.7" y="1219.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="945.7" y="1230.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.08%)</title><rect x="943.2" y="1219.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="946.2" y="1230.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.08%)</title><rect x="944.1" y="1235.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="947.1" y="1246.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.12%)</title><rect x="945.0" y="1235.0" width="1.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="948.0" y="1246.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (78 samples, 3.03%)</title><rect x="946.4" y="1235.0" width="35.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="949.4" y="1246.0">pth..</text>
</g>
<g>
<title>[unknown] (66 samples, 2.57%)</title><rect x="951.9" y="1219.0" width="30.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="954.9" y="1230.0">[u..</text>
</g>
<g>
<title>[unknown] (66 samples, 2.57%)</title><rect x="951.9" y="1203.0" width="30.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="954.9" y="1214.0">[u..</text>
</g>
<g>
<title>[unknown] (61 samples, 2.37%)</title><rect x="954.2" y="1187.0" width="28.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="957.2" y="1198.0">[..</text>
</g>
<g>
<title>[unknown] (61 samples, 2.37%)</title><rect x="954.2" y="1171.0" width="28.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="957.2" y="1182.0">[..</text>
</g>
<g>
<title>[unknown] (59 samples, 2.29%)</title><rect x="955.1" y="1155.0" width="27.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="958.1" y="1166.0">[..</text>
</g>
<g>
<title>[unknown] (41 samples, 1.59%)</title><rect x="963.4" y="1139.0" width="18.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="966.4" y="1150.0"></text>
</g>
<g>
<title>[unknown] (37 samples, 1.44%)</title><rect x="965.2" y="1123.0" width="17.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="968.2" y="1134.0"></text>
</g>
<g>
<title>[unknown] (35 samples, 1.36%)</title><rect x="966.1" y="1107.0" width="16.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="969.1" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="981.7" y="1091.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="984.7" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="981.7" y="1075.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="984.7" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="981.7" y="1059.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="984.7" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="981.7" y="1043.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="984.7" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="981.7" y="1027.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="984.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.12%)</title><rect x="982.2" y="1331.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="985.2" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.12%)</title><rect x="982.2" y="1315.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="985.2" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.12%)</title><rect x="982.2" y="1299.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="985.2" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 0.74%)</title><rect x="983.5" y="1331.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="986.5" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 0.74%)</title><rect x="983.5" y="1315.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="986.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 0.74%)</title><rect x="983.5" y="1299.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="986.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 0.74%)</title><rect x="983.5" y="1283.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="986.5" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="991.8" y="1267.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="994.8" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="991.8" y="1251.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="994.8" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="991.8" y="1235.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="994.8" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="991.8" y="1219.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="994.8" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="991.8" y="1203.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="994.8" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="991.8" y="1187.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="994.8" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="991.8" y="1171.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="994.8" y="1182.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (21 samples, 0.82%)</title><rect x="992.3" y="1411.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="995.3" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap.get (21 samples, 0.82%)</title><rect x="992.3" y="1395.0" width="9.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="995.3" y="1406.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.16%)</title><rect x="992.3" y="1379.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="995.3" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (17 samples, 0.66%)</title><rect x="994.1" y="1379.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="997.1" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (17 samples, 0.66%)</title><rect x="994.1" y="1363.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="997.1" y="1374.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (17 samples, 0.66%)</title><rect x="994.1" y="1347.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="997.1" y="1358.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.12%)</title><rect x="999.6" y="1331.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1002.6" y="1342.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.08%)</title><rect x="1001.0" y="1331.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1004.0" y="1342.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (14 samples, 0.54%)</title><rect x="1001.9" y="1443.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1004.9" y="1454.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1004.2" y="1427.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1007.2" y="1438.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.04%)</title><rect x="1004.2" y="1411.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1007.2" y="1422.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.04%)</title><rect x="1004.2" y="1395.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1007.2" y="1406.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.04%)</title><rect x="1004.2" y="1379.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1007.2" y="1390.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.19%)</title><rect x="1004.7" y="1427.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1007.7" y="1438.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.19%)</title><rect x="1004.7" y="1411.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1007.7" y="1422.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.12%)</title><rect x="1006.9" y="1427.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1009.9" y="1438.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.23%)</title><rect x="1008.3" y="1443.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1011.3" y="1454.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.19%)</title><rect x="1011.1" y="1443.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1014.1" y="1454.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1 samples, 0.04%)</title><rect x="1011.1" y="1427.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1014.1" y="1438.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.16%)</title><rect x="1011.5" y="1427.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1014.5" y="1438.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (3 samples, 0.12%)</title><rect x="1013.4" y="1459.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1016.4" y="1470.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1014.3" y="1443.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1017.3" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1014.3" y="1427.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1017.3" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1014.3" y="1411.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1017.3" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1014.3" y="1395.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1017.3" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1014.3" y="1379.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1017.3" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1014.3" y="1363.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1017.3" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1014.3" y="1347.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1017.3" y="1358.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (144 samples, 5.60%)</title><rect x="1014.7" y="1459.0" width="66.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1017.7" y="1470.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (141 samples, 5.48%)</title><rect x="1016.1" y="1443.0" width="64.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1019.1" y="1454.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.08%)</title><rect x="1017.0" y="1427.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1020.0" y="1438.0"></text>
</g>
<g>
<title>[unknown] (46 samples, 1.79%)</title><rect x="1018.0" y="1427.0" width="21.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1021.0" y="1438.0">[..</text>
</g>
<g>
<title>[unknown] (46 samples, 1.79%)</title><rect x="1018.0" y="1411.0" width="21.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1021.0" y="1422.0">[..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (35 samples, 1.36%)</title><rect x="1018.0" y="1395.0" width="16.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1021.0" y="1406.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.12%)</title><rect x="1020.7" y="1379.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1023.7" y="1390.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.08%)</title><rect x="1022.1" y="1379.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1025.1" y="1390.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (3 samples, 0.12%)</title><rect x="1023.0" y="1379.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1026.0" y="1390.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (4 samples, 0.16%)</title><rect x="1024.4" y="1379.0" width="1.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1027.4" y="1390.0"></text>
</g>
<g>
<title>_init (2 samples, 0.08%)</title><rect x="1026.2" y="1379.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1029.2" y="1390.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.08%)</title><rect x="1027.1" y="1379.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1030.1" y="1390.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (11 samples, 0.43%)</title><rect x="1028.0" y="1379.0" width="5.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1031.0" y="1390.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="1029.4" y="1363.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1032.4" y="1374.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (4 samples, 0.16%)</title><rect x="1029.9" y="1363.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1032.9" y="1374.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.12%)</title><rect x="1031.7" y="1363.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1034.7" y="1374.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="1032.6" y="1347.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1035.6" y="1358.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.08%)</title><rect x="1033.1" y="1379.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1036.1" y="1390.0"></text>
</g>
<g>
<title>__GI___recv (4 samples, 0.16%)</title><rect x="1034.0" y="1395.0" width="1.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1037.0" y="1406.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.08%)</title><rect x="1035.8" y="1395.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1038.8" y="1406.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (5 samples, 0.19%)</title><rect x="1036.8" y="1395.0" width="2.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1039.8" y="1406.0"></text>
</g>
<g>
<title>__GI___recv (91 samples, 3.54%)</title><rect x="1039.1" y="1427.0" width="41.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1042.1" y="1438.0">__G..</text>
</g>
<g>
<title>[unknown] (88 samples, 3.42%)</title><rect x="1040.4" y="1411.0" width="40.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1043.4" y="1422.0">[un..</text>
</g>
<g>
<title>[unknown] (88 samples, 3.42%)</title><rect x="1040.4" y="1395.0" width="40.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1043.4" y="1406.0">[un..</text>
</g>
<g>
<title>[unknown] (81 samples, 3.15%)</title><rect x="1043.6" y="1379.0" width="37.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1046.6" y="1390.0">[un..</text>
</g>
<g>
<title>[unknown] (78 samples, 3.03%)</title><rect x="1045.0" y="1363.0" width="35.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1048.0" y="1374.0">[un..</text>
</g>
<g>
<title>[unknown] (74 samples, 2.88%)</title><rect x="1046.9" y="1347.0" width="33.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1049.9" y="1358.0">[u..</text>
</g>
<g>
<title>[unknown] (73 samples, 2.84%)</title><rect x="1047.3" y="1331.0" width="33.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1050.3" y="1342.0">[u..</text>
</g>
<g>
<title>[unknown] (70 samples, 2.72%)</title><rect x="1048.7" y="1315.0" width="32.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1051.7" y="1326.0">[u..</text>
</g>
<g>
<title>[unknown] (56 samples, 2.18%)</title><rect x="1055.1" y="1299.0" width="25.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1058.1" y="1310.0">[..</text>
</g>
<g>
<title>[unknown] (47 samples, 1.83%)</title><rect x="1059.2" y="1283.0" width="21.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1062.2" y="1294.0">[..</text>
</g>
<g>
<title>[unknown] (29 samples, 1.13%)</title><rect x="1067.5" y="1267.0" width="13.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1070.5" y="1278.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.89%)</title><rect x="1070.3" y="1251.0" width="10.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1073.3" y="1262.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.35%)</title><rect x="1076.7" y="1235.0" width="4.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1079.7" y="1246.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (1 samples, 0.04%)</title><rect x="1080.8" y="1475.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1083.8" y="1486.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.08%)</title><rect x="1081.3" y="1491.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1084.3" y="1502.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="1081.7" y="1475.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1084.7" y="1486.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (2 samples, 0.08%)</title><rect x="1082.2" y="1507.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1085.2" y="1518.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.04%)</title><rect x="1083.1" y="1507.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1086.1" y="1518.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1083.1" y="1491.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1086.1" y="1502.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1083.1" y="1475.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1086.1" y="1486.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1083.1" y="1459.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1086.1" y="1470.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1083.1" y="1443.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1086.1" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1083.1" y="1427.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1086.1" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1083.1" y="1411.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1086.1" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1083.1" y="1395.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1086.1" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1083.1" y="1379.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1086.1" y="1390.0"></text>
</g>
<g>
<title>start_thread (232 samples, 9.02%)</title><rect x="1083.6" y="1507.0" width="106.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1086.6" y="1518.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (232 samples, 9.02%)</title><rect x="1083.6" y="1491.0" width="106.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1086.6" y="1502.0">thread_native..</text>
</g>
<g>
<title>Thread::call_run() (232 samples, 9.02%)</title><rect x="1083.6" y="1475.0" width="106.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1086.6" y="1486.0">Thread::call_..</text>
</g>
<g>
<title>GangWorker::loop() (47 samples, 1.83%)</title><rect x="1083.6" y="1459.0" width="21.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1086.6" y="1470.0">G..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (2 samples, 0.08%)</title><rect x="1083.6" y="1443.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1086.6" y="1454.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (2 samples, 0.08%)</title><rect x="1083.6" y="1427.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1086.6" y="1438.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (2 samples, 0.08%)</title><rect x="1083.6" y="1411.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1086.6" y="1422.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.154] (2 samples, 0.08%)</title><rect x="1083.6" y="1395.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1086.6" y="1406.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (2 samples, 0.08%)</title><rect x="1083.6" y="1379.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1086.6" y="1390.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1083.6" y="1363.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1086.6" y="1374.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.04%)</title><rect x="1083.6" y="1347.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1086.6" y="1358.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.04%)</title><rect x="1083.6" y="1331.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1086.6" y="1342.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1084.0" y="1363.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1087.0" y="1374.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.04%)</title><rect x="1084.0" y="1347.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.0" y="1358.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="1084.5" y="1443.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1087.5" y="1454.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (1 samples, 0.04%)</title><rect x="1084.5" y="1427.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1087.5" y="1438.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="1084.5" y="1411.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1087.5" y="1422.0"></text>
</g>
<g>
<title>G1ClearBitMapTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="1084.9" y="1443.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.9" y="1454.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (1 samples, 0.04%)</title><rect x="1084.9" y="1427.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1087.9" y="1438.0"></text>
</g>
<g>
<title>G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*) (1 samples, 0.04%)</title><rect x="1084.9" y="1411.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1087.9" y="1422.0"></text>
</g>
<g>
<title>G1CMBitMap::clear_range(MemRegion) (1 samples, 0.04%)</title><rect x="1084.9" y="1395.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1087.9" y="1406.0"></text>
</g>
<g>
<title>__memset_erms (1 samples, 0.04%)</title><rect x="1084.9" y="1379.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1087.9" y="1390.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (41 samples, 1.59%)</title><rect x="1085.4" y="1443.0" width="18.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1088.4" y="1454.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (37 samples, 1.44%)</title><rect x="1085.4" y="1427.0" width="17.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1088.4" y="1438.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 0.19%)</title><rect x="1085.4" y="1411.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1088.4" y="1422.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.04%)</title><rect x="1087.2" y="1395.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.2" y="1406.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.04%)</title><rect x="1087.7" y="1411.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.7" y="1422.0"></text>
</g>
<g>
<title>SpinPause (31 samples, 1.21%)</title><rect x="1088.1" y="1411.0" width="14.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1091.1" y="1422.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.04%)</title><rect x="1102.4" y="1427.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1105.4" y="1438.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.04%)</title><rect x="1102.4" y="1411.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1105.4" y="1422.0"></text>
</g>
<g>
<title>G1HotCardCache::drain(CardTableEntryClosure*, unsigned int) (1 samples, 0.04%)</title><rect x="1102.4" y="1395.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.4" y="1406.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (3 samples, 0.12%)</title><rect x="1102.8" y="1427.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.8" y="1438.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.12%)</title><rect x="1102.8" y="1411.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.8" y="1422.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (3 samples, 0.12%)</title><rect x="1102.8" y="1395.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.8" y="1406.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (3 samples, 0.12%)</title><rect x="1102.8" y="1379.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.8" y="1390.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.04%)</title><rect x="1102.8" y="1363.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1105.8" y="1374.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.04%)</title><rect x="1102.8" y="1347.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1105.8" y="1358.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.04%)</title><rect x="1103.3" y="1363.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.3" y="1374.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (1 samples, 0.04%)</title><rect x="1103.3" y="1347.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1106.3" y="1358.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.04%)</title><rect x="1103.3" y="1331.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1106.3" y="1342.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.04%)</title><rect x="1103.3" y="1315.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.3" y="1326.0"></text>
</g>
<g>
<title>metadata_Relocation::unpack_data() (1 samples, 0.04%)</title><rect x="1103.7" y="1363.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1106.7" y="1374.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="1104.2" y="1443.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.2" y="1454.0"></text>
</g>
<g>
<title>CompiledMethod::do_unloading_parallel(BoolObjectClosure*, bool) (1 samples, 0.04%)</title><rect x="1104.2" y="1427.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.2" y="1438.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool, bool) (1 samples, 0.04%)</title><rect x="1104.2" y="1411.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1107.2" y="1422.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="1104.7" y="1443.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1107.7" y="1454.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.04%)</title><rect x="1104.7" y="1427.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.7" y="1438.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.67] (1 samples, 0.04%)</title><rect x="1104.7" y="1411.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.7" y="1422.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.04%)</title><rect x="1104.7" y="1395.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.7" y="1406.0"></text>
</g>
<g>
<title>JavaThread::run() (179 samples, 6.96%)</title><rect x="1105.1" y="1459.0" width="82.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1108.1" y="1470.0">JavaThrea..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (179 samples, 6.96%)</title><rect x="1105.1" y="1443.0" width="82.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.1" y="1454.0">JavaThrea..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (178 samples, 6.92%)</title><rect x="1105.1" y="1427.0" width="81.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.1" y="1438.0">CompileBr..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (178 samples, 6.92%)</title><rect x="1105.1" y="1411.0" width="81.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.1" y="1422.0">CompileBr..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (177 samples, 6.88%)</title><rect x="1105.1" y="1395.0" width="81.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.1" y="1406.0">C2Compile..</text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.04%)</title><rect x="1105.1" y="1379.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1108.1" y="1390.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (176 samples, 6.84%)</title><rect x="1105.6" y="1379.0" width="80.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.6" y="1390.0">Compile::..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.04%)</title><rect x="1105.6" y="1363.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1108.6" y="1374.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.04%)</title><rect x="1105.6" y="1347.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1108.6" y="1358.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.04%)</title><rect x="1105.6" y="1331.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1108.6" y="1342.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.04%)</title><rect x="1105.6" y="1315.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.6" y="1326.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.04%)</title><rect x="1105.6" y="1299.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1108.6" y="1310.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1105.6" y="1283.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1108.6" y="1294.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1105.6" y="1267.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.6" y="1278.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.04%)</title><rect x="1105.6" y="1251.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.6" y="1262.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.04%)</title><rect x="1105.6" y="1235.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.6" y="1246.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1105.6" y="1219.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.6" y="1230.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1105.6" y="1203.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1108.6" y="1214.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1105.6" y="1187.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.6" y="1198.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.04%)</title><rect x="1105.6" y="1171.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.6" y="1182.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(LinkInfo const&amp;) (1 samples, 0.04%)</title><rect x="1105.6" y="1155.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1108.6" y="1166.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.04%)</title><rect x="1105.6" y="1139.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.6" y="1150.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.04%)</title><rect x="1105.6" y="1123.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1108.6" y="1134.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (115 samples, 4.47%)</title><rect x="1106.0" y="1363.0" width="52.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.0" y="1374.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.16%)</title><rect x="1106.0" y="1347.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1109.0" y="1358.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.08%)</title><rect x="1106.0" y="1331.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.0" y="1342.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.04%)</title><rect x="1106.5" y="1315.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.5" y="1326.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.08%)</title><rect x="1107.0" y="1331.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1110.0" y="1342.0"></text>
</g>
<g>
<title>Block::code_alignment() const (1 samples, 0.04%)</title><rect x="1107.0" y="1315.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.0" y="1326.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.04%)</title><rect x="1107.4" y="1315.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1110.4" y="1326.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.04%)</title><rect x="1107.9" y="1347.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.9" y="1358.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.04%)</title><rect x="1108.3" y="1347.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1111.3" y="1358.0"></text>
</g>
<g>
<title>Matcher::match() (8 samples, 0.31%)</title><rect x="1108.8" y="1347.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.8" y="1358.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.04%)</title><rect x="1108.8" y="1331.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.8" y="1342.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.08%)</title><rect x="1109.3" y="1331.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.3" y="1342.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.19%)</title><rect x="1110.2" y="1331.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.2" y="1342.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.04%)</title><rect x="1110.6" y="1315.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.6" y="1326.0"></text>
</g>
<g>
<title>Matcher::collect_null_checks(Node*, Node*) (2 samples, 0.08%)</title><rect x="1111.1" y="1315.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1114.1" y="1326.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.04%)</title><rect x="1112.0" y="1315.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.0" y="1326.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.04%)</title><rect x="1112.0" y="1299.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.0" y="1310.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.04%)</title><rect x="1112.0" y="1283.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1115.0" y="1294.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.04%)</title><rect x="1112.0" y="1267.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.0" y="1278.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.04%)</title><rect x="1112.0" y="1251.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.0" y="1262.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.04%)</title><rect x="1112.5" y="1347.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1115.5" y="1358.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.04%)</title><rect x="1112.5" y="1331.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.5" y="1342.0"></text>
</g>
<g>
<title>Block::num_fall_throughs() (1 samples, 0.04%)</title><rect x="1112.5" y="1315.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1115.5" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.04%)</title><rect x="1112.9" y="1347.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.9" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.04%)</title><rect x="1112.9" y="1331.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.9" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (14 samples, 0.54%)</title><rect x="1113.4" y="1347.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.4" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (14 samples, 0.54%)</title><rect x="1113.4" y="1331.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.4" y="1342.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.04%)</title><rect x="1113.4" y="1315.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.4" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.04%)</title><rect x="1113.8" y="1315.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.8" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.08%)</title><rect x="1114.3" y="1315.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.3" y="1326.0"></text>
</g>
<g>
<title>Node::is_block_proj() const (1 samples, 0.04%)</title><rect x="1114.8" y="1299.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.8" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (3 samples, 0.12%)</title><rect x="1115.2" y="1315.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1118.2" y="1326.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.04%)</title><rect x="1116.1" y="1299.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1119.1" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (3 samples, 0.12%)</title><rect x="1116.6" y="1315.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1119.6" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.04%)</title><rect x="1117.5" y="1299.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1120.5" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::PhaseChaitin(unsigned int, PhaseCFG&amp;, Matcher&amp;, bool) (1 samples, 0.04%)</title><rect x="1118.0" y="1315.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.0" y="1326.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.12%)</title><rect x="1118.4" y="1315.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.4" y="1326.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.04%)</title><rect x="1118.9" y="1299.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.9" y="1310.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.04%)</title><rect x="1119.3" y="1299.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.3" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (85 samples, 3.30%)</title><rect x="1119.8" y="1347.0" width="39.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.8" y="1358.0">Pha..</text>
</g>
<g>
<title>JVMState::debug_start() const (2 samples, 0.08%)</title><rect x="1119.8" y="1331.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.8" y="1342.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.04%)</title><rect x="1120.7" y="1331.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1123.7" y="1342.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (6 samples, 0.23%)</title><rect x="1121.2" y="1331.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1124.2" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.19%)</title><rect x="1123.9" y="1331.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.9" y="1342.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.04%)</title><rect x="1125.8" y="1315.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.8" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="1125.8" y="1299.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.8" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.16%)</title><rect x="1126.2" y="1331.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.2" y="1342.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.16%)</title><rect x="1126.2" y="1315.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.2" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="1127.6" y="1299.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.6" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 0.31%)</title><rect x="1128.1" y="1331.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.1" y="1342.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.04%)</title><rect x="1131.3" y="1315.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.3" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.04%)</title><rect x="1131.7" y="1331.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.7" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (14 samples, 0.54%)</title><rect x="1132.2" y="1331.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.2" y="1342.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.08%)</title><rect x="1133.1" y="1315.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.1" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="1134.0" y="1315.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.0" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.04%)</title><rect x="1134.5" y="1315.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.5" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.12%)</title><rect x="1134.9" y="1315.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.9" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (4 samples, 0.16%)</title><rect x="1136.3" y="1315.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.3" y="1326.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.08%)</title><rect x="1136.3" y="1299.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.3" y="1310.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.08%)</title><rect x="1137.2" y="1299.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.2" y="1310.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.04%)</title><rect x="1138.2" y="1315.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1141.2" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.04%)</title><rect x="1138.6" y="1331.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.6" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.23%)</title><rect x="1139.1" y="1331.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1142.1" y="1342.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.08%)</title><rect x="1140.5" y="1315.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.5" y="1326.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.04%)</title><rect x="1141.4" y="1315.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.4" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.82] (1 samples, 0.04%)</title><rect x="1141.8" y="1331.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.8" y="1342.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.04%)</title><rect x="1141.8" y="1315.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.8" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.04%)</title><rect x="1142.3" y="1331.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.3" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.08%)</title><rect x="1142.7" y="1331.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.7" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (12 samples, 0.47%)</title><rect x="1143.7" y="1331.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.7" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.19%)</title><rect x="1146.4" y="1315.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.4" y="1326.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.04%)</title><rect x="1148.3" y="1299.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.3" y="1310.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.04%)</title><rect x="1148.7" y="1315.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1151.7" y="1326.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (6 samples, 0.23%)</title><rect x="1149.2" y="1331.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.2" y="1342.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (6 samples, 0.23%)</title><rect x="1149.2" y="1315.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.2" y="1326.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.08%)</title><rect x="1149.2" y="1299.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.2" y="1310.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 0.16%)</title><rect x="1150.1" y="1299.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.1" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="1151.5" y="1283.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.5" y="1294.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.16%)</title><rect x="1151.9" y="1331.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.9" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.08%)</title><rect x="1152.8" y="1315.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.8" y="1326.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.08%)</title><rect x="1153.8" y="1331.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.8" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="1154.2" y="1315.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.2" y="1326.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.23%)</title><rect x="1154.7" y="1331.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.7" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="1155.6" y="1315.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.6" y="1326.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.12%)</title><rect x="1156.0" y="1315.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.0" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="1157.0" y="1299.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.0" y="1310.0"></text>
</g>
<g>
<title>checkCastPPNode::ideal_Opcode() const (1 samples, 0.04%)</title><rect x="1157.4" y="1331.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.4" y="1342.0"></text>
</g>
<g>
<title>loadLNode::oper_input_base() const (1 samples, 0.04%)</title><rect x="1157.9" y="1331.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.9" y="1342.0"></text>
</g>
<g>
<title>xorL_rRegNode::cisc_operand() const (1 samples, 0.04%)</title><rect x="1158.3" y="1331.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.3" y="1342.0"></text>
</g>
<g>
<title>Compile::Optimize() (37 samples, 1.44%)</title><rect x="1158.8" y="1363.0" width="17.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.8" y="1374.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (2 samples, 0.08%)</title><rect x="1158.8" y="1347.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.8" y="1358.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (2 samples, 0.08%)</title><rect x="1158.8" y="1331.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.8" y="1342.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.08%)</title><rect x="1158.8" y="1315.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.8" y="1326.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.04%)</title><rect x="1158.8" y="1299.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.8" y="1310.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.04%)</title><rect x="1159.3" y="1299.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.3" y="1310.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.256] (2 samples, 0.08%)</title><rect x="1159.7" y="1347.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.7" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.04%)</title><rect x="1160.6" y="1347.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.6" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.04%)</title><rect x="1160.6" y="1331.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.6" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1160.6" y="1315.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.6" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) [clone .constprop.247] (1 samples, 0.04%)</title><rect x="1160.6" y="1299.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.6" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.04%)</title><rect x="1160.6" y="1283.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.6" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*) (1 samples, 0.04%)</title><rect x="1160.6" y="1267.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.6" y="1278.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.08%)</title><rect x="1161.1" y="1347.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.1" y="1358.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.04%)</title><rect x="1161.1" y="1331.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.1" y="1342.0"></text>
</g>
<g>
<title>countedloop_phi_from_cmp(CmpINode*, Node*) (1 samples, 0.04%)</title><rect x="1161.6" y="1331.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1164.6" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (20 samples, 0.78%)</title><rect x="1162.0" y="1347.0" width="9.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.0" y="1358.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.04%)</title><rect x="1162.0" y="1331.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.0" y="1342.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1162.5" y="1331.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.5" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.73] (1 samples, 0.04%)</title><rect x="1162.5" y="1315.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.5" y="1326.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.04%)</title><rect x="1162.5" y="1299.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.5" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.19%)</title><rect x="1162.9" y="1331.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.9" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.12%)</title><rect x="1165.2" y="1331.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.2" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.04%)</title><rect x="1166.1" y="1315.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.1" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.27%)</title><rect x="1166.6" y="1331.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.6" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 0.12%)</title><rect x="1168.4" y="1315.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.4" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.12%)</title><rect x="1168.4" y="1299.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.4" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.08%)</title><rect x="1168.9" y="1283.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.9" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1169.4" y="1267.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.4" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.04%)</title><rect x="1169.8" y="1331.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.8" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.04%)</title><rect x="1170.3" y="1331.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.3" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.04%)</title><rect x="1170.3" y="1315.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.3" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.04%)</title><rect x="1170.3" y="1299.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.3" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.04%)</title><rect x="1170.3" y="1283.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.3" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.04%)</title><rect x="1170.7" y="1331.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.7" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.04%)</title><rect x="1170.7" y="1315.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.7" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1170.7" y="1299.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.7" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.04%)</title><rect x="1170.7" y="1283.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.7" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.27%)</title><rect x="1171.2" y="1347.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.2" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.27%)</title><rect x="1171.2" y="1331.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.2" y="1342.0"></text>
</g>
<g>
<title>LShiftLNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1171.6" y="1315.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.6" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.04%)</title><rect x="1171.6" y="1299.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.6" y="1310.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="1171.6" y="1283.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.6" y="1294.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.04%)</title><rect x="1171.6" y="1267.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.6" y="1278.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.04%)</title><rect x="1171.6" y="1251.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.6" y="1262.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.04%)</title><rect x="1171.6" y="1235.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.6" y="1246.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.08%)</title><rect x="1172.1" y="1315.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.1" y="1326.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1172.1" y="1299.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.1" y="1310.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.04%)</title><rect x="1172.1" y="1283.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.1" y="1294.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.04%)</title><rect x="1172.1" y="1267.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.1" y="1278.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.04%)</title><rect x="1172.6" y="1299.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="1310.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.129] (1 samples, 0.04%)</title><rect x="1172.6" y="1283.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="1294.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1172.6" y="1267.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.6" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1173.0" y="1315.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.0" y="1326.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.04%)</title><rect x="1173.0" y="1299.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.0" y="1310.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.08%)</title><rect x="1173.5" y="1315.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.5" y="1326.0"></text>
</g>
<g>
<title>PhiNode::is_diamond_phi(bool) const (1 samples, 0.04%)</title><rect x="1173.9" y="1299.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.9" y="1310.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.04%)</title><rect x="1174.4" y="1347.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.4" y="1358.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.04%)</title><rect x="1174.4" y="1331.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.4" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1174.4" y="1315.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.4" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.04%)</title><rect x="1174.4" y="1299.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.4" y="1310.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.04%)</title><rect x="1174.4" y="1283.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.4" y="1294.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.08%)</title><rect x="1174.9" y="1347.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.9" y="1358.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.08%)</title><rect x="1174.9" y="1331.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.9" y="1342.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.04%)</title><rect x="1174.9" y="1315.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.9" y="1326.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.04%)</title><rect x="1175.3" y="1315.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.3" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (21 samples, 0.82%)</title><rect x="1175.8" y="1363.0" width="9.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.8" y="1374.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (21 samples, 0.82%)</title><rect x="1175.8" y="1347.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (21 samples, 0.82%)</title><rect x="1175.8" y="1331.0" width="9.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.8" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_block() (21 samples, 0.82%)</title><rect x="1175.8" y="1315.0" width="9.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.8" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (21 samples, 0.82%)</title><rect x="1175.8" y="1299.0" width="9.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.8" y="1310.0"></text>
</g>
<g>
<title>Parse::do_call() (21 samples, 0.82%)</title><rect x="1175.8" y="1283.0" width="9.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.8" y="1294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.31%)</title><rect x="1175.8" y="1267.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.8" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.31%)</title><rect x="1175.8" y="1251.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.31%)</title><rect x="1175.8" y="1235.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.8" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.31%)</title><rect x="1175.8" y="1219.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.8" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.31%)</title><rect x="1175.8" y="1203.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.27%)</title><rect x="1175.8" y="1187.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.8" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.23%)</title><rect x="1175.8" y="1171.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.8" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.23%)</title><rect x="1175.8" y="1155.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.23%)</title><rect x="1175.8" y="1139.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.8" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.23%)</title><rect x="1175.8" y="1123.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.8" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.23%)</title><rect x="1175.8" y="1107.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.19%)</title><rect x="1175.8" y="1091.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.8" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.16%)</title><rect x="1175.8" y="1075.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.8" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.16%)</title><rect x="1175.8" y="1059.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.16%)</title><rect x="1175.8" y="1043.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.16%)</title><rect x="1175.8" y="1027.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.16%)</title><rect x="1175.8" y="1011.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.12%)</title><rect x="1175.8" y="995.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.8" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.12%)</title><rect x="1175.8" y="979.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.8" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.12%)</title><rect x="1175.8" y="963.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.12%)</title><rect x="1175.8" y="947.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.12%)</title><rect x="1175.8" y="931.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.12%)</title><rect x="1175.8" y="915.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.08%)</title><rect x="1175.8" y="899.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.8" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.08%)</title><rect x="1175.8" y="883.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.8" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.08%)</title><rect x="1175.8" y="867.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.08%)</title><rect x="1175.8" y="851.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.08%)</title><rect x="1175.8" y="835.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.08%)</title><rect x="1175.8" y="819.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.08%)</title><rect x="1175.8" y="803.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.8" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.08%)</title><rect x="1175.8" y="787.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.8" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.08%)</title><rect x="1175.8" y="771.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.8" y="782.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.04%)</title><rect x="1175.8" y="755.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.8" y="766.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1175.8" y="739.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.8" y="750.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1175.8" y="723.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.8" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1175.8" y="707.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.8" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1175.8" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.8" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1175.8" y="675.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.8" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::get_unloaded_klass(ciKlass*, ciSymbol*, bool) (1 samples, 0.04%)</title><rect x="1175.8" y="659.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1176.2" y="755.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1176.2" y="739.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1176.2" y="723.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1176.2" y="707.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.2" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1176.2" y="691.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.2" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1176.2" y="675.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1176.2" y="659.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1176.2" y="643.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1176.2" y="627.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1176.2" y="611.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1176.2" y="595.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.2" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1176.2" y="579.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1176.2" y="563.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1176.2" y="547.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1176.2" y="531.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1176.2" y="515.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.2" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.04%)</title><rect x="1176.2" y="499.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.2" y="510.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1176.2" y="483.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.04%)</title><rect x="1176.7" y="899.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.7" y="910.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1176.7" y="883.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.7" y="894.0"></text>
</g>
<g>
<title>AddINode::Opcode() const (1 samples, 0.04%)</title><rect x="1176.7" y="867.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1177.2" y="995.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1177.2" y="979.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.2" y="990.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.04%)</title><rect x="1177.2" y="963.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.2" y="974.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1177.2" y="947.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.2" y="958.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1177.2" y="931.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.2" y="942.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1177.2" y="915.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.2" y="926.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.04%)</title><rect x="1177.2" y="899.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.2" y="910.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1177.2" y="883.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.2" y="894.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1177.2" y="867.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.2" y="878.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1177.2" y="851.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.2" y="862.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.239] (1 samples, 0.04%)</title><rect x="1177.2" y="835.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.2" y="846.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.04%)</title><rect x="1177.2" y="819.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.2" y="830.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1177.6" y="1075.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.6" y="1086.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.04%)</title><rect x="1177.6" y="1059.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.6" y="1070.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1177.6" y="1043.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="1054.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.04%)</title><rect x="1177.6" y="1027.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1178.1" y="1091.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.1" y="1102.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1178.1" y="1075.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.1" y="1086.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.04%)</title><rect x="1178.1" y="1059.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.1" y="1070.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1178.1" y="1043.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.1" y="1054.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1178.1" y="1027.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.1" y="1038.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.04%)</title><rect x="1178.1" y="1011.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.1" y="1022.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.04%)</title><rect x="1178.1" y="995.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.1" y="1006.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.04%)</title><rect x="1178.1" y="979.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.1" y="990.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1178.1" y="963.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.1" y="974.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1178.1" y="947.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.1" y="958.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1178.1" y="931.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.1" y="942.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.239] (1 samples, 0.04%)</title><rect x="1178.1" y="915.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.1" y="926.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.04%)</title><rect x="1178.1" y="899.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.1" y="910.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.04%)</title><rect x="1178.1" y="883.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.1" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1178.5" y="1171.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.5" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1178.5" y="1155.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.5" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1178.5" y="1139.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1178.5" y="1123.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1178.5" y="1107.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1178.5" y="1091.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1178.5" y="1075.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.5" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1178.5" y="1059.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.5" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1178.5" y="1043.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1178.5" y="1027.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1178.5" y="1011.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1178.5" y="995.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1178.5" y="979.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.5" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1178.5" y="963.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1178.5" y="947.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1178.5" y="931.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1178.5" y="915.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1178.5" y="899.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1178.5" y="883.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.5" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1178.5" y="867.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.5" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1178.5" y="851.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.5" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1178.5" y="835.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1178.5" y="819.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1178.5" y="803.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1178.5" y="787.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1178.5" y="771.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.5" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1178.5" y="755.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.5" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1178.5" y="739.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1178.5" y="723.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1178.5" y="707.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1178.5" y="691.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1178.5" y="675.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.5" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1178.5" y="659.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1178.5" y="643.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1178.5" y="627.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1178.5" y="611.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1178.5" y="595.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1178.5" y="579.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.5" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1178.5" y="563.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1178.5" y="547.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1178.5" y="531.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1178.5" y="515.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1178.5" y="499.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1178.5" y="483.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.5" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1178.5" y="467.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.5" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1178.5" y="451.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1178.5" y="435.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1178.5" y="419.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1178.5" y="403.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.04%)</title><rect x="1178.5" y="387.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.5" y="398.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.04%)</title><rect x="1178.5" y="371.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.04%)</title><rect x="1179.0" y="1187.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="1198.0"></text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.04%)</title><rect x="1179.0" y="1171.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="1182.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.04%)</title><rect x="1179.0" y="1155.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.0" y="1166.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.04%)</title><rect x="1179.0" y="1139.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.0" y="1150.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.04%)</title><rect x="1179.0" y="1123.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="1134.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.04%)</title><rect x="1179.0" y="1107.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.0" y="1118.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (12 samples, 0.47%)</title><rect x="1179.4" y="1267.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.4" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.39%)</title><rect x="1179.4" y="1251.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.39%)</title><rect x="1179.4" y="1235.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.4" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.39%)</title><rect x="1179.4" y="1219.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.4" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.39%)</title><rect x="1179.4" y="1203.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.4" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.39%)</title><rect x="1179.4" y="1187.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.4" y="1198.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.04%)</title><rect x="1179.4" y="1171.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.4" y="1182.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.04%)</title><rect x="1179.4" y="1155.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.4" y="1166.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.04%)</title><rect x="1179.4" y="1139.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="1150.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.04%)</title><rect x="1179.4" y="1123.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.4" y="1134.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.04%)</title><rect x="1179.4" y="1107.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.4" y="1118.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.04%)</title><rect x="1179.4" y="1091.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.4" y="1102.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.04%)</title><rect x="1179.4" y="1075.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.4" y="1086.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*) (1 samples, 0.04%)</title><rect x="1179.4" y="1059.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.35%)</title><rect x="1179.9" y="1171.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.35%)</title><rect x="1179.9" y="1155.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.35%)</title><rect x="1179.9" y="1139.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.9" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.35%)</title><rect x="1179.9" y="1123.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.35%)</title><rect x="1179.9" y="1107.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.35%)</title><rect x="1179.9" y="1091.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.31%)</title><rect x="1179.9" y="1075.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.31%)</title><rect x="1179.9" y="1059.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.9" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.31%)</title><rect x="1179.9" y="1043.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.31%)</title><rect x="1179.9" y="1027.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.31%)</title><rect x="1179.9" y="1011.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.31%)</title><rect x="1179.9" y="995.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.31%)</title><rect x="1179.9" y="979.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.9" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.23%)</title><rect x="1179.9" y="963.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.9" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.23%)</title><rect x="1179.9" y="947.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.23%)</title><rect x="1179.9" y="931.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.23%)</title><rect x="1179.9" y="915.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.23%)</title><rect x="1179.9" y="899.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.23%)</title><rect x="1179.9" y="883.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.19%)</title><rect x="1179.9" y="867.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.9" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.19%)</title><rect x="1179.9" y="851.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.19%)</title><rect x="1179.9" y="835.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.19%)</title><rect x="1179.9" y="819.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.19%)</title><rect x="1179.9" y="803.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.16%)</title><rect x="1179.9" y="787.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.12%)</title><rect x="1179.9" y="771.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.9" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.12%)</title><rect x="1179.9" y="755.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.12%)</title><rect x="1179.9" y="739.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.12%)</title><rect x="1179.9" y="723.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.12%)</title><rect x="1179.9" y="707.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.12%)</title><rect x="1179.9" y="691.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.08%)</title><rect x="1179.9" y="675.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.08%)</title><rect x="1179.9" y="659.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.08%)</title><rect x="1179.9" y="643.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.08%)</title><rect x="1179.9" y="627.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.08%)</title><rect x="1179.9" y="611.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.08%)</title><rect x="1179.9" y="595.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="606.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.04%)</title><rect x="1179.9" y="579.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.9" y="590.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.04%)</title><rect x="1179.9" y="563.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.9" y="574.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.04%)</title><rect x="1179.9" y="547.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.04%)</title><rect x="1179.9" y="531.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.04%)</title><rect x="1179.9" y="515.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1179.9" y="499.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1179.9" y="483.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.9" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.04%)</title><rect x="1179.9" y="467.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.9" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*) (1 samples, 0.04%)</title><rect x="1179.9" y="451.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.9" y="462.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.04%)</title><rect x="1179.9" y="435.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.04%)</title><rect x="1179.9" y="419.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="430.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.04%)</title><rect x="1179.9" y="403.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1179.9" y="387.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="398.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.04%)</title><rect x="1179.9" y="371.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.9" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1180.4" y="579.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.4" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1180.4" y="563.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.4" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1180.4" y="547.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1180.4" y="531.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1180.4" y="515.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1180.4" y="499.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1180.4" y="483.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1180.4" y="467.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1180.4" y="451.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1180.4" y="435.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1180.4" y="419.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1180.4" y="403.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1180.4" y="387.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.4" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1180.4" y="371.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1180.4" y="355.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1180.4" y="339.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1180.4" y="323.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1180.4" y="307.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1180.4" y="291.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1180.4" y="275.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.4" y="286.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.04%)</title><rect x="1180.4" y="259.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.4" y="270.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1180.4" y="243.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.4" y="254.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1180.4" y="227.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.4" y="238.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.04%)</title><rect x="1180.4" y="211.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="222.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.04%)</title><rect x="1180.4" y="195.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.4" y="206.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1180.4" y="179.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.4" y="190.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1180.4" y="163.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.4" y="174.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.04%)</title><rect x="1180.4" y="147.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1183.4" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1180.8" y="675.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.8" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1180.8" y="659.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1180.8" y="643.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.8" y="654.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.84] (1 samples, 0.04%)</title><rect x="1180.8" y="627.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.8" y="638.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.04%)</title><rect x="1180.8" y="611.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.8" y="622.0"></text>
</g>
<g>
<title>MethodData::data_at(int) const (1 samples, 0.04%)</title><rect x="1180.8" y="595.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.8" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1181.3" y="771.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.3" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1181.3" y="755.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1181.3" y="739.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1181.3" y="723.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1181.3" y="707.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1181.3" y="691.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1181.3" y="675.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1181.3" y="659.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1181.3" y="643.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1181.3" y="627.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1181.3" y="611.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1181.3" y="595.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1181.3" y="579.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1181.3" y="563.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1181.3" y="547.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1181.3" y="531.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1181.3" y="515.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1181.3" y="499.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1181.3" y="483.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1181.3" y="467.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1181.3" y="451.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1181.3" y="435.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1181.3" y="419.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1181.3" y="403.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1181.3" y="387.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1181.3" y="371.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.3" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1181.3" y="355.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1181.3" y="339.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1181.3" y="323.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1181.3" y="307.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1181.3" y="291.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1181.3" y="275.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1181.3" y="259.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1181.3" y="243.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1181.3" y="227.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1181.3" y="211.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="222.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.04%)</title><rect x="1181.3" y="195.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="206.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.04%)</title><rect x="1181.3" y="179.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="190.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1181.3" y="163.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="174.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1181.3" y="147.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="158.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1181.3" y="131.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="142.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.04%)</title><rect x="1181.3" y="115.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="126.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.04%)</title><rect x="1181.3" y="99.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="110.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1181.3" y="83.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.3" y="94.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1181.3" y="67.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="1181.3" y="51.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="62.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.04%)</title><rect x="1181.3" y="35.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1181.7" y="787.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1181.7" y="771.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.7" y="782.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.04%)</title><rect x="1181.7" y="755.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="766.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1181.7" y="739.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.7" y="750.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1181.7" y="723.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.7" y="734.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.04%)</title><rect x="1181.7" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="718.0"></text>
</g>
<g>
<title>InitializeNode::find_captured_store(long, int, PhaseTransform*) (1 samples, 0.04%)</title><rect x="1181.7" y="691.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="702.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1182.2" y="867.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.2" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1182.2" y="851.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1182.2" y="835.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1182.2" y="819.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1182.2" y="803.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1182.2" y="787.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1182.2" y="771.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1182.2" y="755.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1182.2" y="739.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1182.2" y="723.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1182.2" y="707.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1182.2" y="691.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1182.2" y="675.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1182.2" y="659.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1182.2" y="643.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1182.2" y="627.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1182.2" y="611.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1182.2" y="595.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1182.2" y="579.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1182.2" y="563.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1182.2" y="547.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1182.2" y="531.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1182.2" y="515.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1182.2" y="499.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1182.2" y="483.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1182.2" y="467.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1182.2" y="451.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1182.2" y="435.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1182.2" y="419.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1182.2" y="403.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.04%)</title><rect x="1182.2" y="387.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.2" y="398.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.04%)</title><rect x="1182.2" y="371.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="382.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.04%)</title><rect x="1182.2" y="355.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="366.0"></text>
</g>
<g>
<title>__memset_erms (1 samples, 0.04%)</title><rect x="1182.2" y="339.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1185.2" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.08%)</title><rect x="1182.7" y="963.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.7" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.08%)</title><rect x="1182.7" y="947.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.7" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.08%)</title><rect x="1182.7" y="931.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.08%)</title><rect x="1182.7" y="915.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.08%)</title><rect x="1182.7" y="899.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.08%)</title><rect x="1182.7" y="883.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.08%)</title><rect x="1182.7" y="867.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.7" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.08%)</title><rect x="1182.7" y="851.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.7" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.08%)</title><rect x="1182.7" y="835.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.08%)</title><rect x="1182.7" y="819.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.08%)</title><rect x="1182.7" y="803.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.08%)</title><rect x="1182.7" y="787.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.08%)</title><rect x="1182.7" y="771.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.7" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1182.7" y="755.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.7" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1182.7" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1182.7" y="723.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1182.7" y="707.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1182.7" y="691.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1182.7" y="675.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.7" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1182.7" y="659.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.7" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1182.7" y="643.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1182.7" y="627.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1182.7" y="611.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1182.7" y="595.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1182.7" y="579.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1182.7" y="563.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.7" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1182.7" y="547.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1182.7" y="531.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1182.7" y="515.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1182.7" y="499.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1182.7" y="483.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.7" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1182.7" y="467.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.7" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1182.7" y="451.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.04%)</title><rect x="1182.7" y="435.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.7" y="446.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1182.7" y="419.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.7" y="430.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1182.7" y="403.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.7" y="414.0"></text>
</g>
<g>
<title>Type::filter_helper(Type const*, bool) const (1 samples, 0.04%)</title><rect x="1182.7" y="387.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.7" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1183.1" y="755.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.1" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1183.1" y="739.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1183.1" y="723.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1183.1" y="707.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1183.1" y="691.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1183.1" y="675.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.04%)</title><rect x="1183.1" y="659.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.1" y="670.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.04%)</title><rect x="1183.1" y="643.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="654.0"></text>
</g>
<g>
<title>GraphKit::maybe_cast_profiled_receiver(Node*, ciKlass*, ciKlass*, bool) (1 samples, 0.04%)</title><rect x="1183.1" y="627.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.1" y="638.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.04%)</title><rect x="1183.1" y="611.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.1" y="622.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 0.04%)</title><rect x="1183.1" y="595.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.1" y="606.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.04%)</title><rect x="1183.1" y="579.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.1" y="590.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="1183.1" y="563.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.1" y="574.0"></text>
</g>
<g>
<title>TypeNarrowPtr::hash() const (1 samples, 0.04%)</title><rect x="1183.1" y="547.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1183.6" y="1075.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.6" y="1086.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1183.6" y="1059.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.6" y="1070.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.04%)</title><rect x="1183.6" y="1043.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.6" y="1054.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1183.6" y="1027.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.6" y="1038.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1183.6" y="1011.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.6" y="1022.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.04%)</title><rect x="1183.6" y="995.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.6" y="1006.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1183.6" y="979.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.6" y="990.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1183.6" y="963.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.6" y="974.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.136] (1 samples, 0.04%)</title><rect x="1183.6" y="947.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.6" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1183.6" y="931.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.6" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1183.6" y="915.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.6" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1183.6" y="899.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.6" y="910.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.129] (1 samples, 0.04%)</title><rect x="1183.6" y="883.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.6" y="894.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1183.6" y="867.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.6" y="878.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.08%)</title><rect x="1184.0" y="1251.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.0" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.08%)</title><rect x="1184.0" y="1235.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.0" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.08%)</title><rect x="1184.0" y="1219.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="1230.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.04%)</title><rect x="1184.0" y="1203.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.0" y="1214.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.04%)</title><rect x="1184.0" y="1187.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.0" y="1198.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.04%)</title><rect x="1184.0" y="1171.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="1182.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.04%)</title><rect x="1184.0" y="1155.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.0" y="1166.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="1184.0" y="1139.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.0" y="1150.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.04%)</title><rect x="1184.0" y="1123.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.0" y="1134.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.04%)</title><rect x="1184.0" y="1107.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.0" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1184.5" y="1203.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1184.5" y="1187.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1184.5" y="1171.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1184.5" y="1155.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.5" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1184.5" y="1139.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.5" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1184.5" y="1123.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1184.5" y="1107.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1184.5" y="1091.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1184.5" y="1075.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1184.5" y="1059.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.5" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1184.5" y="1043.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.5" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1184.5" y="1027.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1184.5" y="1011.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1184.5" y="995.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1184.5" y="979.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1184.5" y="963.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.5" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1184.5" y="947.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.5" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1184.5" y="931.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1184.5" y="915.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1184.5" y="899.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1184.5" y="883.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1184.5" y="867.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.5" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1184.5" y="851.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.5" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1184.5" y="835.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1184.5" y="819.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1184.5" y="803.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1184.5" y="787.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1184.5" y="771.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.5" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1184.5" y="755.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1184.5" y="739.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1184.5" y="723.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1184.5" y="707.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1184.5" y="691.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1184.5" y="675.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.5" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1184.5" y="659.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.5" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1184.5" y="643.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1184.5" y="627.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1184.5" y="611.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1184.5" y="595.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1184.5" y="579.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.5" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1184.5" y="563.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.5" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1184.5" y="547.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1184.5" y="531.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1184.5" y="515.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1184.5" y="499.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.04%)</title><rect x="1184.5" y="483.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.5" y="494.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.04%)</title><rect x="1184.5" y="467.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.5" y="478.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1184.5" y="451.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="462.0"></text>
</g>
<g>
<title>JVMState::clone_deep(Compile*) const (1 samples, 0.04%)</title><rect x="1184.5" y="435.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.5" y="446.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1185.0" y="1267.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.0" y="1278.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1185.0" y="1251.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.0" y="1262.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1185.0" y="1235.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.0" y="1246.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.04%)</title><rect x="1185.0" y="1219.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.0" y="1230.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(LinkInfo const&amp;) (1 samples, 0.04%)</title><rect x="1185.0" y="1203.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.0" y="1214.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.04%)</title><rect x="1185.0" y="1187.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.0" y="1198.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.04%)</title><rect x="1185.0" y="1171.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.0" y="1182.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.04%)</title><rect x="1185.0" y="1155.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.0" y="1166.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.04%)</title><rect x="1185.4" y="1363.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.4" y="1374.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.04%)</title><rect x="1185.4" y="1347.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.4" y="1358.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.04%)</title><rect x="1185.9" y="1363.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="1374.0"></text>
</g>
<g>
<title>nmethod::make_not_entrant_or_zombie(int) (1 samples, 0.04%)</title><rect x="1185.9" y="1347.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.9" y="1358.0"></text>
</g>
<g>
<title>NativeJump::patch_verified_entry(unsigned char*, unsigned char*, unsigned char*) (1 samples, 0.04%)</title><rect x="1185.9" y="1331.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.9" y="1342.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.04%)</title><rect x="1186.3" y="1395.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.3" y="1406.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.04%)</title><rect x="1186.3" y="1379.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.3" y="1390.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.04%)</title><rect x="1186.3" y="1363.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.3" y="1374.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.04%)</title><rect x="1186.3" y="1347.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.3" y="1358.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.04%)</title><rect x="1186.3" y="1331.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.3" y="1342.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.04%)</title><rect x="1186.3" y="1315.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.3" y="1326.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (1 samples, 0.04%)</title><rect x="1186.3" y="1299.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.3" y="1310.0"></text>
</g>
<g>
<title>LIRGenerator::do_LoadField(LoadField*) (1 samples, 0.04%)</title><rect x="1186.3" y="1283.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.3" y="1294.0"></text>
</g>
<g>
<title>XHandlers::XHandlers(XHandlers*) (1 samples, 0.04%)</title><rect x="1186.3" y="1267.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.3" y="1278.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.04%)</title><rect x="1186.8" y="1427.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.8" y="1438.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.04%)</title><rect x="1186.8" y="1411.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.8" y="1422.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.04%)</title><rect x="1186.8" y="1395.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.8" y="1406.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.04%)</title><rect x="1186.8" y="1379.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.8" y="1390.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.04%)</title><rect x="1186.8" y="1363.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.8" y="1374.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1186.8" y="1347.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.8" y="1358.0"></text>
</g>
<g>
<title>VMThread::run() (5 samples, 0.19%)</title><rect x="1187.2" y="1459.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.2" y="1470.0"></text>
</g>
<g>
<title>VMThread::loop() (5 samples, 0.19%)</title><rect x="1187.2" y="1443.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.2" y="1454.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (5 samples, 0.19%)</title><rect x="1187.2" y="1427.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.2" y="1438.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (5 samples, 0.19%)</title><rect x="1187.2" y="1411.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.2" y="1422.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.04%)</title><rect x="1187.2" y="1395.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.2" y="1406.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (4 samples, 0.16%)</title><rect x="1187.7" y="1395.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.7" y="1406.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (4 samples, 0.16%)</title><rect x="1187.7" y="1379.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.7" y="1390.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (1 samples, 0.04%)</title><rect x="1187.7" y="1363.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.7" y="1374.0"></text>
</g>
<g>
<title>G1RemSet::cleanup_after_oops_into_collection_set_do() (1 samples, 0.04%)</title><rect x="1187.7" y="1347.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.7" y="1358.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.04%)</title><rect x="1187.7" y="1331.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.7" y="1342.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.04%)</title><rect x="1187.7" y="1315.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.7" y="1326.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1187.7" y="1299.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1190.7" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1187.7" y="1283.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1190.7" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1187.7" y="1267.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1190.7" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1187.7" y="1251.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1190.7" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1187.7" y="1235.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1190.7" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1187.7" y="1219.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1190.7" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1187.7" y="1203.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1190.7" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1187.7" y="1187.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1190.7" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1187.7" y="1171.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1190.7" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::trace_heap(GCWhen::Type, GCTracer const*) (1 samples, 0.04%)</title><rect x="1188.2" y="1363.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.2" y="1374.0"></text>
</g>
<g>
<title>G1HeapSummary::accept(GCHeapSummaryVisitor*) const (1 samples, 0.04%)</title><rect x="1188.2" y="1347.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.2" y="1358.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::reset() (1 samples, 0.04%)</title><rect x="1188.6" y="1363.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.6" y="1374.0"></text>
</g>
<g>
<title>G1Policy::record_collection_pause_end(double, unsigned long, unsigned long) (1 samples, 0.04%)</title><rect x="1189.1" y="1363.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.1" y="1374.0"></text>
</g>
<g>
<title>G1AdaptiveIHOPControl::send_trace_event(G1NewTracer*) (1 samples, 0.04%)</title><rect x="1189.1" y="1347.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.1" y="1358.0"></text>
</g>
<g>
<title>G1CollectedHeap::used() const (1 samples, 0.04%)</title><rect x="1189.1" y="1331.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.1" y="1342.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.04%)</title><rect x="1189.5" y="1459.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.5" y="1470.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.04%)</title><rect x="1189.5" y="1443.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.5" y="1454.0"></text>
</g>
</g>
</svg>
