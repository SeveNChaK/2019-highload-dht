<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="613"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="613"> </text>
<g id="frames">
<g>
<title>all (36,265 samples, 100.00%)</title><rect x="10.0" y="579.0" width="1180.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="13.0" y="590.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (17,934 samples, 49.45%)</title><rect x="10.0" y="563.0" width="583.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="574.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (17,934 samples, 49.45%)</title><rect x="10.0" y="547.0" width="583.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="558.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (17,934 samples, 49.45%)</title><rect x="10.0" y="531.0" width="583.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="542.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (103 samples, 0.28%)</title><rect x="10.0" y="515.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (103 samples, 0.28%)</title><rect x="10.0" y="499.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (101 samples, 0.28%)</title><rect x="10.0" y="483.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (101 samples, 0.28%)</title><rect x="10.0" y="467.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (101 samples, 0.28%)</title><rect x="10.0" y="451.0" width="3.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl$$Lambda$65/80866200.run (17,831 samples, 49.17%)</title><rect x="13.4" y="515.0" width="580.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.4" y="526.0">ru/mail/polis/service/alex/AsyncServiceImpl$$Lambda$65/80866200.run</text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.lambda$executeAsync$3 (17,831 samples, 49.17%)</title><rect x="13.4" y="499.0" width="580.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="16.4" y="510.0">ru/mail/polis/service/alex/AsyncServiceImpl.lambda$executeAsync$3</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (137 samples, 0.38%)</title><rect x="13.4" y="483.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.4" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (137 samples, 0.38%)</title><rect x="13.4" y="467.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.4" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (104 samples, 0.29%)</title><rect x="13.4" y="451.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.4" y="462.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (104 samples, 0.29%)</title><rect x="13.4" y="435.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.4" y="446.0"></text>
</g>
<g>
<title>byte[] (104 samples, 0.29%)</title><rect x="13.4" y="419.0" width="3.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="16.4" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (33 samples, 0.09%)</title><rect x="16.8" y="451.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="19.8" y="462.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (33 samples, 0.09%)</title><rect x="16.8" y="435.0" width="1.0" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="19.8" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl$$Lambda$71/1479409169.action (17,694 samples, 48.79%)</title><rect x="17.8" y="483.0" width="575.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.8" y="494.0">ru/mail/polis/service/alex/AsyncServiceImpl$$Lambda$71/1479409169.action</text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.lambda$entity$0 (17,694 samples, 48.79%)</title><rect x="17.8" y="467.0" width="575.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.8" y="478.0">ru/mail/polis/service/alex/AsyncServiceImpl.lambda$entity$0</text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.get (17,694 samples, 48.79%)</title><rect x="17.8" y="451.0" width="575.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.8" y="462.0">ru/mail/polis/service/alex/AsyncServiceImpl.get</text>
</g>
<g>
<title>byte[] (40 samples, 0.11%)</title><rect x="17.8" y="435.0" width="1.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="20.8" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (52 samples, 0.14%)</title><rect x="19.1" y="435.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.1" y="446.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (52 samples, 0.14%)</title><rect x="19.1" y="419.0" width="1.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="22.1" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (10 samples, 0.03%)</title><rect x="20.8" y="435.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.8" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (10 samples, 0.03%)</title><rect x="20.8" y="419.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="23.8" y="430.0"></text>
</g>
<g>
<title>one.nio.http.Response (31 samples, 0.09%)</title><rect x="21.2" y="435.0" width="1.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="24.2" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (81 samples, 0.22%)</title><rect x="22.2" y="435.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.2" y="446.0"></text>
</g>
<g>
<title>byte[] (27 samples, 0.07%)</title><rect x="22.2" y="419.0" width="0.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="25.2" y="430.0"></text>
</g>
<g>
<title>java.lang.String[] (29 samples, 0.08%)</title><rect x="23.0" y="419.0" width="1.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="26.0" y="430.0"></text>
</g>
<g>
<title>java.lang.String (25 samples, 0.07%)</title><rect x="24.0" y="419.0" width="0.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="27.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (17,480 samples, 48.20%)</title><rect x="24.8" y="435.0" width="568.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.8" y="446.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (2,804 samples, 7.73%)</title><rect x="24.8" y="419.0" width="91.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="27.8" y="430.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (2,804 samples, 7.73%)</title><rect x="24.8" y="403.0" width="91.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="27.8" y="414.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (2,804 samples, 7.73%)</title><rect x="24.8" y="387.0" width="91.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="27.8" y="398.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (2,804 samples, 7.73%)</title><rect x="24.8" y="371.0" width="91.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.8" y="382.0">com/google/..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (2,804 samples, 7.73%)</title><rect x="24.8" y="355.0" width="91.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="27.8" y="366.0">ru/mail/pol..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2,427 samples, 6.69%)</title><rect x="24.8" y="339.0" width="79.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.8" y="350.0">com/googl..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (19 samples, 0.05%)</title><rect x="24.8" y="323.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="27.8" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (19 samples, 0.05%)</title><rect x="24.8" y="307.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.8" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (19 samples, 0.05%)</title><rect x="24.8" y="291.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.8" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (19 samples, 0.05%)</title><rect x="24.8" y="275.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.8" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (19 samples, 0.05%)</title><rect x="24.8" y="259.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$76/404085938.apply (19 samples, 0.05%)</title><rect x="24.8" y="243.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (19 samples, 0.05%)</title><rect x="24.8" y="227.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="27.8" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (19 samples, 0.05%)</title><rect x="24.8" y="211.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.8" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (19 samples, 0.05%)</title><rect x="24.8" y="195.0" width="0.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="27.8" y="206.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (667 samples, 1.84%)</title><rect x="25.4" y="323.0" width="21.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="28.4" y="334.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (667 samples, 1.84%)</title><rect x="25.4" y="307.0" width="21.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.4" y="318.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (667 samples, 1.84%)</title><rect x="25.4" y="291.0" width="21.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="28.4" y="302.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (667 samples, 1.84%)</title><rect x="25.4" y="275.0" width="21.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.4" y="286.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (667 samples, 1.84%)</title><rect x="25.4" y="259.0" width="21.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.4" y="270.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$74/1875785945.compare (667 samples, 1.84%)</title><rect x="25.4" y="243.0" width="21.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.4" y="254.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.compareTo (667 samples, 1.84%)</title><rect x="25.4" y="227.0" width="21.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.4" y="238.0">r..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (667 samples, 1.84%)</title><rect x="25.4" y="211.0" width="21.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.4" y="222.0">j..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (667 samples, 1.84%)</title><rect x="25.4" y="195.0" width="21.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.4" y="206.0">j..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (667 samples, 1.84%)</title><rect x="25.4" y="179.0" width="21.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.4" y="190.0">j..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (667 samples, 1.84%)</title><rect x="25.4" y="163.0" width="21.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.4" y="174.0">j..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1961113671.compare (667 samples, 1.84%)</title><rect x="25.4" y="147.0" width="21.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.4" y="158.0">j..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (667 samples, 1.84%)</title><rect x="25.4" y="131.0" width="21.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.4" y="142.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row$$Lambda$66/837197855.apply (667 samples, 1.84%)</title><rect x="25.4" y="115.0" width="21.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.4" y="126.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (667 samples, 1.84%)</title><rect x="25.4" y="99.0" width="21.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.4" y="110.0">r..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (548 samples, 1.51%)</title><rect x="25.4" y="83.0" width="17.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.4" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (548 samples, 1.51%)</title><rect x="25.4" y="67.0" width="17.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.4" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (548 samples, 1.51%)</title><rect x="25.4" y="51.0" width="17.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="28.4" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (119 samples, 0.33%)</title><rect x="43.3" y="83.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.3" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (119 samples, 0.33%)</title><rect x="43.3" y="67.0" width="3.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="46.3" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,741 samples, 4.80%)</title><rect x="47.1" y="323.0" width="56.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.1" y="334.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,741 samples, 4.80%)</title><rect x="47.1" y="307.0" width="56.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="50.1" y="318.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,741 samples, 4.80%)</title><rect x="47.1" y="291.0" width="56.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="50.1" y="302.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,741 samples, 4.80%)</title><rect x="47.1" y="275.0" width="56.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="50.1" y="286.0">java/u..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,741 samples, 4.80%)</title><rect x="47.1" y="259.0" width="56.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="50.1" y="270.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,741 samples, 4.80%)</title><rect x="47.1" y="243.0" width="56.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.1" y="254.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1,358 samples, 3.74%)</title><rect x="47.1" y="227.0" width="44.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="50.1" y="238.0">com/..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable$SSTableIterator.next (1,358 samples, 3.74%)</title><rect x="47.1" y="211.0" width="44.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.1" y="222.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable$SSTableIterator.next (1,358 samples, 3.74%)</title><rect x="47.1" y="195.0" width="44.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="50.1" y="206.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.transform (1,358 samples, 3.74%)</title><rect x="47.1" y="179.0" width="44.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="50.1" y="190.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.of (101 samples, 0.28%)</title><rect x="47.1" y="163.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="50.1" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alex.Row (101 samples, 0.28%)</title><rect x="47.1" y="147.0" width="3.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="50.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.keyAt (344 samples, 0.95%)</title><rect x="50.4" y="163.0" width="11.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="53.4" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (156 samples, 0.43%)</title><rect x="50.4" y="147.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="53.4" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (156 samples, 0.43%)</title><rect x="50.4" y="131.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="53.4" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (156 samples, 0.43%)</title><rect x="50.4" y="115.0" width="5.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="53.4" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (188 samples, 0.52%)</title><rect x="55.5" y="147.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="58.5" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (188 samples, 0.52%)</title><rect x="55.5" y="131.0" width="6.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="58.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.rowAt (356 samples, 0.98%)</title><rect x="61.6" y="163.0" width="11.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.6" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (181 samples, 0.50%)</title><rect x="61.6" y="147.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="64.6" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (181 samples, 0.50%)</title><rect x="61.6" y="131.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="64.6" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (181 samples, 0.50%)</title><rect x="61.6" y="115.0" width="5.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="64.6" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (175 samples, 0.48%)</title><rect x="67.5" y="147.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="70.5" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (175 samples, 0.48%)</title><rect x="67.5" y="131.0" width="5.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="70.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.timestampAt (165 samples, 0.45%)</title><rect x="73.2" y="163.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="76.2" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (165 samples, 0.45%)</title><rect x="73.2" y="147.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.2" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (165 samples, 0.45%)</title><rect x="73.2" y="131.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="76.2" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (165 samples, 0.45%)</title><rect x="73.2" y="115.0" width="5.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="76.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.valueAt (323 samples, 0.89%)</title><rect x="78.6" y="163.0" width="10.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="81.6" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (157 samples, 0.43%)</title><rect x="78.6" y="147.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.6" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (157 samples, 0.43%)</title><rect x="78.6" y="131.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.6" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (157 samples, 0.43%)</title><rect x="78.6" y="115.0" width="5.1" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="81.6" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (166 samples, 0.46%)</title><rect x="83.7" y="147.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="86.7" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (166 samples, 0.46%)</title><rect x="83.7" y="131.0" width="5.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="86.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Value.of (61 samples, 0.17%)</title><rect x="89.1" y="163.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="92.1" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alex.Value (61 samples, 0.17%)</title><rect x="89.1" y="147.0" width="2.0" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="92.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Value.tombstone (8 samples, 0.02%)</title><rect x="91.1" y="163.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.1" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alex.Value (8 samples, 0.02%)</title><rect x="91.1" y="147.0" width="0.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="94.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$74/1875785945.compare (383 samples, 1.06%)</title><rect x="91.3" y="227.0" width="12.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="94.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.compareTo (383 samples, 1.06%)</title><rect x="91.3" y="211.0" width="12.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.3" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (383 samples, 1.06%)</title><rect x="91.3" y="195.0" width="12.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="94.3" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (383 samples, 1.06%)</title><rect x="91.3" y="179.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="94.3" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (383 samples, 1.06%)</title><rect x="91.3" y="163.0" width="12.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="94.3" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (383 samples, 1.06%)</title><rect x="91.3" y="147.0" width="12.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="94.3" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1961113671.compare (383 samples, 1.06%)</title><rect x="91.3" y="131.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="94.3" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (383 samples, 1.06%)</title><rect x="91.3" y="115.0" width="12.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="94.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row$$Lambda$66/837197855.apply (383 samples, 1.06%)</title><rect x="91.3" y="99.0" width="12.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="94.3" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (383 samples, 1.06%)</title><rect x="91.3" y="83.0" width="12.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="94.3" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (370 samples, 1.02%)</title><rect x="91.3" y="67.0" width="12.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="94.3" y="78.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (370 samples, 1.02%)</title><rect x="91.3" y="51.0" width="12.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="94.3" y="62.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (370 samples, 1.02%)</title><rect x="91.3" y="35.0" width="12.1" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="94.3" y="46.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (13 samples, 0.04%)</title><rect x="103.4" y="67.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="106.4" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (13 samples, 0.04%)</title><rect x="103.4" y="51.0" width="0.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="106.4" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$76/404085938.apply (377 samples, 1.04%)</title><rect x="103.8" y="339.0" width="12.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="106.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (377 samples, 1.04%)</title><rect x="103.8" y="323.0" width="12.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="106.8" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (304 samples, 0.84%)</title><rect x="103.8" y="307.0" width="9.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="106.8" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (304 samples, 0.84%)</title><rect x="103.8" y="291.0" width="9.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="106.8" y="302.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (304 samples, 0.84%)</title><rect x="103.8" y="275.0" width="9.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="106.8" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (73 samples, 0.20%)</title><rect x="113.7" y="307.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="116.7" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (73 samples, 0.20%)</title><rect x="113.7" y="291.0" width="2.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="116.7" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (144 samples, 0.40%)</title><rect x="116.0" y="419.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="119.0" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (144 samples, 0.40%)</title><rect x="116.0" y="403.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="119.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/AlexDAO$$Lambda$83/1121401899.apply (144 samples, 0.40%)</title><rect x="116.0" y="387.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="119.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/AlexDAO.lambda$iterator$0 (144 samples, 0.40%)</title><rect x="116.0" y="371.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="119.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (27 samples, 0.07%)</title><rect x="116.0" y="355.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="119.0" y="366.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (27 samples, 0.07%)</title><rect x="116.0" y="339.0" width="0.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="119.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (61 samples, 0.17%)</title><rect x="116.9" y="355.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="119.9" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (50 samples, 0.14%)</title><rect x="116.9" y="339.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="119.9" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (50 samples, 0.14%)</title><rect x="116.9" y="323.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="119.9" y="334.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (50 samples, 0.14%)</title><rect x="116.9" y="307.0" width="1.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="119.9" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (11 samples, 0.03%)</title><rect x="118.5" y="339.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="121.5" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (11 samples, 0.03%)</title><rect x="118.5" y="323.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="121.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Value.getData (56 samples, 0.15%)</title><rect x="118.9" y="355.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="121.9" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (39 samples, 0.11%)</title><rect x="118.9" y="339.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="121.9" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (39 samples, 0.11%)</title><rect x="118.9" y="323.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="121.9" y="334.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (39 samples, 0.11%)</title><rect x="118.9" y="307.0" width="1.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="121.9" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (17 samples, 0.05%)</title><rect x="120.2" y="339.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="123.2" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (17 samples, 0.05%)</title><rect x="120.2" y="323.0" width="0.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="123.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (64 samples, 0.18%)</title><rect x="120.7" y="419.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="123.7" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (52 samples, 0.14%)</title><rect x="120.7" y="403.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="123.7" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (52 samples, 0.14%)</title><rect x="120.7" y="387.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="123.7" y="398.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (52 samples, 0.14%)</title><rect x="120.7" y="371.0" width="1.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="123.7" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (12 samples, 0.03%)</title><rect x="122.4" y="403.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="125.4" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (12 samples, 0.03%)</title><rect x="122.4" y="387.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="125.4" y="398.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (12 samples, 0.03%)</title><rect x="122.4" y="371.0" width="0.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="125.4" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (64 samples, 0.18%)</title><rect x="122.8" y="419.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="125.8" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (48 samples, 0.13%)</title><rect x="122.8" y="403.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="125.8" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (48 samples, 0.13%)</title><rect x="122.8" y="387.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="125.8" y="398.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (48 samples, 0.13%)</title><rect x="122.8" y="371.0" width="1.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="125.8" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (16 samples, 0.04%)</title><rect x="124.4" y="403.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="127.4" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (16 samples, 0.04%)</title><rect x="124.4" y="387.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="127.4" y="398.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (16 samples, 0.04%)</title><rect x="124.4" y="371.0" width="0.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="127.4" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/AlexDAO.iterator (14,404 samples, 39.72%)</title><rect x="124.9" y="419.0" width="468.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="127.9" y="430.0">ru/mail/polis/dao/alex/AlexDAO.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (24 samples, 0.07%)</title><rect x="124.9" y="403.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="127.9" y="414.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (24 samples, 0.07%)</title><rect x="124.9" y="387.0" width="0.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="127.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/AlexDAO.rowsIterator (14,380 samples, 39.65%)</title><rect x="125.7" y="403.0" width="467.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="128.7" y="414.0">ru/mail/polis/dao/alex/AlexDAO.rowsIterator</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.combineTables (11,658 samples, 32.15%)</title><rect x="125.7" y="387.0" width="379.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="128.7" y="398.0">ru/mail/polis/dao/alex/Table.combineTables</text>
</g>
<g>
<title>java.util.ArrayList (25 samples, 0.07%)</title><rect x="125.7" y="371.0" width="0.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="128.7" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (48 samples, 0.13%)</title><rect x="126.5" y="371.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="129.5" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (48 samples, 0.13%)</title><rect x="126.5" y="355.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="129.5" y="366.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (48 samples, 0.13%)</title><rect x="126.5" y="339.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="129.5" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (48 samples, 0.13%)</title><rect x="126.5" y="323.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="129.5" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (48 samples, 0.13%)</title><rect x="126.5" y="307.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="129.5" y="318.0"></text>
</g>
<g>
<title>java.lang.Object[] (48 samples, 0.13%)</title><rect x="126.5" y="291.0" width="1.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="129.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (28 samples, 0.08%)</title><rect x="128.0" y="371.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="131.0" y="382.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (28 samples, 0.08%)</title><rect x="128.0" y="355.0" width="1.0" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="131.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTablePool.iterator (623 samples, 1.72%)</title><rect x="129.0" y="371.0" width="20.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="132.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (65 samples, 0.18%)</title><rect x="129.0" y="355.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="132.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (65 samples, 0.18%)</title><rect x="129.0" y="339.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="132.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (65 samples, 0.18%)</title><rect x="129.0" y="323.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="132.0" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (50 samples, 0.14%)</title><rect x="129.0" y="307.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="132.0" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (50 samples, 0.14%)</title><rect x="129.0" y="291.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="132.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (49 samples, 0.14%)</title><rect x="129.0" y="275.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="132.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (49 samples, 0.14%)</title><rect x="129.0" y="259.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="132.0" y="270.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter (49 samples, 0.14%)</title><rect x="129.0" y="243.0" width="1.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="132.0" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (15 samples, 0.04%)</title><rect x="130.6" y="307.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="133.6" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (15 samples, 0.04%)</title><rect x="130.6" y="291.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="133.6" y="302.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (15 samples, 0.04%)</title><rect x="130.6" y="275.0" width="0.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="133.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.combineTables (367 samples, 1.01%)</title><rect x="131.1" y="355.0" width="11.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="134.1" y="366.0"></text>
</g>
<g>
<title>java.util.ArrayList (23 samples, 0.06%)</title><rect x="131.1" y="339.0" width="0.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="134.1" y="350.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (73 samples, 0.20%)</title><rect x="131.8" y="339.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="134.8" y="350.0"></text>
</g>
<g>
<title>java.util.AbstractMap$2$1 (26 samples, 0.07%)</title><rect x="131.8" y="323.0" width="0.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="134.8" y="334.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (47 samples, 0.13%)</title><rect x="132.7" y="323.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.7" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (47 samples, 0.13%)</title><rect x="132.7" y="307.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="135.7" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (47 samples, 0.13%)</title><rect x="132.7" y="291.0" width="1.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="135.7" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (59 samples, 0.16%)</title><rect x="134.2" y="339.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="137.2" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (59 samples, 0.16%)</title><rect x="134.2" y="323.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="137.2" y="334.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (59 samples, 0.16%)</title><rect x="134.2" y="307.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="137.2" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (59 samples, 0.16%)</title><rect x="134.2" y="291.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="137.2" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (59 samples, 0.16%)</title><rect x="134.2" y="275.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="137.2" y="286.0"></text>
</g>
<g>
<title>java.lang.Object[] (59 samples, 0.16%)</title><rect x="134.2" y="259.0" width="1.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="137.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTable.iterator (212 samples, 0.58%)</title><rect x="136.1" y="339.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="139.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (13 samples, 0.04%)</title><rect x="136.1" y="323.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="139.1" y="334.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Values (13 samples, 0.04%)</title><rect x="136.1" y="307.0" width="0.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="139.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (34 samples, 0.09%)</title><rect x="136.5" y="323.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="139.5" y="334.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (34 samples, 0.09%)</title><rect x="136.5" y="307.0" width="1.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="139.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (165 samples, 0.45%)</title><rect x="137.6" y="323.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="140.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (165 samples, 0.45%)</title><rect x="137.6" y="307.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="140.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (165 samples, 0.45%)</title><rect x="137.6" y="291.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="140.6" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (165 samples, 0.45%)</title><rect x="137.6" y="275.0" width="5.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="140.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.transformRows (191 samples, 0.53%)</title><rect x="143.0" y="355.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="146.0" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (28 samples, 0.08%)</title><rect x="143.0" y="339.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="146.0" y="350.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (28 samples, 0.08%)</title><rect x="143.0" y="323.0" width="0.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="146.0" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (147 samples, 0.41%)</title><rect x="143.9" y="339.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="146.9" y="350.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (19 samples, 0.05%)</title><rect x="143.9" y="323.0" width="0.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="146.9" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (128 samples, 0.35%)</title><rect x="144.5" y="323.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="147.5" y="334.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (16 samples, 0.04%)</title><rect x="144.5" y="307.0" width="0.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="147.5" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (23 samples, 0.06%)</title><rect x="145.1" y="307.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="148.1" y="318.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (23 samples, 0.06%)</title><rect x="145.1" y="291.0" width="0.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="148.1" y="302.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (31 samples, 0.09%)</title><rect x="145.8" y="307.0" width="1.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="148.8" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (34 samples, 0.09%)</title><rect x="146.8" y="307.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.8" y="318.0"></text>
</g>
<g>
<title>java.util.ArrayList$Itr (34 samples, 0.09%)</title><rect x="146.8" y="291.0" width="1.1" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="149.8" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (24 samples, 0.07%)</title><rect x="147.9" y="307.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="150.9" y="318.0"></text>
</g>
<g>
<title>java.lang.Object[] (24 samples, 0.07%)</title><rect x="147.9" y="291.0" width="0.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="150.9" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (16 samples, 0.04%)</title><rect x="148.7" y="339.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="151.7" y="350.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (16 samples, 0.04%)</title><rect x="148.7" y="323.0" width="0.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="151.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.iterator (10,934 samples, 30.15%)</title><rect x="149.2" y="371.0" width="355.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="152.2" y="382.0">ru/mail/polis/dao/alex/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.alex.SSTable$SSTableIterator (64 samples, 0.18%)</title><rect x="149.2" y="355.0" width="2.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="152.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable$SSTableIterator.&lt;init&gt; (10,870 samples, 29.97%)</title><rect x="151.3" y="355.0" width="353.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="154.3" y="366.0">ru/mail/polis/dao/alex/SSTable$SSTableIterator.&lt;..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.position (10,870 samples, 29.97%)</title><rect x="151.3" y="339.0" width="353.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="154.3" y="350.0">ru/mail/polis/dao/alex/SSTable.position</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.keyAt (5,493 samples, 15.15%)</title><rect x="151.3" y="323.0" width="178.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="154.3" y="334.0">ru/mail/polis/dao/alex/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2,724 samples, 7.51%)</title><rect x="151.3" y="307.0" width="88.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="154.3" y="318.0">java/nio/D..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2,724 samples, 7.51%)</title><rect x="151.3" y="291.0" width="88.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="154.3" y="302.0">java/nio/D..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,724 samples, 7.51%)</title><rect x="151.3" y="275.0" width="88.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="154.3" y="286.0">java.nio.D..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2,769 samples, 7.64%)</title><rect x="239.9" y="307.0" width="90.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="242.9" y="318.0">java/nio/D..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,769 samples, 7.64%)</title><rect x="239.9" y="291.0" width="90.1" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="242.9" y="302.0">java.nio.D..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.rowAt (5,377 samples, 14.83%)</title><rect x="330.0" y="323.0" width="175.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="333.0" y="334.0">ru/mail/polis/dao/alex..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2,686 samples, 7.41%)</title><rect x="330.0" y="307.0" width="87.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="333.0" y="318.0">java/nio/D..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2,686 samples, 7.41%)</title><rect x="330.0" y="291.0" width="87.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="333.0" y="302.0">java/nio/D..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,686 samples, 7.41%)</title><rect x="330.0" y="275.0" width="87.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="333.0" y="286.0">java.nio.D..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2,691 samples, 7.42%)</title><rect x="417.4" y="307.0" width="87.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="420.4" y="318.0">java/nio/D..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,691 samples, 7.42%)</title><rect x="417.4" y="291.0" width="87.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="420.4" y="302.0">java.nio.D..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.transformRows (2,722 samples, 7.51%)</title><rect x="505.0" y="387.0" width="88.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="508.0" y="398.0">ru/mail/po..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (29 samples, 0.08%)</title><rect x="505.0" y="371.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="508.0" y="382.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (29 samples, 0.08%)</title><rect x="505.0" y="355.0" width="0.9" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="508.0" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (2,008 samples, 5.54%)</title><rect x="505.9" y="371.0" width="65.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="508.9" y="382.0">com/goo..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (18 samples, 0.05%)</title><rect x="505.9" y="355.0" width="0.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="508.9" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (1,990 samples, 5.49%)</title><rect x="506.5" y="355.0" width="64.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="509.5" y="366.0">com/goo..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (29 samples, 0.08%)</title><rect x="506.5" y="339.0" width="1.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="509.5" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (67 samples, 0.18%)</title><rect x="507.5" y="339.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="510.5" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (67 samples, 0.18%)</title><rect x="507.5" y="323.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="510.5" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (67 samples, 0.18%)</title><rect x="507.5" y="307.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="510.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (67 samples, 0.18%)</title><rect x="507.5" y="291.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="510.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$76/404085938.apply (67 samples, 0.18%)</title><rect x="507.5" y="275.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="510.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (67 samples, 0.18%)</title><rect x="507.5" y="259.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="510.5" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (67 samples, 0.18%)</title><rect x="507.5" y="243.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="510.5" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (67 samples, 0.18%)</title><rect x="507.5" y="227.0" width="2.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="510.5" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (75 samples, 0.21%)</title><rect x="509.7" y="339.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="512.7" y="350.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (75 samples, 0.21%)</title><rect x="509.7" y="323.0" width="2.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="512.7" y="334.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (34 samples, 0.09%)</title><rect x="512.1" y="339.0" width="1.1" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="515.1" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (17 samples, 0.05%)</title><rect x="513.2" y="339.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="516.2" y="350.0"></text>
</g>
<g>
<title>java.lang.Object[] (17 samples, 0.05%)</title><rect x="513.2" y="323.0" width="0.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="516.2" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,768 samples, 4.88%)</title><rect x="513.8" y="339.0" width="57.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="516.8" y="350.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,768 samples, 4.88%)</title><rect x="513.8" y="323.0" width="57.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="516.8" y="334.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (50 samples, 0.14%)</title><rect x="513.8" y="307.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="516.8" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (50 samples, 0.14%)</title><rect x="513.8" y="291.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="516.8" y="302.0"></text>
</g>
<g>
<title>java.lang.Object[] (50 samples, 0.14%)</title><rect x="513.8" y="275.0" width="1.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="516.8" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,718 samples, 4.74%)</title><rect x="515.4" y="307.0" width="55.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="518.4" y="318.0">java/..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,718 samples, 4.74%)</title><rect x="515.4" y="291.0" width="55.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="518.4" y="302.0">java/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,718 samples, 4.74%)</title><rect x="515.4" y="275.0" width="55.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="518.4" y="286.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,718 samples, 4.74%)</title><rect x="515.4" y="259.0" width="55.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="518.4" y="270.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1,345 samples, 3.71%)</title><rect x="515.4" y="243.0" width="43.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="518.4" y="254.0">com/..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable$SSTableIterator.next (1,345 samples, 3.71%)</title><rect x="515.4" y="227.0" width="43.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="518.4" y="238.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable$SSTableIterator.next (1,345 samples, 3.71%)</title><rect x="515.4" y="211.0" width="43.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="518.4" y="222.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.transform (1,345 samples, 3.71%)</title><rect x="515.4" y="195.0" width="43.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="518.4" y="206.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.of (88 samples, 0.24%)</title><rect x="515.4" y="179.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="518.4" y="190.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alex.Row (88 samples, 0.24%)</title><rect x="515.4" y="163.0" width="2.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="518.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.keyAt (328 samples, 0.90%)</title><rect x="518.2" y="179.0" width="10.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="521.2" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (163 samples, 0.45%)</title><rect x="518.2" y="163.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="521.2" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (163 samples, 0.45%)</title><rect x="518.2" y="147.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="521.2" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (163 samples, 0.45%)</title><rect x="518.2" y="131.0" width="5.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="521.2" y="142.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (165 samples, 0.45%)</title><rect x="523.6" y="163.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="526.6" y="174.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (165 samples, 0.45%)</title><rect x="523.6" y="147.0" width="5.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="526.6" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.rowAt (339 samples, 0.93%)</title><rect x="528.9" y="179.0" width="11.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="531.9" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (163 samples, 0.45%)</title><rect x="528.9" y="163.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="531.9" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (163 samples, 0.45%)</title><rect x="528.9" y="147.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="531.9" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (163 samples, 0.45%)</title><rect x="528.9" y="131.0" width="5.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="531.9" y="142.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (176 samples, 0.49%)</title><rect x="534.2" y="163.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="537.2" y="174.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (176 samples, 0.49%)</title><rect x="534.2" y="147.0" width="5.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="537.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.timestampAt (208 samples, 0.57%)</title><rect x="540.0" y="179.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="543.0" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (208 samples, 0.57%)</title><rect x="540.0" y="163.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="543.0" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (208 samples, 0.57%)</title><rect x="540.0" y="147.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="543.0" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (208 samples, 0.57%)</title><rect x="540.0" y="131.0" width="6.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="543.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.valueAt (317 samples, 0.87%)</title><rect x="546.7" y="179.0" width="10.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="549.7" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (142 samples, 0.39%)</title><rect x="546.7" y="163.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="549.7" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (142 samples, 0.39%)</title><rect x="546.7" y="147.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="549.7" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (142 samples, 0.39%)</title><rect x="546.7" y="131.0" width="4.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="549.7" y="142.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (175 samples, 0.48%)</title><rect x="551.3" y="163.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="554.3" y="174.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (175 samples, 0.48%)</title><rect x="551.3" y="147.0" width="5.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="554.3" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Value.of (55 samples, 0.15%)</title><rect x="557.0" y="179.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="560.0" y="190.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alex.Value (55 samples, 0.15%)</title><rect x="557.0" y="163.0" width="1.8" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="560.0" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Value.tombstone (10 samples, 0.03%)</title><rect x="558.8" y="179.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="561.8" y="190.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alex.Value (10 samples, 0.03%)</title><rect x="558.8" y="163.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="561.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$74/1875785945.compare (373 samples, 1.03%)</title><rect x="559.1" y="243.0" width="12.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="562.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.compareTo (373 samples, 1.03%)</title><rect x="559.1" y="227.0" width="12.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="562.1" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (373 samples, 1.03%)</title><rect x="559.1" y="211.0" width="12.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="562.1" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (373 samples, 1.03%)</title><rect x="559.1" y="195.0" width="12.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="562.1" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (373 samples, 1.03%)</title><rect x="559.1" y="179.0" width="12.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="562.1" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (373 samples, 1.03%)</title><rect x="559.1" y="163.0" width="12.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="562.1" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1961113671.compare (373 samples, 1.03%)</title><rect x="559.1" y="147.0" width="12.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="562.1" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (373 samples, 1.03%)</title><rect x="559.1" y="131.0" width="12.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="562.1" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row$$Lambda$66/837197855.apply (373 samples, 1.03%)</title><rect x="559.1" y="115.0" width="12.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="562.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (373 samples, 1.03%)</title><rect x="559.1" y="99.0" width="12.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="562.1" y="110.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (306 samples, 0.84%)</title><rect x="559.1" y="83.0" width="10.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="562.1" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (306 samples, 0.84%)</title><rect x="559.1" y="67.0" width="10.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="562.1" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (306 samples, 0.84%)</title><rect x="559.1" y="51.0" width="10.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="562.1" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (67 samples, 0.18%)</title><rect x="569.1" y="83.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="572.1" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (67 samples, 0.18%)</title><rect x="569.1" y="67.0" width="2.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="572.1" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (685 samples, 1.89%)</title><rect x="571.3" y="371.0" width="22.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="574.3" y="382.0">r..</text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (16 samples, 0.04%)</title><rect x="571.3" y="355.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="574.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (669 samples, 1.84%)</title><rect x="571.8" y="355.0" width="21.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="574.8" y="366.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (669 samples, 1.84%)</title><rect x="571.8" y="339.0" width="21.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="574.8" y="350.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (32 samples, 0.09%)</title><rect x="571.8" y="323.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="574.8" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (32 samples, 0.09%)</title><rect x="571.8" y="307.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="574.8" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (32 samples, 0.09%)</title><rect x="571.8" y="291.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="574.8" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (32 samples, 0.09%)</title><rect x="571.8" y="275.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="574.8" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (32 samples, 0.09%)</title><rect x="571.8" y="259.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="574.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$76/404085938.apply (32 samples, 0.09%)</title><rect x="571.8" y="243.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="574.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (32 samples, 0.09%)</title><rect x="571.8" y="227.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="574.8" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (32 samples, 0.09%)</title><rect x="571.8" y="211.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="574.8" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (32 samples, 0.09%)</title><rect x="571.8" y="195.0" width="1.0" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="574.8" y="206.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (206 samples, 0.57%)</title><rect x="572.8" y="323.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="575.8" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (206 samples, 0.57%)</title><rect x="572.8" y="307.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="575.8" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (206 samples, 0.57%)</title><rect x="572.8" y="291.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="575.8" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (206 samples, 0.57%)</title><rect x="572.8" y="275.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="575.8" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (206 samples, 0.57%)</title><rect x="572.8" y="259.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="575.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$74/1875785945.compare (206 samples, 0.57%)</title><rect x="572.8" y="243.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="575.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.compareTo (206 samples, 0.57%)</title><rect x="572.8" y="227.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="575.8" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (206 samples, 0.57%)</title><rect x="572.8" y="211.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="575.8" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (206 samples, 0.57%)</title><rect x="572.8" y="195.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="575.8" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (206 samples, 0.57%)</title><rect x="572.8" y="179.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="575.8" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (206 samples, 0.57%)</title><rect x="572.8" y="163.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="575.8" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1961113671.compare (206 samples, 0.57%)</title><rect x="572.8" y="147.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="575.8" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (206 samples, 0.57%)</title><rect x="572.8" y="131.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="575.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row$$Lambda$66/837197855.apply (206 samples, 0.57%)</title><rect x="572.8" y="115.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="575.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (206 samples, 0.57%)</title><rect x="572.8" y="99.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="575.8" y="110.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (183 samples, 0.50%)</title><rect x="572.8" y="83.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="575.8" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (183 samples, 0.50%)</title><rect x="572.8" y="67.0" width="6.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="575.8" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (183 samples, 0.50%)</title><rect x="572.8" y="51.0" width="6.0" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="575.8" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (23 samples, 0.06%)</title><rect x="578.8" y="83.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="581.8" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (23 samples, 0.06%)</title><rect x="578.8" y="67.0" width="0.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="581.8" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (431 samples, 1.19%)</title><rect x="579.5" y="323.0" width="14.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="582.5" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (431 samples, 1.19%)</title><rect x="579.5" y="307.0" width="14.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="582.5" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (431 samples, 1.19%)</title><rect x="579.5" y="291.0" width="14.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="582.5" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (431 samples, 1.19%)</title><rect x="579.5" y="275.0" width="14.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="582.5" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (431 samples, 1.19%)</title><rect x="579.5" y="259.0" width="14.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="582.5" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (431 samples, 1.19%)</title><rect x="579.5" y="243.0" width="14.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="582.5" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (323 samples, 0.89%)</title><rect x="579.5" y="227.0" width="10.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="582.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable$SSTableIterator.next (323 samples, 0.89%)</title><rect x="579.5" y="211.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="582.5" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable$SSTableIterator.next (323 samples, 0.89%)</title><rect x="579.5" y="195.0" width="10.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="582.5" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.transform (323 samples, 0.89%)</title><rect x="579.5" y="179.0" width="10.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="582.5" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.of (22 samples, 0.06%)</title><rect x="579.5" y="163.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="582.5" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alex.Row (22 samples, 0.06%)</title><rect x="579.5" y="147.0" width="0.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="582.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.keyAt (85 samples, 0.23%)</title><rect x="580.3" y="163.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="583.3" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (30 samples, 0.08%)</title><rect x="580.3" y="147.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="583.3" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (30 samples, 0.08%)</title><rect x="580.3" y="131.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="583.3" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (30 samples, 0.08%)</title><rect x="580.3" y="115.0" width="0.9" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="583.3" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (55 samples, 0.15%)</title><rect x="581.2" y="147.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="584.2" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (55 samples, 0.15%)</title><rect x="581.2" y="131.0" width="1.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="584.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.rowAt (76 samples, 0.21%)</title><rect x="583.0" y="163.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="586.0" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (48 samples, 0.13%)</title><rect x="583.0" y="147.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="586.0" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (48 samples, 0.13%)</title><rect x="583.0" y="131.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="586.0" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (48 samples, 0.13%)</title><rect x="583.0" y="115.0" width="1.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="586.0" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (28 samples, 0.08%)</title><rect x="584.6" y="147.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="587.6" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (28 samples, 0.08%)</title><rect x="584.6" y="131.0" width="0.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="587.6" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.timestampAt (49 samples, 0.14%)</title><rect x="585.5" y="163.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="588.5" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (49 samples, 0.14%)</title><rect x="585.5" y="147.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="588.5" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (49 samples, 0.14%)</title><rect x="585.5" y="131.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="588.5" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (49 samples, 0.14%)</title><rect x="585.5" y="115.0" width="1.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="588.5" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.valueAt (74 samples, 0.20%)</title><rect x="587.1" y="163.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="590.1" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (38 samples, 0.10%)</title><rect x="587.1" y="147.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="590.1" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (38 samples, 0.10%)</title><rect x="587.1" y="131.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="590.1" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (38 samples, 0.10%)</title><rect x="587.1" y="115.0" width="1.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="590.1" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (36 samples, 0.10%)</title><rect x="588.3" y="147.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="591.3" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (36 samples, 0.10%)</title><rect x="588.3" y="131.0" width="1.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="591.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Value.of (17 samples, 0.05%)</title><rect x="589.5" y="163.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="592.5" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alex.Value (17 samples, 0.05%)</title><rect x="589.5" y="147.0" width="0.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="592.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$74/1875785945.compare (108 samples, 0.30%)</title><rect x="590.1" y="227.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="593.1" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.compareTo (108 samples, 0.30%)</title><rect x="590.1" y="211.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="593.1" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (108 samples, 0.30%)</title><rect x="590.1" y="195.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="593.1" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (108 samples, 0.30%)</title><rect x="590.1" y="179.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="593.1" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1094252904.compare (108 samples, 0.30%)</title><rect x="590.1" y="163.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="593.1" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (108 samples, 0.30%)</title><rect x="590.1" y="147.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="593.1" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1961113671.compare (108 samples, 0.30%)</title><rect x="590.1" y="131.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="593.1" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (108 samples, 0.30%)</title><rect x="590.1" y="115.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="593.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row$$Lambda$66/837197855.apply (108 samples, 0.30%)</title><rect x="590.1" y="99.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="593.1" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (108 samples, 0.30%)</title><rect x="590.1" y="83.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="593.1" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (101 samples, 0.28%)</title><rect x="590.1" y="67.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="593.1" y="78.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (101 samples, 0.28%)</title><rect x="590.1" y="51.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="593.1" y="62.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (101 samples, 0.28%)</title><rect x="590.1" y="35.0" width="3.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="593.1" y="46.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (18,325 samples, 50.53%)</title><rect x="593.7" y="563.0" width="596.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="596.7" y="574.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (1,137 samples, 3.14%)</title><rect x="593.7" y="547.0" width="37.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="596.7" y="558.0">one..</text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (1,137 samples, 3.14%)</title><rect x="593.7" y="531.0" width="37.0" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="596.7" y="542.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.process (17,188 samples, 47.40%)</title><rect x="630.7" y="547.0" width="559.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="633.7" y="558.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (17,188 samples, 47.40%)</title><rect x="630.7" y="531.0" width="559.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="633.7" y="542.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (17,187 samples, 47.39%)</title><rect x="630.7" y="515.0" width="559.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="633.7" y="526.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (5,977 samples, 16.48%)</title><rect x="630.7" y="499.0" width="194.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="633.7" y="510.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (5,977 samples, 16.48%)</title><rect x="630.7" y="483.0" width="194.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="633.7" y="494.0">one/nio/http/HttpServer.h..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (4,567 samples, 12.59%)</title><rect x="630.7" y="467.0" width="148.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="633.7" y="478.0">RequestHandler1_ent..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1,202 samples, 3.31%)</title><rect x="630.7" y="451.0" width="39.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="633.7" y="462.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (1,202 samples, 3.31%)</title><rect x="630.7" y="435.0" width="39.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="633.7" y="446.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,202 samples, 3.31%)</title><rect x="630.7" y="419.0" width="39.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="633.7" y="430.0">jav..</text>
</g>
<g>
<title>java.lang.String (422 samples, 1.16%)</title><rect x="630.7" y="403.0" width="13.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="633.7" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (780 samples, 2.15%)</title><rect x="644.5" y="403.0" width="25.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="647.5" y="414.0">j..</text>
</g>
<g>
<title>byte[] (780 samples, 2.15%)</title><rect x="644.5" y="387.0" width="25.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="647.5" y="398.0">b..</text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.entity (3,365 samples, 9.28%)</title><rect x="669.8" y="451.0" width="109.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="672.8" y="462.0">ru/mail/polis..</text>
</g>
<g>
<title>java/lang/String.getBytes (427 samples, 1.18%)</title><rect x="669.8" y="435.0" width="13.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="672.8" y="446.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (427 samples, 1.18%)</title><rect x="669.8" y="419.0" width="13.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="672.8" y="430.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (427 samples, 1.18%)</title><rect x="669.8" y="403.0" width="13.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="672.8" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (427 samples, 1.18%)</title><rect x="669.8" y="387.0" width="13.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="672.8" y="398.0"></text>
</g>
<g>
<title>byte[] (427 samples, 1.18%)</title><rect x="669.8" y="371.0" width="13.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="672.8" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (786 samples, 2.17%)</title><rect x="683.7" y="435.0" width="25.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="686.7" y="446.0">j..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (786 samples, 2.17%)</title><rect x="683.7" y="419.0" width="25.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="686.7" y="430.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl$$Lambda$71/1479409169.get$Lambda (786 samples, 2.17%)</title><rect x="683.7" y="403.0" width="25.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="686.7" y="414.0">r..</text>
</g>
<g>
<title>ru.mail.polis.service.alex.AsyncServiceImpl$$Lambda$71 (786 samples, 2.17%)</title><rect x="683.7" y="387.0" width="25.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="686.7" y="398.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,110 samples, 3.06%)</title><rect x="709.3" y="435.0" width="36.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="712.3" y="446.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,110 samples, 3.06%)</title><rect x="709.3" y="419.0" width="36.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="712.3" y="430.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,110 samples, 3.06%)</title><rect x="709.3" y="403.0" width="36.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="712.3" y="414.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.executeAsync (1,042 samples, 2.87%)</title><rect x="745.4" y="435.0" width="33.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="748.4" y="446.0">ru..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (505 samples, 1.39%)</title><rect x="745.4" y="419.0" width="16.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="748.4" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (505 samples, 1.39%)</title><rect x="745.4" y="403.0" width="16.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="748.4" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl$$Lambda$65/80866200.get$Lambda (505 samples, 1.39%)</title><rect x="745.4" y="387.0" width="16.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="748.4" y="398.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alex.AsyncServiceImpl$$Lambda$65 (505 samples, 1.39%)</title><rect x="745.4" y="371.0" width="16.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="748.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (537 samples, 1.48%)</title><rect x="761.9" y="419.0" width="17.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="764.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (537 samples, 1.48%)</title><rect x="761.9" y="403.0" width="17.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="764.9" y="414.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue$Node (526 samples, 1.45%)</title><rect x="761.9" y="387.0" width="17.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="764.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.02%)</title><rect x="779.0" y="387.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="782.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (9 samples, 0.02%)</title><rect x="779.0" y="371.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="782.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (9 samples, 0.02%)</title><rect x="779.0" y="355.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="782.0" y="366.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (9 samples, 0.02%)</title><rect x="779.0" y="339.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="782.0" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1,410 samples, 3.89%)</title><rect x="779.3" y="467.0" width="45.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="782.3" y="478.0">one/..</text>
</g>
<g>
<title>java/lang/String.substring (1,410 samples, 3.89%)</title><rect x="779.3" y="451.0" width="45.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="782.3" y="462.0">java..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,410 samples, 3.89%)</title><rect x="779.3" y="435.0" width="45.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="782.3" y="446.0">java..</text>
</g>
<g>
<title>java.lang.String (702 samples, 1.94%)</title><rect x="779.3" y="419.0" width="22.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="782.3" y="430.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (708 samples, 1.95%)</title><rect x="802.2" y="419.0" width="23.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="805.2" y="430.0">j..</text>
</g>
<g>
<title>byte[] (708 samples, 1.95%)</title><rect x="802.2" y="403.0" width="23.0" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="805.2" y="414.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7,677 samples, 21.17%)</title><rect x="825.2" y="499.0" width="249.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="828.2" y="510.0">one/nio/http/HttpSession.parseReq..</text>
</g>
<g>
<title>one.nio.http.Request (1,124 samples, 3.10%)</title><rect x="825.2" y="483.0" width="36.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="828.2" y="494.0">one..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2,010 samples, 5.54%)</title><rect x="861.8" y="483.0" width="65.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="864.8" y="494.0">one/nio..</text>
</g>
<g>
<title>java.lang.String[] (2,010 samples, 5.54%)</title><rect x="861.8" y="467.0" width="65.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="864.8" y="478.0">java.la..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,543 samples, 12.53%)</title><rect x="927.2" y="483.0" width="147.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="930.2" y="494.0">one/nio/util/Utf8.r..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,543 samples, 12.53%)</title><rect x="927.2" y="467.0" width="147.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="930.2" y="478.0">one/nio/util/Utf8.r..</text>
</g>
<g>
<title>char[] (2,904 samples, 8.01%)</title><rect x="927.2" y="451.0" width="94.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="930.2" y="462.0">char[]</text>
</g>
<g>
<title>java.lang.String (553 samples, 1.52%)</title><rect x="1021.7" y="451.0" width="18.0" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1024.7" y="462.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,086 samples, 2.99%)</title><rect x="1039.7" y="451.0" width="35.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1042.7" y="462.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,086 samples, 2.99%)</title><rect x="1039.7" y="435.0" width="35.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1042.7" y="446.0">jav..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,086 samples, 2.99%)</title><rect x="1039.7" y="419.0" width="35.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1042.7" y="430.0">jav..</text>
</g>
<g>
<title>byte[] (1,086 samples, 2.99%)</title><rect x="1039.7" y="403.0" width="35.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1042.7" y="414.0">byt..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,533 samples, 9.74%)</title><rect x="1075.0" y="499.0" width="115.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1078.0" y="510.0">one/nio/util/U..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,533 samples, 9.74%)</title><rect x="1075.0" y="483.0" width="115.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1078.0" y="494.0">one/nio/util/U..</text>
</g>
<g>
<title>char[] (1,485 samples, 4.09%)</title><rect x="1075.0" y="467.0" width="48.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1078.0" y="478.0">char[]</text>
</g>
<g>
<title>java.lang.String (430 samples, 1.19%)</title><rect x="1123.3" y="467.0" width="14.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1126.3" y="478.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,618 samples, 4.46%)</title><rect x="1137.3" y="467.0" width="52.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1140.3" y="478.0">java/..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,618 samples, 4.46%)</title><rect x="1137.3" y="451.0" width="52.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1140.3" y="462.0">java/..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,618 samples, 4.46%)</title><rect x="1137.3" y="435.0" width="52.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1140.3" y="446.0">java/..</text>
</g>
<g>
<title>byte[] (1,618 samples, 4.46%)</title><rect x="1137.3" y="419.0" width="52.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1140.3" y="430.0">byte[]</text>
</g>
</g>
</svg>
