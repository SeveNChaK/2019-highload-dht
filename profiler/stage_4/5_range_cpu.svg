<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1349"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1349"> </text>
<g id="frames">
<g>
<title>all (2,014 samples, 100.00%)</title><rect x="10.0" y="1315.0" width="1180.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="1326.0">all</text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="10.0" y="1299.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (2 samples, 0.10%)</title><rect x="10.6" y="1299.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.6" y="1310.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.05%)</title><rect x="11.8" y="1299.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.8" y="1310.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (22 samples, 1.09%)</title><rect x="12.3" y="1299.0" width="12.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.3" y="1310.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (21 samples, 1.04%)</title><rect x="12.9" y="1283.0" width="12.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="15.9" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (21 samples, 1.04%)</title><rect x="12.9" y="1267.0" width="12.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="15.9" y="1278.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.05%)</title><rect x="12.9" y="1251.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="15.9" y="1262.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (18 samples, 0.89%)</title><rect x="13.5" y="1251.0" width="10.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="16.5" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.10%)</title><rect x="14.1" y="1235.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="17.1" y="1246.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (12 samples, 0.60%)</title><rect x="15.3" y="1235.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="18.3" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (10 samples, 0.50%)</title><rect x="15.3" y="1219.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="18.3" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (9 samples, 0.45%)</title><rect x="15.9" y="1203.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="18.9" y="1214.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (4 samples, 0.20%)</title><rect x="15.9" y="1187.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="18.9" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (3 samples, 0.15%)</title><rect x="15.9" y="1171.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="18.9" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.05%)</title><rect x="15.9" y="1155.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="18.9" y="1166.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (2 samples, 0.10%)</title><rect x="16.4" y="1155.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="19.4" y="1166.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (2 samples, 0.10%)</title><rect x="16.4" y="1139.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="19.4" y="1150.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::num_par_ids() (2 samples, 0.10%)</title><rect x="16.4" y="1123.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="19.4" y="1134.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.05%)</title><rect x="17.6" y="1171.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="20.6" y="1182.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (4 samples, 0.20%)</title><rect x="18.2" y="1187.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="21.2" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (3 samples, 0.15%)</title><rect x="18.2" y="1171.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="21.2" y="1182.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (3 samples, 0.15%)</title><rect x="18.2" y="1155.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="21.2" y="1166.0"></text>
</g>
<g>
<title>G1Analytics::predict_card_num(unsigned long, bool) const (1 samples, 0.05%)</title><rect x="18.2" y="1139.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="21.2" y="1150.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.05%)</title><rect x="18.8" y="1139.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="21.8" y="1150.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="19.4" y="1139.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="22.4" y="1150.0"></text>
</g>
<g>
<title>HSpaceCounters::update_used(unsigned long) (1 samples, 0.05%)</title><rect x="20.0" y="1171.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="23.0" y="1182.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire_region(HeapRegion*, unsigned long) (1 samples, 0.05%)</title><rect x="20.5" y="1187.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="23.5" y="1198.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.05%)</title><rect x="21.1" y="1219.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="24.1" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.05%)</title><rect x="21.1" y="1203.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="24.1" y="1214.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.05%)</title><rect x="21.1" y="1187.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="24.1" y="1198.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.05%)</title><rect x="21.7" y="1219.0" width="0.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="24.7" y="1230.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.05%)</title><rect x="22.3" y="1235.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="25.3" y="1246.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (2 samples, 0.10%)</title><rect x="22.9" y="1235.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="25.9" y="1246.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.05%)</title><rect x="24.1" y="1251.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="27.1" y="1262.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.05%)</title><rect x="24.6" y="1251.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="27.6" y="1262.0"></text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.05%)</title><rect x="25.2" y="1299.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="28.2" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="25.2" y="1283.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="28.2" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="25.2" y="1267.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="28.2" y="1278.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (1 samples, 0.05%)</title><rect x="25.2" y="1251.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="28.2" y="1262.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.05%)</title><rect x="25.8" y="1299.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="28.8" y="1310.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="25.8" y="1283.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="28.8" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="26.4" y="1299.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="29.4" y="1310.0"></text>
</g>
<g>
<title>__GI___open64 (1 samples, 0.05%)</title><rect x="26.4" y="1283.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="29.4" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="26.4" y="1267.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="29.4" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="26.4" y="1251.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="29.4" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="26.4" y="1235.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="29.4" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="26.4" y="1219.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="29.4" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="26.4" y="1203.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="29.4" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="26.4" y="1187.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="29.4" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="26.4" y="1171.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="29.4" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="26.4" y="1155.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="29.4" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="26.4" y="1139.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="29.4" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="26.4" y="1123.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="29.4" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="26.4" y="1107.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="29.4" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="26.4" y="1091.0" width="0.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="29.4" y="1102.0"></text>
</g>
<g>
<title>[unknown_Java] (44 samples, 2.18%)</title><rect x="27.0" y="1299.0" width="25.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="30.0" y="1310.0">[..</text>
</g>
<g>
<title>__pthread_cond_timedwait (2 samples, 0.10%)</title><rect x="52.8" y="1299.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="55.8" y="1310.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,798 samples, 89.28%)</title><rect x="53.9" y="1299.0" width="1053.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="56.9" y="1310.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (89 samples, 4.42%)</title><rect x="55.7" y="1283.0" width="52.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="58.7" y="1294.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (2 samples, 0.10%)</title><rect x="58.6" y="1267.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.6" y="1278.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.05%)</title><rect x="59.2" y="1251.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="62.2" y="1262.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (82 samples, 4.07%)</title><rect x="59.8" y="1267.0" width="48.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="62.8" y="1278.0">one/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.05%)</title><rect x="69.2" y="1251.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="72.2" y="1262.0"></text>
</g>
<g>
<title>[unknown] (59 samples, 2.93%)</title><rect x="69.8" y="1251.0" width="34.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="72.8" y="1262.0">[u..</text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.10%)</title><rect x="69.8" y="1235.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="72.8" y="1246.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (4 samples, 0.20%)</title><rect x="70.9" y="1235.0" width="2.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="73.9" y="1246.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.10%)</title><rect x="73.3" y="1235.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="76.3" y="1246.0"></text>
</g>
<g>
<title>epoll_wait (51 samples, 2.53%)</title><rect x="74.4" y="1235.0" width="29.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="77.4" y="1246.0">ep..</text>
</g>
<g>
<title>[unknown] (40 samples, 1.99%)</title><rect x="80.9" y="1219.0" width="23.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="83.9" y="1230.0">[..</text>
</g>
<g>
<title>[unknown] (40 samples, 1.99%)</title><rect x="80.9" y="1203.0" width="23.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="83.9" y="1214.0">[..</text>
</g>
<g>
<title>[unknown] (38 samples, 1.89%)</title><rect x="82.1" y="1187.0" width="22.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="85.1" y="1198.0">[..</text>
</g>
<g>
<title>[unknown] (37 samples, 1.84%)</title><rect x="82.7" y="1171.0" width="21.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="85.7" y="1182.0">[..</text>
</g>
<g>
<title>[unknown] (37 samples, 1.84%)</title><rect x="82.7" y="1155.0" width="21.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="85.7" y="1166.0">[..</text>
</g>
<g>
<title>[unknown] (33 samples, 1.64%)</title><rect x="85.0" y="1139.0" width="19.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="88.0" y="1150.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 1.39%)</title><rect x="87.9" y="1123.0" width="16.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="90.9" y="1134.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 1.14%)</title><rect x="90.9" y="1107.0" width="13.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="93.9" y="1118.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 1.04%)</title><rect x="92.0" y="1091.0" width="12.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="95.0" y="1102.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.84%)</title><rect x="94.4" y="1075.0" width="9.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="97.4" y="1086.0"></text>
</g>
<g>
<title>_init (2 samples, 0.10%)</title><rect x="104.3" y="1251.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="107.3" y="1262.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.20%)</title><rect x="105.5" y="1251.0" width="2.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="108.5" y="1262.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,706 samples, 84.71%)</title><rect x="107.8" y="1283.0" width="999.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="110.8" y="1294.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,697 samples, 84.26%)</title><rect x="113.1" y="1267.0" width="994.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="116.1" y="1278.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,628 samples, 80.83%)</title><rect x="114.9" y="1251.0" width="953.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="117.9" y="1262.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,609 samples, 79.89%)</title><rect x="116.0" y="1235.0" width="942.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="119.0" y="1246.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,609 samples, 79.89%)</title><rect x="116.0" y="1219.0" width="942.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="119.0" y="1230.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler2_entities.handleRequest (1,607 samples, 79.79%)</title><rect x="116.0" y="1203.0" width="941.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="119.0" y="1214.0">RequestHandler2_entities.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.30%)</title><rect x="117.8" y="1187.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="120.8" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.15%)</title><rect x="118.4" y="1171.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="121.4" y="1182.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.15%)</title><rect x="118.4" y="1155.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="121.4" y="1166.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.05%)</title><rect x="118.4" y="1139.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="121.4" y="1150.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.10%)</title><rect x="119.0" y="1139.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="122.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.10%)</title><rect x="120.1" y="1171.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="123.1" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="120.1" y="1155.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="123.1" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="120.1" y="1139.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="123.1" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="120.1" y="1123.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="123.1" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="120.1" y="1107.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="123.1" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="120.1" y="1091.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="123.1" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="120.1" y="1075.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="123.1" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="120.1" y="1059.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="123.1" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="120.1" y="1043.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="123.1" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="120.1" y="1027.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="123.1" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="120.1" y="1011.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="123.1" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="120.1" y="995.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="123.1" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="120.1" y="979.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="123.1" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="120.1" y="963.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="123.1" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="120.1" y="947.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="123.1" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="120.1" y="931.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="123.1" y="942.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.05%)</title><rect x="120.7" y="1155.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="123.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.05%)</title><rect x="120.7" y="1139.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="123.7" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.entities (1,597 samples, 79.29%)</title><rect x="121.3" y="1187.0" width="935.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="124.3" y="1198.0">ru/mail/polis/service/alex/AsyncServiceImpl.entities</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.05%)</title><rect x="121.3" y="1171.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="124.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.05%)</title><rect x="121.3" y="1155.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="124.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.05%)</title><rect x="121.3" y="1139.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="124.3" y="1150.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.05%)</title><rect x="121.3" y="1123.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="124.3" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.25%)</title><rect x="121.9" y="1171.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="124.9" y="1182.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.25%)</title><rect x="121.9" y="1155.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="124.9" y="1166.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.25%)</title><rect x="121.9" y="1139.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="124.9" y="1150.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.25%)</title><rect x="121.9" y="1123.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="124.9" y="1134.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.25%)</title><rect x="121.9" y="1107.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="124.9" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.25%)</title><rect x="121.9" y="1091.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="124.9" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.20%)</title><rect x="122.5" y="1075.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="125.5" y="1086.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.15%)</title><rect x="123.1" y="1059.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="126.1" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.range (1,273 samples, 63.21%)</title><rect x="124.8" y="1171.0" width="745.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="127.8" y="1182.0">ru/mail/polis/dao/DAO.range</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.10%)</title><rect x="124.8" y="1155.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="127.8" y="1166.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.05%)</title><rect x="124.8" y="1139.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="127.8" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.05%)</title><rect x="125.4" y="1139.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="128.4" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (1 samples, 0.05%)</title><rect x="126.0" y="1155.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="129.0" y="1166.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.until (1 samples, 0.05%)</title><rect x="126.6" y="1155.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="129.6" y="1166.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.05%)</title><rect x="126.6" y="1139.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="129.6" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.05%)</title><rect x="126.6" y="1123.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="129.6" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.05%)</title><rect x="126.6" y="1107.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="129.6" y="1118.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.05%)</title><rect x="126.6" y="1091.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="129.6" y="1102.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.05%)</title><rect x="126.6" y="1075.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="129.6" y="1086.0"></text>
</g>
<g>
<title>StackMapTable::StackMapTable(StackMapReader*, StackMapFrame*, unsigned short, unsigned short, char*, int, Thread*) (1 samples, 0.05%)</title><rect x="126.6" y="1059.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="129.6" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/AlexDAO.iterator (1,269 samples, 63.01%)</title><rect x="127.2" y="1155.0" width="743.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="130.2" y="1166.0">ru/mail/polis/dao/alex/AlexDAO.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/AlexDAO.rowsIterator (1,269 samples, 63.01%)</title><rect x="127.2" y="1139.0" width="743.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="130.2" y="1150.0">ru/mail/polis/dao/alex/AlexDAO.rowsIterator</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.combineTables (39 samples, 1.94%)</title><rect x="127.2" y="1123.0" width="22.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="130.2" y="1134.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTablePool.iterator (39 samples, 1.94%)</title><rect x="127.2" y="1107.0" width="22.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="130.2" y="1118.0">r..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (8 samples, 0.40%)</title><rect x="127.2" y="1091.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="130.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (8 samples, 0.40%)</title><rect x="127.2" y="1075.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="130.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (7 samples, 0.35%)</title><rect x="127.8" y="1059.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="130.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.20%)</title><rect x="128.4" y="1043.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="131.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.10%)</title><rect x="129.5" y="1027.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="132.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.05%)</title><rect x="130.7" y="1043.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="133.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.fullTryAcquireShared (1 samples, 0.05%)</title><rect x="131.3" y="1043.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="134.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (1 samples, 0.05%)</title><rect x="131.9" y="1091.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="134.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.05%)</title><rect x="131.9" y="1075.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="134.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (1 samples, 0.05%)</title><rect x="131.9" y="1059.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="134.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.05%)</title><rect x="131.9" y="1043.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="134.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.05%)</title><rect x="131.9" y="1027.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="134.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.05%)</title><rect x="131.9" y="1011.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="134.9" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.combineTables (26 samples, 1.29%)</title><rect x="132.5" y="1091.0" width="15.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="135.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (4 samples, 0.20%)</title><rect x="132.5" y="1075.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="135.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (4 samples, 0.20%)</title><rect x="132.5" y="1059.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="135.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (4 samples, 0.20%)</title><rect x="132.5" y="1043.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="135.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (4 samples, 0.20%)</title><rect x="132.5" y="1027.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="135.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (4 samples, 0.20%)</title><rect x="132.5" y="1011.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="135.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (4 samples, 0.20%)</title><rect x="132.5" y="995.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.5" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTable.iterator (22 samples, 1.09%)</title><rect x="134.8" y="1075.0" width="12.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="137.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (3 samples, 0.15%)</title><rect x="134.8" y="1059.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="137.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.&lt;init&gt; (3 samples, 0.15%)</title><rect x="134.8" y="1043.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="137.8" y="1054.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.05%)</title><rect x="136.0" y="1027.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="139.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (19 samples, 0.94%)</title><rect x="136.6" y="1059.0" width="11.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="139.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (19 samples, 0.94%)</title><rect x="136.6" y="1043.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="139.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (19 samples, 0.94%)</title><rect x="136.6" y="1027.0" width="11.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="139.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (19 samples, 0.94%)</title><rect x="136.6" y="1011.0" width="11.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="139.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (19 samples, 0.94%)</title><rect x="136.6" y="995.0" width="11.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="139.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (4 samples, 0.20%)</title><rect x="136.6" y="979.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="139.6" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.20%)</title><rect x="136.6" y="963.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="139.6" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.20%)</title><rect x="136.6" y="947.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="139.6" y="958.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.15%)</title><rect x="136.6" y="931.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="139.6" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.10%)</title><rect x="137.1" y="915.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="140.1" y="926.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.10%)</title><rect x="137.1" y="899.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="140.1" y="910.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.05%)</title><rect x="138.3" y="931.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="141.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (15 samples, 0.74%)</title><rect x="138.9" y="979.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="141.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (5 samples, 0.25%)</title><rect x="144.8" y="963.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="147.8" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.25%)</title><rect x="144.8" y="947.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="147.8" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.20%)</title><rect x="145.3" y="931.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="148.3" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.05%)</title><rect x="145.3" y="915.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="148.3" y="926.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.15%)</title><rect x="145.9" y="915.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.9" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.transformRows (4 samples, 0.20%)</title><rect x="147.7" y="1091.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="150.7" y="1102.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (3 samples, 0.15%)</title><rect x="147.7" y="1075.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="150.7" y="1086.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (3 samples, 0.15%)</title><rect x="147.7" y="1059.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="150.7" y="1070.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (1 samples, 0.05%)</title><rect x="147.7" y="1043.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="150.7" y="1054.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (2 samples, 0.10%)</title><rect x="148.3" y="1043.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="151.3" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (1 samples, 0.05%)</title><rect x="149.4" y="1075.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="152.4" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (1 samples, 0.05%)</title><rect x="149.4" y="1059.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="152.4" y="1070.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.05%)</title><rect x="149.4" y="1043.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="152.4" y="1054.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (1 samples, 0.05%)</title><rect x="149.4" y="1027.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="152.4" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.transformRows (1,230 samples, 61.07%)</title><rect x="150.0" y="1123.0" width="720.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="153.0" y="1134.0">ru/mail/polis/dao/alex/Table.transformRows</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (1,230 samples, 61.07%)</title><rect x="150.0" y="1107.0" width="720.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="153.0" y="1118.0">com/google/common/collect/Iterators.mergeSorted</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (1,230 samples, 61.07%)</title><rect x="150.0" y="1091.0" width="720.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="153.0" y="1102.0">com/google/common/collect/Iterators$MergingIterator.&lt;init&gt;</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1,229 samples, 61.02%)</title><rect x="150.0" y="1075.0" width="720.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="153.0" y="1086.0">com/google/common/collect/AbstractIterator.hasNext</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (1,227 samples, 60.92%)</title><rect x="150.6" y="1059.0" width="718.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="153.6" y="1070.0">com/google/common/collect/AbstractIterator.tryToComputeNext</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (1,216 samples, 60.38%)</title><rect x="157.1" y="1043.0" width="712.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="160.1" y="1054.0">com/google/common/collect/Iterators$5.computeNext</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1,156 samples, 57.40%)</title><rect x="185.8" y="1027.0" width="677.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="188.8" y="1038.0">ru/mail/polis/dao/Iters$CollapseEqualsIterator.next</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (8 samples, 0.40%)</title><rect x="272.5" y="1011.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="275.5" y="1022.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (248 samples, 12.31%)</title><rect x="277.2" y="1011.0" width="145.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="280.2" y="1022.0">com/google/common/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (12 samples, 0.60%)</title><rect x="293.6" y="995.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.6" y="1006.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (88 samples, 4.37%)</title><rect x="300.6" y="995.0" width="51.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="303.6" y="1006.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (1 samples, 0.05%)</title><rect x="303.5" y="979.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="306.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (82 samples, 4.07%)</title><rect x="304.1" y="979.0" width="48.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="307.1" y="990.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (82 samples, 4.07%)</title><rect x="304.1" y="963.0" width="48.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="307.1" y="974.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (79 samples, 3.92%)</title><rect x="305.9" y="947.0" width="46.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.9" y="958.0">java..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (99 samples, 4.92%)</title><rect x="352.2" y="995.0" width="58.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="355.2" y="1006.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (99 samples, 4.92%)</title><rect x="352.2" y="979.0" width="58.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="355.2" y="990.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (21 samples, 1.04%)</title><rect x="410.2" y="995.0" width="12.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="413.2" y="1006.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (21 samples, 1.04%)</title><rect x="410.2" y="979.0" width="12.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="413.2" y="990.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (18 samples, 0.89%)</title><rect x="411.9" y="963.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="414.9" y="974.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (12 samples, 0.60%)</title><rect x="415.4" y="947.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="418.4" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (342 samples, 16.98%)</title><rect x="422.5" y="1011.0" width="200.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="425.5" y="1022.0">java/nio/ByteBuffer.equals</text>
</g>
<g>
<title>java/nio/Buffer.remaining (5 samples, 0.25%)</title><rect x="425.4" y="995.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="428.4" y="1006.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (332 samples, 16.48%)</title><rect x="428.3" y="995.0" width="194.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="431.3" y="1006.0">java/nio/BufferMismatch.m..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (139 samples, 6.90%)</title><rect x="541.4" y="979.0" width="81.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="544.4" y="990.0">java/nio/..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="587.1" y="963.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="590.1" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="587.1" y="947.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="590.1" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="587.1" y="931.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="590.1" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="587.1" y="915.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="590.1" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="587.1" y="899.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="590.1" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="587.1" y="883.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="590.1" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (48 samples, 2.38%)</title><rect x="587.7" y="963.0" width="28.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="590.7" y="974.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (12 samples, 0.60%)</title><rect x="615.8" y="963.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="618.8" y="974.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.05%)</title><rect x="622.9" y="1011.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="625.9" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="622.9" y="995.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="625.9" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="622.9" y="979.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="625.9" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="622.9" y="963.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="625.9" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="622.9" y="947.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="625.9" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="622.9" y="931.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="625.9" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="622.9" y="915.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="625.9" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="622.9" y="899.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="625.9" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="622.9" y="883.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="625.9" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$68/2007501970.apply (409 samples, 20.31%)</title><rect x="623.4" y="1011.0" width="239.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="626.4" y="1022.0">ru/mail/polis/dao/alex/Table$$La..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (113 samples, 5.61%)</title><rect x="796.9" y="995.0" width="66.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="799.9" y="1006.0">ru/mail..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (112 samples, 5.56%)</title><rect x="797.4" y="979.0" width="65.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="800.4" y="990.0">java/ni..</text>
</g>
<g>
<title>java/nio/Buffer.capacity (5 samples, 0.25%)</title><rect x="825.6" y="963.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="828.6" y="974.0"></text>
</g>
<g>
<title>java/nio/Buffer.markValue (6 samples, 0.30%)</title><rect x="828.5" y="963.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="831.5" y="974.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="832.0" y="963.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="835.0" y="974.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (52 samples, 2.58%)</title><rect x="832.6" y="963.0" width="30.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="835.6" y="974.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (48 samples, 2.38%)</title><rect x="834.9" y="947.0" width="28.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="837.9" y="958.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (41 samples, 2.04%)</title><rect x="839.0" y="931.0" width="24.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="842.0" y="942.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (33 samples, 1.64%)</title><rect x="843.7" y="915.0" width="19.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="846.7" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.50%)</title><rect x="847.8" y="899.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="850.8" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.50%)</title><rect x="847.8" y="883.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="850.8" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.50%)</title><rect x="847.8" y="867.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="850.8" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (16 samples, 0.79%)</title><rect x="853.7" y="899.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="856.7" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (16 samples, 0.79%)</title><rect x="853.7" y="883.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="856.7" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (16 samples, 0.79%)</title><rect x="853.7" y="867.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="856.7" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$70/1810074205.apply (11 samples, 0.55%)</title><rect x="863.1" y="1027.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="866.1" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.lambda$transformRows$0 (2 samples, 0.10%)</title><rect x="868.3" y="1011.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="871.3" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getValue (2 samples, 0.10%)</title><rect x="868.3" y="995.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="871.3" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1 samples, 0.05%)</title><rect x="869.5" y="1059.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="872.5" y="1070.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (1 samples, 0.05%)</title><rect x="870.1" y="1075.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="873.1" y="1086.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.&lt;init&gt; (1 samples, 0.05%)</title><rect x="870.1" y="1059.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="873.1" y="1070.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.05%)</title><rect x="870.1" y="1043.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="873.1" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/StorageSession.stream (318 samples, 15.79%)</title><rect x="870.7" y="1171.0" width="186.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="873.7" y="1182.0">ru/mail/polis/service/al..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="870.7" y="1155.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="873.7" y="1166.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (232 samples, 11.52%)</title><rect x="871.3" y="1155.0" width="135.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="874.3" y="1166.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.30%)</title><rect x="871.3" y="1139.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="874.3" y="1150.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="873.0" y="1123.0" width="0.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="876.0" y="1134.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.10%)</title><rect x="873.6" y="1123.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="876.6" y="1134.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.05%)</title><rect x="874.2" y="1107.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="877.2" y="1118.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (226 samples, 11.22%)</title><rect x="874.8" y="1139.0" width="132.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="877.8" y="1150.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/net/Session.write (226 samples, 11.22%)</title><rect x="874.8" y="1123.0" width="132.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="877.8" y="1134.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (225 samples, 11.17%)</title><rect x="875.4" y="1107.0" width="131.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="878.4" y="1118.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (224 samples, 11.12%)</title><rect x="876.0" y="1091.0" width="131.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="879.0" y="1102.0">one/nio/net/Nati..</text>
</g>
<g>
<title>[unknown] (10 samples, 0.50%)</title><rect x="876.5" y="1075.0" width="5.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="879.5" y="1086.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.50%)</title><rect x="876.5" y="1059.0" width="5.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="879.5" y="1070.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (8 samples, 0.40%)</title><rect x="876.5" y="1043.0" width="4.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="879.5" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (1 samples, 0.05%)</title><rect x="877.1" y="1027.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="880.1" y="1038.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.25%)</title><rect x="877.7" y="1027.0" width="2.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="880.7" y="1038.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (3 samples, 0.15%)</title><rect x="877.7" y="1011.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="880.7" y="1022.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.10%)</title><rect x="879.5" y="1011.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="882.5" y="1022.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.10%)</title><rect x="879.5" y="995.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="882.5" y="1006.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.05%)</title><rect x="880.6" y="1027.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="883.6" y="1038.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.05%)</title><rect x="881.2" y="1043.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="884.2" y="1054.0"></text>
</g>
<g>
<title>__send (1 samples, 0.05%)</title><rect x="881.8" y="1043.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="884.8" y="1054.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.05%)</title><rect x="882.4" y="1075.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="885.4" y="1086.0"></text>
</g>
<g>
<title>__send (212 samples, 10.53%)</title><rect x="883.0" y="1075.0" width="124.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="886.0" y="1086.0">__send</text>
</g>
<g>
<title>[unknown] (211 samples, 10.48%)</title><rect x="883.6" y="1059.0" width="123.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="886.6" y="1070.0">[unknown]</text>
</g>
<g>
<title>[unknown] (211 samples, 10.48%)</title><rect x="883.6" y="1043.0" width="123.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="886.6" y="1054.0">[unknown]</text>
</g>
<g>
<title>[unknown] (210 samples, 10.43%)</title><rect x="884.2" y="1027.0" width="123.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="887.2" y="1038.0">[unknown]</text>
</g>
<g>
<title>[unknown] (210 samples, 10.43%)</title><rect x="884.2" y="1011.0" width="123.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="887.2" y="1022.0">[unknown]</text>
</g>
<g>
<title>[unknown] (208 samples, 10.33%)</title><rect x="885.3" y="995.0" width="121.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="888.3" y="1006.0">[unknown]</text>
</g>
<g>
<title>[unknown] (208 samples, 10.33%)</title><rect x="885.3" y="979.0" width="121.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="888.3" y="990.0">[unknown]</text>
</g>
<g>
<title>[unknown] (204 samples, 10.13%)</title><rect x="887.7" y="963.0" width="119.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="890.7" y="974.0">[unknown]</text>
</g>
<g>
<title>[unknown] (202 samples, 10.03%)</title><rect x="888.8" y="947.0" width="118.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="891.8" y="958.0">[unknown]</text>
</g>
<g>
<title>[unknown] (200 samples, 9.93%)</title><rect x="890.0" y="931.0" width="117.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="893.0" y="942.0">[unknown]</text>
</g>
<g>
<title>[unknown] (193 samples, 9.58%)</title><rect x="894.1" y="915.0" width="113.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="897.1" y="926.0">[unknown]</text>
</g>
<g>
<title>[unknown] (184 samples, 9.14%)</title><rect x="899.4" y="899.0" width="107.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="902.4" y="910.0">[unknown]</text>
</g>
<g>
<title>[unknown] (172 samples, 8.54%)</title><rect x="906.4" y="883.0" width="100.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="909.4" y="894.0">[unknown]</text>
</g>
<g>
<title>[unknown] (160 samples, 7.94%)</title><rect x="913.5" y="867.0" width="93.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="916.5" y="878.0">[unknown]</text>
</g>
<g>
<title>[unknown] (156 samples, 7.75%)</title><rect x="915.8" y="851.0" width="91.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="918.8" y="862.0">[unknown]</text>
</g>
<g>
<title>[unknown] (150 samples, 7.45%)</title><rect x="919.3" y="835.0" width="87.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="922.3" y="846.0">[unknown]</text>
</g>
<g>
<title>[unknown] (147 samples, 7.30%)</title><rect x="921.1" y="819.0" width="86.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="924.1" y="830.0">[unknown]</text>
</g>
<g>
<title>[unknown] (144 samples, 7.15%)</title><rect x="922.8" y="803.0" width="84.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="925.8" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (143 samples, 7.10%)</title><rect x="923.4" y="787.0" width="83.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="926.4" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (135 samples, 6.70%)</title><rect x="928.1" y="771.0" width="79.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="931.1" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (128 samples, 6.36%)</title><rect x="932.2" y="755.0" width="75.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="935.2" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (112 samples, 5.56%)</title><rect x="941.6" y="739.0" width="65.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="944.6" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (106 samples, 5.26%)</title><rect x="945.1" y="723.0" width="62.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="948.1" y="734.0">[unkno..</text>
</g>
<g>
<title>[unknown] (99 samples, 4.92%)</title><rect x="949.2" y="707.0" width="58.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="952.2" y="718.0">[unkno..</text>
</g>
<g>
<title>[unknown] (95 samples, 4.72%)</title><rect x="951.5" y="691.0" width="55.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="954.5" y="702.0">[unkn..</text>
</g>
<g>
<title>[unknown] (93 samples, 4.62%)</title><rect x="952.7" y="675.0" width="54.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="955.7" y="686.0">[unkn..</text>
</g>
<g>
<title>[unknown] (91 samples, 4.52%)</title><rect x="953.9" y="659.0" width="53.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="956.9" y="670.0">[unkn..</text>
</g>
<g>
<title>[unknown] (89 samples, 4.42%)</title><rect x="955.1" y="643.0" width="52.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="958.1" y="654.0">[unkn..</text>
</g>
<g>
<title>[unknown] (86 samples, 4.27%)</title><rect x="956.8" y="627.0" width="50.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="959.8" y="638.0">[unkn..</text>
</g>
<g>
<title>[unknown] (84 samples, 4.17%)</title><rect x="958.0" y="611.0" width="49.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="961.0" y="622.0">[unkn..</text>
</g>
<g>
<title>[unknown] (82 samples, 4.07%)</title><rect x="959.2" y="595.0" width="48.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="962.2" y="606.0">[unk..</text>
</g>
<g>
<title>[unknown] (81 samples, 4.02%)</title><rect x="959.7" y="579.0" width="47.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="962.7" y="590.0">[unk..</text>
</g>
<g>
<title>[unknown] (80 samples, 3.97%)</title><rect x="960.3" y="563.0" width="46.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="963.3" y="574.0">[unk..</text>
</g>
<g>
<title>[unknown] (74 samples, 3.67%)</title><rect x="963.8" y="547.0" width="43.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="966.8" y="558.0">[unk..</text>
</g>
<g>
<title>[unknown] (72 samples, 3.57%)</title><rect x="965.0" y="531.0" width="42.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="968.0" y="542.0">[unk..</text>
</g>
<g>
<title>[unknown] (68 samples, 3.38%)</title><rect x="967.4" y="515.0" width="39.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="970.4" y="526.0">[un..</text>
</g>
<g>
<title>[unknown] (53 samples, 2.63%)</title><rect x="976.1" y="499.0" width="31.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="979.1" y="510.0">[u..</text>
</g>
<g>
<title>[unknown] (44 samples, 2.18%)</title><rect x="981.4" y="483.0" width="25.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="984.4" y="494.0">[..</text>
</g>
<g>
<title>[unknown] (43 samples, 2.14%)</title><rect x="982.0" y="467.0" width="25.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="985.0" y="478.0">[..</text>
</g>
<g>
<title>[unknown] (23 samples, 1.14%)</title><rect x="993.7" y="451.0" width="13.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="996.7" y="462.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.15%)</title><rect x="1005.4" y="435.0" width="1.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1008.4" y="446.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.15%)</title><rect x="1005.4" y="419.0" width="1.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1008.4" y="430.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.10%)</title><rect x="1006.0" y="403.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1009.0" y="414.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.10%)</title><rect x="1007.2" y="1155.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1010.2" y="1166.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="1007.8" y="1139.0" width="0.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1010.8" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.05%)</title><rect x="1007.8" y="1123.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1010.8" y="1134.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/StorageSession.next (80 samples, 3.97%)</title><rect x="1008.4" y="1155.0" width="46.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1011.4" y="1166.0">ru/m..</text>
</g>
<g>
<title>one/nio/net/Session.write (72 samples, 3.57%)</title><rect x="1009.0" y="1139.0" width="42.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1012.0" y="1150.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.&lt;init&gt; (3 samples, 0.15%)</title><rect x="1009.0" y="1123.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1012.0" y="1134.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (69 samples, 3.43%)</title><rect x="1010.7" y="1123.0" width="40.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1013.7" y="1134.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (68 samples, 3.38%)</title><rect x="1011.3" y="1107.0" width="39.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1014.3" y="1118.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (67 samples, 3.33%)</title><rect x="1011.9" y="1091.0" width="39.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1014.9" y="1102.0">one..</text>
</g>
<g>
<title>[unknown] (5 samples, 0.25%)</title><rect x="1012.5" y="1075.0" width="2.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1015.5" y="1086.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.25%)</title><rect x="1012.5" y="1059.0" width="2.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1015.5" y="1070.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (4 samples, 0.20%)</title><rect x="1012.5" y="1043.0" width="2.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1015.5" y="1054.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.05%)</title><rect x="1013.1" y="1027.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1016.1" y="1038.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.10%)</title><rect x="1013.6" y="1027.0" width="1.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1016.6" y="1038.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.05%)</title><rect x="1013.6" y="1011.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1016.6" y="1022.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.05%)</title><rect x="1014.2" y="1011.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1017.2" y="1022.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="1014.2" y="995.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1017.2" y="1006.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.05%)</title><rect x="1014.8" y="1043.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1017.8" y="1054.0"></text>
</g>
<g>
<title>__send (61 samples, 3.03%)</title><rect x="1015.4" y="1075.0" width="35.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1018.4" y="1086.0">__s..</text>
</g>
<g>
<title>[unknown] (61 samples, 3.03%)</title><rect x="1015.4" y="1059.0" width="35.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1018.4" y="1070.0">[un..</text>
</g>
<g>
<title>[unknown] (61 samples, 3.03%)</title><rect x="1015.4" y="1043.0" width="35.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1018.4" y="1054.0">[un..</text>
</g>
<g>
<title>[unknown] (57 samples, 2.83%)</title><rect x="1017.7" y="1027.0" width="33.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1020.7" y="1038.0">[u..</text>
</g>
<g>
<title>[unknown] (57 samples, 2.83%)</title><rect x="1017.7" y="1011.0" width="33.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1020.7" y="1022.0">[u..</text>
</g>
<g>
<title>[unknown] (57 samples, 2.83%)</title><rect x="1017.7" y="995.0" width="33.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1020.7" y="1006.0">[u..</text>
</g>
<g>
<title>[unknown] (57 samples, 2.83%)</title><rect x="1017.7" y="979.0" width="33.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1020.7" y="990.0">[u..</text>
</g>
<g>
<title>[unknown] (57 samples, 2.83%)</title><rect x="1017.7" y="963.0" width="33.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1020.7" y="974.0">[u..</text>
</g>
<g>
<title>[unknown] (57 samples, 2.83%)</title><rect x="1017.7" y="947.0" width="33.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1020.7" y="958.0">[u..</text>
</g>
<g>
<title>[unknown] (52 samples, 2.58%)</title><rect x="1020.7" y="931.0" width="30.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1023.7" y="942.0">[u..</text>
</g>
<g>
<title>[unknown] (49 samples, 2.43%)</title><rect x="1022.4" y="915.0" width="28.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1025.4" y="926.0">[u..</text>
</g>
<g>
<title>[unknown] (46 samples, 2.28%)</title><rect x="1024.2" y="899.0" width="26.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1027.2" y="910.0">[..</text>
</g>
<g>
<title>[unknown] (45 samples, 2.23%)</title><rect x="1024.8" y="883.0" width="26.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1027.8" y="894.0">[..</text>
</g>
<g>
<title>[unknown] (39 samples, 1.94%)</title><rect x="1028.3" y="867.0" width="22.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1031.3" y="878.0">[..</text>
</g>
<g>
<title>[unknown] (39 samples, 1.94%)</title><rect x="1028.3" y="851.0" width="22.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1031.3" y="862.0">[..</text>
</g>
<g>
<title>[unknown] (35 samples, 1.74%)</title><rect x="1030.6" y="835.0" width="20.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1033.6" y="846.0"></text>
</g>
<g>
<title>[unknown] (33 samples, 1.64%)</title><rect x="1031.8" y="819.0" width="19.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1034.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 1.59%)</title><rect x="1032.4" y="803.0" width="18.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1035.4" y="814.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 1.44%)</title><rect x="1034.2" y="787.0" width="16.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1037.2" y="798.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 1.39%)</title><rect x="1034.7" y="771.0" width="16.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1037.7" y="782.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 1.24%)</title><rect x="1036.5" y="755.0" width="14.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1039.5" y="766.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 1.14%)</title><rect x="1037.7" y="739.0" width="13.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1040.7" y="750.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.89%)</title><rect x="1040.6" y="723.0" width="10.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1043.6" y="734.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.79%)</title><rect x="1041.8" y="707.0" width="9.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1044.8" y="718.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.74%)</title><rect x="1042.4" y="691.0" width="8.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1045.4" y="702.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.74%)</title><rect x="1042.4" y="675.0" width="8.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1045.4" y="686.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.74%)</title><rect x="1042.4" y="659.0" width="8.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1045.4" y="670.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.74%)</title><rect x="1042.4" y="643.0" width="8.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1045.4" y="654.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.74%)</title><rect x="1042.4" y="627.0" width="8.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1045.4" y="638.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.60%)</title><rect x="1044.1" y="611.0" width="7.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1047.1" y="622.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.60%)</title><rect x="1044.1" y="595.0" width="7.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1047.1" y="606.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.55%)</title><rect x="1044.7" y="579.0" width="6.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1047.7" y="590.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.45%)</title><rect x="1045.9" y="563.0" width="5.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1048.9" y="574.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.40%)</title><rect x="1046.5" y="547.0" width="4.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1049.5" y="558.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.30%)</title><rect x="1047.6" y="531.0" width="3.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1050.6" y="542.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.30%)</title><rect x="1047.6" y="515.0" width="3.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1050.6" y="526.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.15%)</title><rect x="1049.4" y="499.0" width="1.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1052.4" y="510.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.15%)</title><rect x="1049.4" y="483.0" width="1.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1052.4" y="494.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.15%)</title><rect x="1049.4" y="467.0" width="1.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1052.4" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/TransferChunks.end (7 samples, 0.35%)</title><rect x="1051.1" y="1139.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1054.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/Object.clone (7 samples, 0.35%)</title><rect x="1051.1" y="1123.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1054.1" y="1134.0"></text>
</g>
<g>
<title>G1BarrierSet::invalidate(MemRegion) (2 samples, 0.10%)</title><rect x="1051.1" y="1107.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.1" y="1118.0"></text>
</g>
<g>
<title>JVM_Clone (4 samples, 0.20%)</title><rect x="1052.3" y="1107.0" width="2.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1055.3" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.10%)</title><rect x="1052.3" y="1091.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1055.3" y="1102.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.10%)</title><rect x="1052.3" y="1075.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1055.3" y="1086.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (2 samples, 0.10%)</title><rect x="1052.3" y="1059.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.3" y="1070.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.05%)</title><rect x="1053.5" y="1091.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1056.5" y="1102.0"></text>
</g>
<g>
<title>acl_CopyRight (1 samples, 0.05%)</title><rect x="1054.1" y="1091.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1057.1" y="1102.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.05%)</title><rect x="1054.7" y="1107.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1057.7" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/TransferChunks.&lt;init&gt; (3 samples, 0.15%)</title><rect x="1055.2" y="1155.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1058.2" y="1166.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.05%)</title><rect x="1055.8" y="1139.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1058.8" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/StorageSession.next (1 samples, 0.05%)</title><rect x="1056.4" y="1139.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1059.4" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/StorageSession.stream (1 samples, 0.05%)</title><rect x="1057.0" y="1187.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1060.0" y="1198.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.05%)</title><rect x="1057.6" y="1203.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1060.6" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.05%)</title><rect x="1057.6" y="1187.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1060.6" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.05%)</title><rect x="1057.6" y="1171.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1060.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.05%)</title><rect x="1057.6" y="1155.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1060.6" y="1166.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.05%)</title><rect x="1058.2" y="1203.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1061.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.05%)</title><rect x="1058.2" y="1187.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1061.2" y="1198.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (14 samples, 0.70%)</title><rect x="1058.8" y="1235.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1061.8" y="1246.0"></text>
</g>
<g>
<title>RequestHandler2_entities.handleRequest (1 samples, 0.05%)</title><rect x="1060.5" y="1219.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1063.5" y="1230.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.25%)</title><rect x="1061.1" y="1219.0" width="2.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1064.1" y="1230.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.25%)</title><rect x="1064.0" y="1219.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1067.0" y="1230.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.20%)</title><rect x="1064.6" y="1203.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1067.6" y="1214.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.10%)</title><rect x="1067.0" y="1235.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1070.0" y="1246.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="1068.1" y="1235.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1071.1" y="1246.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="1068.1" y="1219.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1071.1" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (66 samples, 3.28%)</title><rect x="1068.7" y="1251.0" width="38.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1071.7" y="1262.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (66 samples, 3.28%)</title><rect x="1068.7" y="1235.0" width="38.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1071.7" y="1246.0">one..</text>
</g>
<g>
<title>[unknown] (16 samples, 0.79%)</title><rect x="1069.9" y="1219.0" width="9.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1072.9" y="1230.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.79%)</title><rect x="1069.9" y="1203.0" width="9.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1072.9" y="1214.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (11 samples, 0.55%)</title><rect x="1069.9" y="1187.0" width="6.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1072.9" y="1198.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.05%)</title><rect x="1070.5" y="1171.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1073.5" y="1182.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.05%)</title><rect x="1071.1" y="1171.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1074.1" y="1182.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.05%)</title><rect x="1071.6" y="1171.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1074.6" y="1182.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (5 samples, 0.25%)</title><rect x="1072.2" y="1171.0" width="3.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1075.2" y="1182.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="1072.8" y="1155.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1075.8" y="1166.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (1 samples, 0.05%)</title><rect x="1073.4" y="1155.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1076.4" y="1166.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.10%)</title><rect x="1074.0" y="1155.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1077.0" y="1166.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="1074.6" y="1139.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1077.6" y="1150.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.05%)</title><rect x="1075.2" y="1171.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.2" y="1182.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.05%)</title><rect x="1075.7" y="1171.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1078.7" y="1182.0"></text>
</g>
<g>
<title>__GI___recv (2 samples, 0.10%)</title><rect x="1076.3" y="1187.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1079.3" y="1198.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.15%)</title><rect x="1077.5" y="1187.0" width="1.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1080.5" y="1198.0"></text>
</g>
<g>
<title>__GI___recv (48 samples, 2.38%)</title><rect x="1079.3" y="1219.0" width="28.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1082.3" y="1230.0">__..</text>
</g>
<g>
<title>[unknown] (47 samples, 2.33%)</title><rect x="1079.9" y="1203.0" width="27.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1082.9" y="1214.0">[..</text>
</g>
<g>
<title>[unknown] (47 samples, 2.33%)</title><rect x="1079.9" y="1187.0" width="27.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1082.9" y="1198.0">[..</text>
</g>
<g>
<title>[unknown] (43 samples, 2.14%)</title><rect x="1082.2" y="1171.0" width="25.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1085.2" y="1182.0">[..</text>
</g>
<g>
<title>[unknown] (43 samples, 2.14%)</title><rect x="1082.2" y="1155.0" width="25.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1085.2" y="1166.0">[..</text>
</g>
<g>
<title>[unknown] (42 samples, 2.09%)</title><rect x="1082.8" y="1139.0" width="24.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1085.8" y="1150.0">[..</text>
</g>
<g>
<title>[unknown] (41 samples, 2.04%)</title><rect x="1083.4" y="1123.0" width="24.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1086.4" y="1134.0">[..</text>
</g>
<g>
<title>[unknown] (38 samples, 1.89%)</title><rect x="1085.1" y="1107.0" width="22.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1088.1" y="1118.0">[..</text>
</g>
<g>
<title>[unknown] (32 samples, 1.59%)</title><rect x="1088.6" y="1091.0" width="18.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1091.6" y="1102.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 1.39%)</title><rect x="1091.0" y="1075.0" width="16.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1094.0" y="1086.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 1.09%)</title><rect x="1094.5" y="1059.0" width="12.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1097.5" y="1070.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.55%)</title><rect x="1100.9" y="1043.0" width="6.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1103.9" y="1054.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.30%)</title><rect x="1103.9" y="1027.0" width="3.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1106.9" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1106.8" y="1011.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1109.8" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1106.8" y="995.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1109.8" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1106.8" y="979.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1109.8" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1106.8" y="963.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1109.8" y="974.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (2 samples, 0.10%)</title><rect x="1107.4" y="1299.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1110.4" y="1310.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.10%)</title><rect x="1107.4" y="1283.0" width="1.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1110.4" y="1294.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.10%)</title><rect x="1107.4" y="1267.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1110.4" y="1278.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.10%)</title><rect x="1107.4" y="1251.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1110.4" y="1262.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.10%)</title><rect x="1107.4" y="1235.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1110.4" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1108.0" y="1219.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1111.0" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1108.0" y="1203.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1111.0" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1108.0" y="1187.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1111.0" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1108.0" y="1171.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1111.0" y="1182.0"></text>
</g>
<g>
<title>start_thread (139 samples, 6.90%)</title><rect x="1108.6" y="1299.0" width="81.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1111.6" y="1310.0">start_thr..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (139 samples, 6.90%)</title><rect x="1108.6" y="1283.0" width="81.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1111.6" y="1294.0">thread_na..</text>
</g>
<g>
<title>Thread::call_run() (139 samples, 6.90%)</title><rect x="1108.6" y="1267.0" width="81.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1111.6" y="1278.0">Thread::c..</text>
</g>
<g>
<title>GangWorker::loop() (37 samples, 1.84%)</title><rect x="1108.6" y="1251.0" width="21.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1111.6" y="1262.0">G..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (36 samples, 1.79%)</title><rect x="1108.6" y="1235.0" width="21.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.6" y="1246.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (25 samples, 1.24%)</title><rect x="1108.6" y="1219.0" width="14.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.6" y="1230.0"></text>
</g>
<g>
<title>SpinPause (23 samples, 1.14%)</title><rect x="1109.7" y="1203.0" width="13.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1112.7" y="1214.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (8 samples, 0.40%)</title><rect x="1123.2" y="1219.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.2" y="1230.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (8 samples, 0.40%)</title><rect x="1123.2" y="1203.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1126.2" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (8 samples, 0.40%)</title><rect x="1123.2" y="1187.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.2" y="1198.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (8 samples, 0.40%)</title><rect x="1123.2" y="1171.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.2" y="1182.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.35%)</title><rect x="1123.8" y="1155.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.8" y="1166.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (5 samples, 0.25%)</title><rect x="1123.8" y="1139.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.8" y="1150.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.20%)</title><rect x="1123.8" y="1123.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.8" y="1134.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.05%)</title><rect x="1125.6" y="1107.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.6" y="1118.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;TypeArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.05%)</title><rect x="1126.1" y="1123.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.1" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.123] (2 samples, 0.10%)</title><rect x="1126.7" y="1139.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.7" y="1150.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.10%)</title><rect x="1126.7" y="1123.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.7" y="1134.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.05%)</title><rect x="1127.3" y="1107.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.3" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (3 samples, 0.15%)</title><rect x="1127.9" y="1219.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.9" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.15%)</title><rect x="1127.9" y="1203.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.9" y="1214.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (3 samples, 0.15%)</title><rect x="1127.9" y="1187.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.9" y="1198.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (3 samples, 0.15%)</title><rect x="1127.9" y="1171.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.9" y="1182.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (2 samples, 0.10%)</title><rect x="1127.9" y="1155.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.9" y="1166.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (1 samples, 0.05%)</title><rect x="1127.9" y="1139.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.9" y="1150.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.05%)</title><rect x="1127.9" y="1123.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.9" y="1134.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.05%)</title><rect x="1127.9" y="1107.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.9" y="1118.0"></text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, bool*) (1 samples, 0.05%)</title><rect x="1127.9" y="1091.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.9" y="1102.0"></text>
</g>
<g>
<title>G1Allocator::survivor_attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.05%)</title><rect x="1127.9" y="1075.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.9" y="1086.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.05%)</title><rect x="1127.9" y="1059.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.9" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_gc_alloc_region(unsigned long, InCSetState) (1 samples, 0.05%)</title><rect x="1127.9" y="1043.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.9" y="1054.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.05%)</title><rect x="1127.9" y="1027.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.9" y="1038.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (1 samples, 0.05%)</title><rect x="1128.5" y="1139.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.5" y="1150.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (1 samples, 0.05%)</title><rect x="1129.1" y="1155.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.1" y="1166.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.05%)</title><rect x="1129.1" y="1139.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.1" y="1150.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.05%)</title><rect x="1129.7" y="1235.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.7" y="1246.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.05%)</title><rect x="1129.7" y="1219.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.7" y="1230.0"></text>
</g>
<g>
<title>Thread::is_Code_cache_sweeper_thread() const (1 samples, 0.05%)</title><rect x="1129.7" y="1203.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.7" y="1214.0"></text>
</g>
<g>
<title>JavaThread::run() (94 samples, 4.67%)</title><rect x="1130.2" y="1251.0" width="55.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.2" y="1262.0">JavaT..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (94 samples, 4.67%)</title><rect x="1130.2" y="1235.0" width="55.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.2" y="1246.0">JavaT..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (93 samples, 4.62%)</title><rect x="1130.2" y="1219.0" width="54.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.2" y="1230.0">Compi..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (92 samples, 4.57%)</title><rect x="1130.2" y="1203.0" width="53.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.2" y="1214.0">Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (86 samples, 4.27%)</title><rect x="1130.2" y="1187.0" width="50.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.2" y="1198.0">C2Com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (86 samples, 4.27%)</title><rect x="1130.2" y="1171.0" width="50.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.2" y="1182.0">Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (50 samples, 2.48%)</title><rect x="1130.2" y="1155.0" width="29.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.2" y="1166.0">Co..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.05%)</title><rect x="1130.2" y="1139.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1133.2" y="1150.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.05%)</title><rect x="1130.2" y="1123.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.2" y="1134.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.05%)</title><rect x="1130.8" y="1139.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1133.8" y="1150.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.05%)</title><rect x="1130.8" y="1123.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.8" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1130.8" y="1107.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1133.8" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1130.8" y="1091.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1133.8" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1130.8" y="1075.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1133.8" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1130.8" y="1059.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1133.8" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1130.8" y="1043.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1133.8" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1130.8" y="1027.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1133.8" y="1038.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.25%)</title><rect x="1131.4" y="1139.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.4" y="1150.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.10%)</title><rect x="1131.4" y="1123.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.4" y="1134.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.15%)</title><rect x="1132.6" y="1123.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.6" y="1134.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.05%)</title><rect x="1132.6" y="1107.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.6" y="1118.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.05%)</title><rect x="1133.2" y="1107.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.2" y="1118.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.05%)</title><rect x="1133.2" y="1091.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.2" y="1102.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.05%)</title><rect x="1133.2" y="1075.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.2" y="1086.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.05%)</title><rect x="1133.8" y="1107.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.8" y="1118.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.05%)</title><rect x="1133.8" y="1091.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.8" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.20%)</title><rect x="1134.3" y="1139.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.3" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.20%)</title><rect x="1134.3" y="1123.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.3" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::call_catch_cleanup(Block*) (1 samples, 0.05%)</title><rect x="1134.3" y="1107.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.3" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.05%)</title><rect x="1134.9" y="1107.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.9" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.05%)</title><rect x="1135.5" y="1107.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.5" y="1118.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.05%)</title><rect x="1135.5" y="1091.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.5" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1135.5" y="1075.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1138.5" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1135.5" y="1059.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1138.5" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1135.5" y="1043.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1138.5" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1135.5" y="1027.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1138.5" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1135.5" y="1011.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1138.5" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1135.5" y="995.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1138.5" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1135.5" y="979.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1138.5" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1135.5" y="963.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1138.5" y="974.0"></text>
</g>
<g>
<title>__memset_erms (1 samples, 0.05%)</title><rect x="1136.1" y="1107.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1139.1" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1136.1" y="1091.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1139.1" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1136.1" y="1075.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1139.1" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1136.1" y="1059.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1139.1" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (38 samples, 1.89%)</title><rect x="1136.7" y="1139.0" width="22.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.7" y="1150.0">P..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.10%)</title><rect x="1136.7" y="1123.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.7" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.15%)</title><rect x="1137.9" y="1123.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.9" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1138.4" y="1107.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.4" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.05%)</title><rect x="1139.0" y="1107.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.0" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.15%)</title><rect x="1139.6" y="1123.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.6" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.40%)</title><rect x="1141.4" y="1123.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.4" y="1134.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.05%)</title><rect x="1141.4" y="1107.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.4" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 0.30%)</title><rect x="1142.0" y="1107.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.0" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1144.9" y="1091.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.9" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.05%)</title><rect x="1145.5" y="1107.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.5" y="1118.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.05%)</title><rect x="1145.5" y="1091.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.5" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (2 samples, 0.10%)</title><rect x="1146.1" y="1123.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.1" y="1134.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.05%)</title><rect x="1146.6" y="1107.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1149.6" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.15%)</title><rect x="1147.2" y="1123.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.2" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.82] (1 samples, 0.05%)</title><rect x="1149.0" y="1123.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.0" y="1134.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.05%)</title><rect x="1149.0" y="1107.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.0" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.30%)</title><rect x="1149.6" y="1123.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.6" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.10%)</title><rect x="1151.9" y="1107.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.9" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 0.10%)</title><rect x="1153.1" y="1123.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.1" y="1134.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.15%)</title><rect x="1154.3" y="1123.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.3" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.05%)</title><rect x="1154.3" y="1107.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.3" y="1118.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.10%)</title><rect x="1154.8" y="1107.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.8" y="1118.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.05%)</title><rect x="1154.8" y="1091.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.8" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.05%)</title><rect x="1155.4" y="1091.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.4" y="1102.0"></text>
</g>
<g>
<title>jmpConUNode::ideal_Opcode() const (1 samples, 0.05%)</title><rect x="1155.4" y="1075.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.05%)</title><rect x="1156.0" y="1123.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.05%)</title><rect x="1156.6" y="1123.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.6" y="1134.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.05%)</title><rect x="1156.6" y="1107.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.6" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.15%)</title><rect x="1157.2" y="1123.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.2" y="1134.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.05%)</title><rect x="1157.8" y="1107.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.8" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.05%)</title><rect x="1158.4" y="1107.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.4" y="1118.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.05%)</title><rect x="1158.9" y="1139.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.9" y="1150.0"></text>
</g>
<g>
<title>Compile::Optimize() (25 samples, 1.24%)</title><rect x="1159.5" y="1155.0" width="14.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.5" y="1166.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.05%)</title><rect x="1159.5" y="1139.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.5" y="1150.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.05%)</title><rect x="1159.5" y="1123.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.5" y="1134.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.05%)</title><rect x="1160.1" y="1139.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.1" y="1150.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.05%)</title><rect x="1160.1" y="1123.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.1" y="1134.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.05%)</title><rect x="1160.1" y="1107.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.1" y="1118.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.05%)</title><rect x="1160.1" y="1091.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.1" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1160.1" y="1075.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1163.1" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1160.1" y="1059.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1163.1" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1160.1" y="1043.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1163.1" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1160.1" y="1027.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1163.1" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1160.1" y="1011.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1163.1" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1160.1" y="995.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1163.1" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1160.1" y="979.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1163.1" y="990.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.256] (2 samples, 0.10%)</title><rect x="1160.7" y="1139.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.05%)</title><rect x="1161.3" y="1123.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.3" y="1134.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1161.3" y="1107.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.3" y="1118.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1161.3" y="1091.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.3" y="1102.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.05%)</title><rect x="1161.3" y="1075.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.3" y="1086.0"></text>
</g>
<g>
<title>TypePtr::eq(Type const*) const [clone .part.89] (1 samples, 0.05%)</title><rect x="1161.3" y="1059.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.3" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.05%)</title><rect x="1161.9" y="1139.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.9" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.05%)</title><rect x="1161.9" y="1123.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.9" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::get_addp_base(Node*) (1 samples, 0.05%)</title><rect x="1161.9" y="1107.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.9" y="1118.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.05%)</title><rect x="1162.5" y="1139.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (16 samples, 0.79%)</title><rect x="1163.0" y="1139.0" width="9.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (6 samples, 0.30%)</title><rect x="1163.0" y="1123.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.0" y="1134.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.10%)</title><rect x="1165.4" y="1107.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.20%)</title><rect x="1166.6" y="1123.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.05%)</title><rect x="1168.9" y="1123.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 0.15%)</title><rect x="1169.5" y="1123.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.10%)</title><rect x="1170.1" y="1107.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.05%)</title><rect x="1170.1" y="1091.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.05%)</title><rect x="1170.1" y="1075.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.05%)</title><rect x="1170.7" y="1091.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.05%)</title><rect x="1170.7" y="1075.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.10%)</title><rect x="1171.3" y="1123.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.10%)</title><rect x="1171.3" y="1107.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.3" y="1118.0"></text>
</g>
<g>
<title>ConNode::hash() const (1 samples, 0.05%)</title><rect x="1171.3" y="1091.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.3" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.05%)</title><rect x="1171.3" y="1075.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.3" y="1086.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.05%)</title><rect x="1171.3" y="1059.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.3" y="1070.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.05%)</title><rect x="1171.8" y="1091.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1174.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.05%)</title><rect x="1172.4" y="1139.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.05%)</title><rect x="1172.4" y="1123.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.10%)</title><rect x="1173.0" y="1139.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.0" y="1150.0"></text>
</g>
<g>
<title>CmpLNode::sub(Type const*, Type const*) const (1 samples, 0.05%)</title><rect x="1173.0" y="1123.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.05%)</title><rect x="1173.6" y="1123.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.6" y="1134.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1173.6" y="1107.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.6" y="1118.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1173.6" y="1091.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.6" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.50%)</title><rect x="1174.2" y="1155.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.2" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.50%)</title><rect x="1174.2" y="1139.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.2" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.50%)</title><rect x="1174.2" y="1123.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.2" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.50%)</title><rect x="1174.2" y="1107.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.2" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.50%)</title><rect x="1174.2" y="1091.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.50%)</title><rect x="1174.2" y="1075.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.2" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.45%)</title><rect x="1174.2" y="1059.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.2" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.45%)</title><rect x="1174.2" y="1043.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.45%)</title><rect x="1174.2" y="1027.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.45%)</title><rect x="1174.2" y="1011.0" width="5.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.45%)</title><rect x="1174.2" y="995.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.45%)</title><rect x="1174.2" y="979.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.2" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.35%)</title><rect x="1174.2" y="963.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.2" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.35%)</title><rect x="1174.2" y="947.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.2" y="958.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.05%)</title><rect x="1174.2" y="931.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.2" y="942.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1174.2" y="915.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.2" y="926.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.05%)</title><rect x="1174.2" y="899.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1177.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.30%)</title><rect x="1174.8" y="931.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.30%)</title><rect x="1174.8" y="915.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.30%)</title><rect x="1174.8" y="899.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.8" y="910.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.05%)</title><rect x="1174.8" y="883.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.8" y="894.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.05%)</title><rect x="1174.8" y="867.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.8" y="878.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.05%)</title><rect x="1174.8" y="851.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.8" y="862.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.05%)</title><rect x="1174.8" y="835.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.8" y="846.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.05%)</title><rect x="1174.8" y="819.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="830.0"></text>
</g>
<g>
<title>GraphKit::memory(unsigned int) (1 samples, 0.05%)</title><rect x="1174.8" y="803.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.25%)</title><rect x="1175.4" y="883.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.4" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.20%)</title><rect x="1175.4" y="867.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.4" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.20%)</title><rect x="1175.4" y="851.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.20%)</title><rect x="1175.4" y="835.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.20%)</title><rect x="1175.4" y="819.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.20%)</title><rect x="1175.4" y="803.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.20%)</title><rect x="1175.4" y="787.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.4" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.15%)</title><rect x="1175.4" y="771.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.4" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.15%)</title><rect x="1175.4" y="755.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.15%)</title><rect x="1175.4" y="739.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.15%)</title><rect x="1175.4" y="723.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.15%)</title><rect x="1175.4" y="707.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.15%)</title><rect x="1175.4" y="691.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.4" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.10%)</title><rect x="1175.4" y="675.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.10%)</title><rect x="1175.4" y="659.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.10%)</title><rect x="1175.4" y="643.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.10%)</title><rect x="1175.4" y="627.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.10%)</title><rect x="1175.4" y="611.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.10%)</title><rect x="1175.4" y="595.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1175.4" y="579.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1175.4" y="563.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.4" y="574.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.05%)</title><rect x="1175.4" y="547.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.4" y="558.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.05%)</title><rect x="1175.4" y="531.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.4" y="542.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.05%)</title><rect x="1175.4" y="515.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.4" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1175.9" y="579.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1175.9" y="563.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1175.9" y="547.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1175.9" y="531.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1175.9" y="515.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1175.9" y="499.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1175.9" y="483.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1175.9" y="467.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1175.9" y="451.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1175.9" y="435.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1175.9" y="419.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1175.9" y="403.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1175.9" y="387.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.9" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1175.9" y="371.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1175.9" y="355.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1175.9" y="339.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1175.9" y="323.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1175.9" y="307.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1175.9" y="291.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1175.9" y="275.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.9" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1175.9" y="259.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1175.9" y="243.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1175.9" y="227.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1175.9" y="211.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1175.9" y="195.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.9" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1175.9" y="179.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.9" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1175.9" y="163.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1175.9" y="147.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1175.9" y="131.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1175.9" y="115.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="1175.9" y="99.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.9" y="110.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.05%)</title><rect x="1175.9" y="83.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.9" y="94.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.05%)</title><rect x="1175.9" y="67.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.9" y="78.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.05%)</title><rect x="1175.9" y="51.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.9" y="62.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.05%)</title><rect x="1175.9" y="35.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.9" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1176.5" y="675.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.5" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1176.5" y="659.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.5" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1176.5" y="643.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1176.5" y="627.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1176.5" y="611.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1176.5" y="595.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1176.5" y="579.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.5" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1176.5" y="563.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.5" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1176.5" y="547.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1176.5" y="531.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1176.5" y="515.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1176.5" y="499.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1176.5" y="483.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.5" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1176.5" y="467.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.5" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1176.5" y="451.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1176.5" y="435.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.5" y="446.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.05%)</title><rect x="1176.5" y="419.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.5" y="430.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) [clone .part.185] (1 samples, 0.05%)</title><rect x="1176.5" y="403.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.5" y="414.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1176.5" y="387.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.5" y="398.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.05%)</title><rect x="1176.5" y="371.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.5" y="382.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.05%)</title><rect x="1176.5" y="355.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.5" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1177.1" y="771.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.1" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1177.1" y="755.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.1" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1177.1" y="739.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1177.1" y="723.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1177.1" y="707.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1177.1" y="691.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1177.1" y="675.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.1" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1177.1" y="659.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1177.1" y="643.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1177.1" y="627.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1177.1" y="611.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1177.1" y="595.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1177.1" y="579.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1177.1" y="563.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.1" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1177.1" y="547.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1177.1" y="531.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1177.1" y="515.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1177.1" y="499.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1177.1" y="483.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1177.1" y="467.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1177.1" y="451.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1177.1" y="435.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1177.1" y="419.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1177.1" y="403.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1177.1" y="387.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1177.1" y="371.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.1" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1177.1" y="355.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1177.1" y="339.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1177.1" y="323.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1177.1" y="307.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1177.1" y="291.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.1" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1177.1" y="275.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1177.1" y="259.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1177.1" y="243.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1177.1" y="227.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1177.1" y="211.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.05%)</title><rect x="1177.1" y="195.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="206.0"></text>
</g>
<g>
<title>BranchData::is_BranchData() const (1 samples, 0.05%)</title><rect x="1177.1" y="179.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.1" y="190.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1177.7" y="867.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1177.7" y="851.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.7" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1177.7" y="835.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1177.7" y="819.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1177.7" y="803.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1177.7" y="787.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1177.7" y="771.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1177.7" y="755.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1177.7" y="739.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1177.7" y="723.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1177.7" y="707.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1177.7" y="691.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1177.7" y="675.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.7" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1177.7" y="659.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.7" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1177.7" y="643.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1177.7" y="627.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1177.7" y="611.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1177.7" y="595.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1177.7" y="579.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1177.7" y="563.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1177.7" y="547.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1177.7" y="531.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1177.7" y="515.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1177.7" y="499.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1177.7" y="483.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1177.7" y="467.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1177.7" y="451.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1177.7" y="435.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1177.7" y="419.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1177.7" y="403.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1177.7" y="387.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.7" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1177.7" y="371.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1177.7" y="355.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1177.7" y="339.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1177.7" y="323.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1177.7" y="307.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1177.7" y="291.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1177.7" y="275.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1177.7" y="259.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1177.7" y="243.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1177.7" y="227.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1177.7" y="211.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1177.7" y="195.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.7" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1177.7" y="179.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.7" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1177.7" y="163.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1177.7" y="147.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1177.7" y="131.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1177.7" y="115.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1177.7" y="99.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1177.7" y="83.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.7" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1177.7" y="67.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="78.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1177.7" y="51.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="62.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.10%)</title><rect x="1178.3" y="963.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.3" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.10%)</title><rect x="1178.3" y="947.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.10%)</title><rect x="1178.3" y="931.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.10%)</title><rect x="1178.3" y="915.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.10%)</title><rect x="1178.3" y="899.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.10%)</title><rect x="1178.3" y="883.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.10%)</title><rect x="1178.3" y="867.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.3" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.10%)</title><rect x="1178.3" y="851.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.10%)</title><rect x="1178.3" y="835.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.10%)</title><rect x="1178.3" y="819.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.10%)</title><rect x="1178.3" y="803.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.10%)</title><rect x="1178.3" y="787.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.10%)</title><rect x="1178.3" y="771.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.3" y="782.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1178.3" y="755.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.3" y="766.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="1178.3" y="739.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.3" y="750.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.05%)</title><rect x="1178.3" y="723.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.3" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="1178.3" y="707.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.3" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="1178.3" y="691.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.3" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1178.3" y="675.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.3" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1178.3" y="659.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1178.3" y="643.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.3" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1178.3" y="627.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.3" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.05%)</title><rect x="1178.3" y="611.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1178.3" y="595.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.3" y="606.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1178.3" y="579.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.3" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1178.3" y="563.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.3" y="574.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.05%)</title><rect x="1178.3" y="547.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.3" y="558.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.05%)</title><rect x="1178.9" y="755.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.9" y="766.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.05%)</title><rect x="1178.9" y="739.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="750.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.05%)</title><rect x="1178.9" y="723.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.9" y="734.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.05%)</title><rect x="1178.9" y="707.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="718.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.05%)</title><rect x="1179.5" y="1059.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.5" y="1070.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.05%)</title><rect x="1179.5" y="1043.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="1054.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1179.5" y="1027.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.5" y="1038.0"></text>
</g>
<g>
<title>Method::is_method() const volatile (1 samples, 0.05%)</title><rect x="1179.5" y="1011.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="1022.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.05%)</title><rect x="1180.0" y="1155.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.0" y="1166.0"></text>
</g>
<g>
<title>__memset_erms (1 samples, 0.05%)</title><rect x="1180.0" y="1139.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1183.0" y="1150.0"></text>
</g>
<g>
<title>CompileTask::print(outputStream*, char const*, bool, bool) (2 samples, 0.10%)</title><rect x="1180.6" y="1187.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.6" y="1198.0"></text>
</g>
<g>
<title>Method::print_short_name(outputStream*) (2 samples, 0.10%)</title><rect x="1180.6" y="1171.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.6" y="1182.0"></text>
</g>
<g>
<title>Symbol::print_symbol_on(outputStream*) const (2 samples, 0.10%)</title><rect x="1180.6" y="1155.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.6" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1180.6" y="1139.0" width="0.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1183.6" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1180.6" y="1123.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1183.6" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1180.6" y="1107.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1183.6" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1180.6" y="1091.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1183.6" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1180.6" y="1075.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1183.6" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1180.6" y="1059.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1183.6" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1180.6" y="1043.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1183.6" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1180.6" y="1027.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1183.6" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1180.6" y="1011.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1183.6" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1180.6" y="995.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1183.6" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1180.6" y="979.0" width="0.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1183.6" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1180.6" y="963.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1183.6" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1180.6" y="947.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1183.6" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1180.6" y="931.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1183.6" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1180.6" y="915.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1183.6" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1180.6" y="899.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1183.6" y="910.0"></text>
</g>
<g>
<title>__strcpy_sse2_unaligned (1 samples, 0.05%)</title><rect x="1181.2" y="1139.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1184.2" y="1150.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.15%)</title><rect x="1181.8" y="1187.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="1198.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 0.15%)</title><rect x="1181.8" y="1171.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="1182.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.15%)</title><rect x="1181.8" y="1155.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.8" y="1166.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.15%)</title><rect x="1181.8" y="1139.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="1150.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (1 samples, 0.05%)</title><rect x="1181.8" y="1123.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="1134.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.05%)</title><rect x="1181.8" y="1107.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.8" y="1118.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.05%)</title><rect x="1181.8" y="1091.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.8" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.05%)</title><rect x="1181.8" y="1075.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.8" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.05%)</title><rect x="1181.8" y="1059.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.8" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.05%)</title><rect x="1181.8" y="1043.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="1054.0"></text>
</g>
<g>
<title>BlockBegin::set_end(BlockEnd*) [clone .part.101] (1 samples, 0.05%)</title><rect x="1181.8" y="1027.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.8" y="1038.0"></text>
</g>
<g>
<title>BlockEnd::set_begin(BlockBegin*) (1 samples, 0.05%)</title><rect x="1181.8" y="1011.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="1022.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.10%)</title><rect x="1182.4" y="1123.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.4" y="1134.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.10%)</title><rect x="1182.4" y="1107.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.4" y="1118.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (2 samples, 0.10%)</title><rect x="1182.4" y="1091.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.4" y="1102.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (2 samples, 0.10%)</title><rect x="1182.4" y="1075.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.4" y="1086.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.05%)</title><rect x="1182.4" y="1059.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.4" y="1070.0"></text>
</g>
<g>
<title>LinearScan::color_lir_opr(LIR_OprDesc*, int, LIR_OpVisitState::OprMode) (1 samples, 0.05%)</title><rect x="1183.0" y="1059.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="1070.0"></text>
</g>
<g>
<title>Interval::split_child_at_op_id(int, LIR_OpVisitState::OprMode) (1 samples, 0.05%)</title><rect x="1183.0" y="1043.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.0" y="1054.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.05%)</title><rect x="1183.6" y="1187.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.6" y="1198.0"></text>
</g>
<g>
<title>ciObjectFactory::remove_symbols() (1 samples, 0.05%)</title><rect x="1183.6" y="1171.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.6" y="1182.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.05%)</title><rect x="1184.1" y="1203.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.1" y="1214.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.05%)</title><rect x="1184.1" y="1187.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.1" y="1198.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.05%)</title><rect x="1184.7" y="1219.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.7" y="1230.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.05%)</title><rect x="1184.7" y="1203.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.7" y="1214.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.05%)</title><rect x="1184.7" y="1187.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.7" y="1198.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.05%)</title><rect x="1184.7" y="1171.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1187.7" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::get_jmethod_id(methodHandle const&amp;) (1 samples, 0.05%)</title><rect x="1184.7" y="1155.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.7" y="1166.0"></text>
</g>
<g>
<title>VMThread::run() (8 samples, 0.40%)</title><rect x="1185.3" y="1251.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.3" y="1262.0"></text>
</g>
<g>
<title>VMThread::loop() (8 samples, 0.40%)</title><rect x="1185.3" y="1235.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.3" y="1246.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.05%)</title><rect x="1185.3" y="1219.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.3" y="1230.0"></text>
</g>
<g>
<title>ThreadSafepointState::examine_state_of_thread() (1 samples, 0.05%)</title><rect x="1185.3" y="1203.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.3" y="1214.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (6 samples, 0.30%)</title><rect x="1185.9" y="1219.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.9" y="1230.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (6 samples, 0.30%)</title><rect x="1185.9" y="1203.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.9" y="1214.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (6 samples, 0.30%)</title><rect x="1185.9" y="1187.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.9" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (4 samples, 0.20%)</title><rect x="1186.5" y="1171.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.5" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (2 samples, 0.10%)</title><rect x="1186.5" y="1155.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.5" y="1166.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (1 samples, 0.05%)</title><rect x="1187.1" y="1139.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.1" y="1150.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.05%)</title><rect x="1187.1" y="1123.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.1" y="1134.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.05%)</title><rect x="1187.1" y="1107.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1190.1" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1187.1" y="1091.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1190.1" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1187.1" y="1075.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1190.1" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1187.1" y="1059.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1190.1" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1187.1" y="1043.0" width="0.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1190.1" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1187.1" y="1027.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1190.1" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1187.1" y="1011.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1190.1" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1187.1" y="995.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1190.1" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1187.1" y="979.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1190.1" y="990.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print() (1 samples, 0.05%)</title><rect x="1187.7" y="1155.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.7" y="1166.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print_evacuate_collection_set() const (1 samples, 0.05%)</title><rect x="1187.7" y="1139.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.7" y="1150.0"></text>
</g>
<g>
<title>TraceMemoryManagerStats::TraceMemoryManagerStats(GCMemoryManager*, GCCause::Cause, bool, bool, bool, bool, bool, bool, bool, bool) (1 samples, 0.05%)</title><rect x="1188.2" y="1155.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.2" y="1166.0"></text>
</g>
<g>
<title>GCMemoryManager::gc_begin(bool, bool, bool) (1 samples, 0.05%)</title><rect x="1188.2" y="1139.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.2" y="1150.0"></text>
</g>
<g>
<title>CodeHeap::allocated_capacity() const (1 samples, 0.05%)</title><rect x="1188.2" y="1123.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.2" y="1134.0"></text>
</g>
<g>
<title>__strncpy_sse2_unaligned (1 samples, 0.05%)</title><rect x="1188.8" y="1171.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1191.8" y="1182.0"></text>
</g>
<g>
<title>__GI___sched_yield (1 samples, 0.05%)</title><rect x="1189.4" y="1219.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1192.4" y="1230.0"></text>
</g>
</g>
</svg>
