<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1430" onload="init(evt)" viewBox="0 0 1200 1430" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1413"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1413"> </text>
<g id="frames">
<g>
<title>all (1,720 samples, 100.00%)</title><rect x="10.0" y="1379.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1390.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.12%)</title><rect x="10.0" y="1363.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.06%)</title><rect x="10.0" y="1347.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.06%)</title><rect x="10.0" y="1331.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.06%)</title><rect x="10.0" y="1315.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.06%)</title><rect x="10.0" y="1299.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.06%)</title><rect x="10.7" y="1347.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.7" y="1358.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.06%)</title><rect x="10.7" y="1331.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.7" y="1342.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.06%)</title><rect x="10.7" y="1315.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.7" y="1326.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.06%)</title><rect x="10.7" y="1299.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.7" y="1310.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.06%)</title><rect x="11.4" y="1363.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.4" y="1374.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.06%)</title><rect x="11.4" y="1347.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.4" y="1358.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.06%)</title><rect x="11.4" y="1331.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.4" y="1342.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.06%)</title><rect x="11.4" y="1315.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.4" y="1326.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.06%)</title><rect x="11.4" y="1299.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.4" y="1310.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.06%)</title><rect x="12.1" y="1363.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.1" y="1374.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.06%)</title><rect x="12.1" y="1347.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.1" y="1358.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.06%)</title><rect x="12.1" y="1331.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.1" y="1342.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.06%)</title><rect x="12.1" y="1315.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.1" y="1326.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.06%)</title><rect x="12.1" y="1299.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.1" y="1310.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.06%)</title><rect x="12.1" y="1283.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="15.1" y="1294.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (6 samples, 0.35%)</title><rect x="12.7" y="1363.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="15.7" y="1374.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (6 samples, 0.35%)</title><rect x="12.7" y="1347.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.7" y="1358.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.74] (1 samples, 0.06%)</title><rect x="12.7" y="1331.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="15.7" y="1342.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 0.23%)</title><rect x="13.4" y="1331.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="16.4" y="1342.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.74] (3 samples, 0.17%)</title><rect x="14.1" y="1315.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="17.1" y="1326.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.96] (1 samples, 0.06%)</title><rect x="16.2" y="1331.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="19.2" y="1342.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.06%)</title><rect x="16.2" y="1315.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="19.2" y="1326.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.06%)</title><rect x="16.2" y="1299.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="19.2" y="1310.0"></text>
</g>
<g>
<title>[not_walkable] (2 samples, 0.12%)</title><rect x="16.9" y="1363.0" width="1.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="19.9" y="1374.0"></text>
</g>
<g>
<title>[unknown_Java] (9 samples, 0.52%)</title><rect x="18.2" y="1363.0" width="6.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="21.2" y="1374.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.06%)</title><rect x="22.3" y="1347.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="25.3" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="23.0" y="1347.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="26.0" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="23.0" y="1331.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="26.0" y="1342.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.06%)</title><rect x="23.0" y="1315.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="26.0" y="1326.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.06%)</title><rect x="23.7" y="1347.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="26.7" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="23.7" y="1331.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="26.7" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="23.7" y="1315.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="26.7" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="23.7" y="1299.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="26.7" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="23.7" y="1283.0" width="0.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="26.7" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="23.7" y="1267.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="26.7" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="23.7" y="1251.0" width="0.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="26.7" y="1262.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.06%)</title><rect x="24.4" y="1363.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="27.4" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="24.4" y="1347.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="27.4" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="24.4" y="1331.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="27.4" y="1342.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,067 samples, 62.03%)</title><rect x="25.1" y="1363.0" width="732.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.1" y="1374.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,067 samples, 62.03%)</title><rect x="25.1" y="1347.0" width="732.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.1" y="1358.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,067 samples, 62.03%)</title><rect x="25.1" y="1331.0" width="732.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.1" y="1342.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.12%)</title><rect x="27.8" y="1315.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.8" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.12%)</title><rect x="27.8" y="1299.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.8" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.12%)</title><rect x="27.8" y="1283.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.06%)</title><rect x="28.5" y="1267.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.5" y="1278.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl$$Lambda$65/80866200.run (1 samples, 0.06%)</title><rect x="28.5" y="1251.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="31.5" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (252 samples, 14.65%)</title><rect x="29.2" y="1315.0" width="172.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.2" y="1326.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (251 samples, 14.59%)</title><rect x="29.9" y="1299.0" width="172.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="32.9" y="1310.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (175 samples, 10.17%)</title><rect x="29.9" y="1283.0" width="120.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.9" y="1294.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.35%)</title><rect x="35.4" y="1267.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="38.4" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (18 samples, 1.05%)</title><rect x="39.5" y="1267.0" width="12.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="42.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (18 samples, 1.05%)</title><rect x="39.5" y="1251.0" width="12.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="42.5" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.64%)</title><rect x="42.2" y="1235.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="45.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.64%)</title><rect x="42.2" y="1219.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="45.2" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.52%)</title><rect x="43.6" y="1203.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.6" y="1214.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.06%)</title><rect x="43.6" y="1187.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="46.6" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.06%)</title><rect x="43.6" y="1171.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="46.6" y="1182.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (8 samples, 0.47%)</title><rect x="44.3" y="1187.0" width="5.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="47.3" y="1198.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.47%)</title><rect x="44.3" y="1171.0" width="5.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="47.3" y="1182.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.47%)</title><rect x="44.3" y="1155.0" width="5.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="47.3" y="1166.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.47%)</title><rect x="44.3" y="1139.0" width="5.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="47.3" y="1150.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.47%)</title><rect x="44.3" y="1123.0" width="5.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="47.3" y="1134.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.47%)</title><rect x="44.3" y="1107.0" width="5.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="47.3" y="1118.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.41%)</title><rect x="45.0" y="1091.0" width="4.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="48.0" y="1102.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.41%)</title><rect x="45.0" y="1075.0" width="4.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="48.0" y="1086.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.41%)</title><rect x="45.0" y="1059.0" width="4.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="48.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.17%)</title><rect x="49.8" y="1235.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="52.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (142 samples, 8.26%)</title><rect x="51.8" y="1267.0" width="97.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.8" y="1278.0">java/util/c..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (142 samples, 8.26%)</title><rect x="51.8" y="1251.0" width="97.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="54.8" y="1262.0">jdk/interna..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.06%)</title><rect x="56.0" y="1235.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="59.0" y="1246.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (3 samples, 0.17%)</title><rect x="56.7" y="1235.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="59.7" y="1246.0"></text>
</g>
<g>
<title>Unsafe_Park (53 samples, 3.08%)</title><rect x="58.7" y="1235.0" width="36.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="61.7" y="1246.0">Uns..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.06%)</title><rect x="60.8" y="1219.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="63.8" y="1230.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.12%)</title><rect x="61.5" y="1219.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="64.5" y="1230.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.12%)</title><rect x="62.8" y="1219.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="65.8" y="1230.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (17 samples, 0.99%)</title><rect x="64.2" y="1219.0" width="11.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="67.2" y="1230.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.12%)</title><rect x="68.3" y="1203.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="71.3" y="1214.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.12%)</title><rect x="69.7" y="1203.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="72.7" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="71.1" y="1203.0" width="0.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="74.1" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="71.1" y="1187.0" width="0.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="74.1" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="71.1" y="1171.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="74.1" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="71.1" y="1155.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="74.1" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="71.1" y="1139.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="74.1" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="71.1" y="1123.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="74.1" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="71.1" y="1107.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="74.1" y="1118.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.23%)</title><rect x="71.7" y="1203.0" width="2.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="74.7" y="1214.0"></text>
</g>
<g>
<title>_init (2 samples, 0.12%)</title><rect x="74.5" y="1203.0" width="1.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="77.5" y="1214.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="75.9" y="1219.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="78.9" y="1230.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (1 samples, 0.06%)</title><rect x="76.5" y="1219.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="79.5" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="77.2" y="1219.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="80.2" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="77.2" y="1203.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="80.2" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="77.2" y="1187.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="80.2" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="77.2" y="1171.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="80.2" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="77.2" y="1155.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="80.2" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="77.2" y="1139.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="80.2" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="77.2" y="1123.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="80.2" y="1134.0"></text>
</g>
<g>
<title>__lll_unlock_wake (14 samples, 0.81%)</title><rect x="77.9" y="1219.0" width="9.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="80.9" y="1230.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.76%)</title><rect x="78.6" y="1203.0" width="8.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="81.6" y="1214.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.76%)</title><rect x="78.6" y="1187.0" width="8.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="81.6" y="1198.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.41%)</title><rect x="82.7" y="1171.0" width="4.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="85.7" y="1182.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.41%)</title><rect x="82.7" y="1155.0" width="4.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="85.7" y="1166.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.35%)</title><rect x="83.4" y="1139.0" width="4.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="86.4" y="1150.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.23%)</title><rect x="84.8" y="1123.0" width="2.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="87.8" y="1134.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 0.17%)</title><rect x="87.5" y="1219.0" width="2.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="90.5" y="1230.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.12%)</title><rect x="89.6" y="1219.0" width="1.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="92.6" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.12%)</title><rect x="91.0" y="1219.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="94.0" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.06%)</title><rect x="92.3" y="1219.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="95.3" y="1230.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.06%)</title><rect x="93.0" y="1219.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="96.0" y="1230.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.12%)</title><rect x="93.7" y="1219.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="96.7" y="1230.0"></text>
</g>
<g>
<title>[unknown] (79 samples, 4.59%)</title><rect x="95.1" y="1235.0" width="54.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="98.1" y="1246.0">[unkn..</text>
</g>
<g>
<title>__pthread_cleanup_pop (1 samples, 0.06%)</title><rect x="95.1" y="1219.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="98.1" y="1230.0"></text>
</g>
<g>
<title>__pthread_cond_wait (75 samples, 4.36%)</title><rect x="95.8" y="1219.0" width="51.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="98.8" y="1230.0">__pth..</text>
</g>
<g>
<title>[unknown] (59 samples, 3.43%)</title><rect x="106.7" y="1203.0" width="40.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="109.7" y="1214.0">[un..</text>
</g>
<g>
<title>[unknown] (59 samples, 3.43%)</title><rect x="106.7" y="1187.0" width="40.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="109.7" y="1198.0">[un..</text>
</g>
<g>
<title>[unknown] (59 samples, 3.43%)</title><rect x="106.7" y="1171.0" width="40.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="109.7" y="1182.0">[un..</text>
</g>
<g>
<title>[unknown] (56 samples, 3.26%)</title><rect x="108.8" y="1155.0" width="38.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="111.8" y="1166.0">[un..</text>
</g>
<g>
<title>[unknown] (55 samples, 3.20%)</title><rect x="109.5" y="1139.0" width="37.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="112.5" y="1150.0">[un..</text>
</g>
<g>
<title>[unknown] (53 samples, 3.08%)</title><rect x="110.8" y="1123.0" width="36.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="113.8" y="1134.0">[un..</text>
</g>
<g>
<title>[unknown] (42 samples, 2.44%)</title><rect x="118.4" y="1107.0" width="28.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="121.4" y="1118.0">[u..</text>
</g>
<g>
<title>[unknown] (34 samples, 1.98%)</title><rect x="123.9" y="1091.0" width="23.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="126.9" y="1102.0">[..</text>
</g>
<g>
<title>[unknown] (31 samples, 1.80%)</title><rect x="125.9" y="1075.0" width="21.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="128.9" y="1086.0">[..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="146.5" y="1059.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="149.5" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="146.5" y="1043.0" width="0.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="149.5" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="146.5" y="1027.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="149.5" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="146.5" y="1011.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="149.5" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="146.5" y="995.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="149.5" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="146.5" y="979.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="149.5" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="146.5" y="963.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="149.5" y="974.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.06%)</title><rect x="147.2" y="1219.0" width="0.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="150.2" y="1230.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.06%)</title><rect x="147.9" y="1219.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="150.9" y="1230.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.06%)</title><rect x="148.6" y="1219.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="151.6" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.06%)</title><rect x="149.3" y="1267.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="152.3" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.23%)</title><rect x="150.0" y="1283.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="153.0" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (5 samples, 0.29%)</title><rect x="152.7" y="1283.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="155.7" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (5 samples, 0.29%)</title><rect x="152.7" y="1267.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="155.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (5 samples, 0.29%)</title><rect x="152.7" y="1251.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="155.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.12%)</title><rect x="154.1" y="1235.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="157.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.12%)</title><rect x="154.1" y="1219.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="157.1" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.12%)</title><rect x="154.1" y="1203.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="157.1" y="1214.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.12%)</title><rect x="154.1" y="1187.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="157.1" y="1198.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.06%)</title><rect x="154.1" y="1171.0" width="0.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="157.1" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="154.1" y="1155.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="157.1" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="154.1" y="1139.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="157.1" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="154.1" y="1123.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="157.1" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="154.1" y="1107.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="157.1" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="154.1" y="1091.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="157.1" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.06%)</title><rect x="154.8" y="1171.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="157.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (1 samples, 0.06%)</title><rect x="155.4" y="1235.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="158.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (67 samples, 3.90%)</title><rect x="156.1" y="1283.0" width="46.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.1" y="1294.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (67 samples, 3.90%)</title><rect x="156.1" y="1267.0" width="46.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.1" y="1278.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (67 samples, 3.90%)</title><rect x="156.1" y="1251.0" width="46.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="159.1" y="1262.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (67 samples, 3.90%)</title><rect x="156.1" y="1235.0" width="46.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="159.1" y="1246.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (52 samples, 3.02%)</title><rect x="166.4" y="1219.0" width="35.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="169.4" y="1230.0">jdk..</text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.06%)</title><rect x="166.4" y="1203.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="169.4" y="1214.0"></text>
</g>
<g>
<title>Unsafe_Unpark (10 samples, 0.58%)</title><rect x="167.1" y="1203.0" width="6.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="170.1" y="1214.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.06%)</title><rect x="167.1" y="1187.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="170.1" y="1198.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.17%)</title><rect x="167.8" y="1187.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="170.8" y="1198.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.17%)</title><rect x="169.8" y="1187.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="172.8" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (2 samples, 0.12%)</title><rect x="171.9" y="1187.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="174.9" y="1198.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.06%)</title><rect x="173.3" y="1187.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="176.3" y="1198.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.12%)</title><rect x="174.0" y="1203.0" width="1.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="177.0" y="1214.0"></text>
</g>
<g>
<title>_init (1 samples, 0.06%)</title><rect x="175.3" y="1203.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="178.3" y="1214.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (38 samples, 2.21%)</title><rect x="176.0" y="1203.0" width="26.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="179.0" y="1214.0">p..</text>
</g>
<g>
<title>[unknown] (37 samples, 2.15%)</title><rect x="176.7" y="1187.0" width="25.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="179.7" y="1198.0">[..</text>
</g>
<g>
<title>[unknown] (37 samples, 2.15%)</title><rect x="176.7" y="1171.0" width="25.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="179.7" y="1182.0">[..</text>
</g>
<g>
<title>[unknown] (37 samples, 2.15%)</title><rect x="176.7" y="1155.0" width="25.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="179.7" y="1166.0">[..</text>
</g>
<g>
<title>[unknown] (37 samples, 2.15%)</title><rect x="176.7" y="1139.0" width="25.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="179.7" y="1150.0">[..</text>
</g>
<g>
<title>[unknown] (37 samples, 2.15%)</title><rect x="176.7" y="1123.0" width="25.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="179.7" y="1134.0">[..</text>
</g>
<g>
<title>[unknown] (34 samples, 1.98%)</title><rect x="178.8" y="1107.0" width="23.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="181.8" y="1118.0">[..</text>
</g>
<g>
<title>[unknown] (29 samples, 1.69%)</title><rect x="182.2" y="1091.0" width="19.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="185.2" y="1102.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 1.57%)</title><rect x="183.6" y="1075.0" width="18.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="186.6" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/AlexDAO$FlushingTask.run (31 samples, 1.80%)</title><rect x="202.1" y="1315.0" width="21.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.1" y="1326.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/AlexDAO.flushAndLoad (31 samples, 1.80%)</title><rect x="202.1" y="1299.0" width="21.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.1" y="1310.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/SSTable.flush (31 samples, 1.80%)</title><rect x="202.1" y="1283.0" width="21.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="205.1" y="1294.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.06%)</title><rect x="203.5" y="1267.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="206.5" y="1278.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="203.5" y="1251.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="206.5" y="1262.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.06%)</title><rect x="203.5" y="1235.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="206.5" y="1246.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.06%)</title><rect x="203.5" y="1219.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="206.5" y="1230.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.06%)</title><rect x="203.5" y="1203.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="206.5" y="1214.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.06%)</title><rect x="203.5" y="1187.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="206.5" y="1198.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.06%)</title><rect x="203.5" y="1171.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="206.5" y="1182.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.06%)</title><rect x="203.5" y="1155.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="206.5" y="1166.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.06%)</title><rect x="203.5" y="1139.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="206.5" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putInt (1 samples, 0.06%)</title><rect x="204.2" y="1267.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="207.2" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.putIntUnaligned (1 samples, 0.06%)</title><rect x="204.2" y="1251.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.2" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (1 samples, 0.06%)</title><rect x="204.2" y="1235.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.2" y="1246.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextPutIndex (1 samples, 0.06%)</title><rect x="204.2" y="1219.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="207.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (1 samples, 0.06%)</title><rect x="204.8" y="1267.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="207.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (1 samples, 0.06%)</title><rect x="204.8" y="1251.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.descend (1 samples, 0.06%)</title><rect x="204.8" y="1235.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (1 samples, 0.06%)</title><rect x="204.8" y="1219.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (1 samples, 0.06%)</title><rect x="204.8" y="1203.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.8" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (1 samples, 0.06%)</title><rect x="205.5" y="1267.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (1 samples, 0.06%)</title><rect x="205.5" y="1251.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.5" y="1262.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Value.getData (2 samples, 0.12%)</title><rect x="206.2" y="1267.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="209.2" y="1278.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.06%)</title><rect x="206.9" y="1251.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="209.9" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (23 samples, 1.34%)</title><rect x="207.6" y="1267.0" width="15.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="210.6" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (2 samples, 0.12%)</title><rect x="207.6" y="1251.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.6" y="1262.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.12%)</title><rect x="207.6" y="1235.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="210.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.06%)</title><rect x="208.3" y="1219.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.06%)</title><rect x="208.3" y="1203.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="211.3" y="1214.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.06%)</title><rect x="208.3" y="1187.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="211.3" y="1198.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.06%)</title><rect x="208.3" y="1171.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="211.3" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (21 samples, 1.22%)</title><rect x="209.0" y="1251.0" width="14.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="212.0" y="1262.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.06%)</title><rect x="209.0" y="1235.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="212.0" y="1246.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.06%)</title><rect x="209.0" y="1219.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="212.0" y="1230.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (1 samples, 0.06%)</title><rect x="209.0" y="1203.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="212.0" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (19 samples, 1.10%)</title><rect x="209.6" y="1235.0" width="13.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="212.6" y="1246.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (19 samples, 1.10%)</title><rect x="209.6" y="1219.0" width="13.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="212.6" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (19 samples, 1.10%)</title><rect x="209.6" y="1203.0" width="13.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="212.6" y="1214.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 1.10%)</title><rect x="209.6" y="1187.0" width="13.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="212.6" y="1198.0"></text>
</g>
<g>
<title>write (19 samples, 1.10%)</title><rect x="209.6" y="1171.0" width="13.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="212.6" y="1182.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 1.10%)</title><rect x="209.6" y="1155.0" width="13.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="212.6" y="1166.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 1.10%)</title><rect x="209.6" y="1139.0" width="13.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="212.6" y="1150.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 1.10%)</title><rect x="209.6" y="1123.0" width="13.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="212.6" y="1134.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 1.10%)</title><rect x="209.6" y="1107.0" width="13.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="212.6" y="1118.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 1.10%)</title><rect x="209.6" y="1091.0" width="13.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="212.6" y="1102.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 1.10%)</title><rect x="209.6" y="1075.0" width="13.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="212.6" y="1086.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 1.10%)</title><rect x="209.6" y="1059.0" width="13.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="212.6" y="1070.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 1.05%)</title><rect x="210.3" y="1043.0" width="12.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="213.3" y="1054.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 1.05%)</title><rect x="210.3" y="1027.0" width="12.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="213.3" y="1038.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 1.05%)</title><rect x="210.3" y="1011.0" width="12.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="213.3" y="1022.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 1.05%)</title><rect x="210.3" y="995.0" width="12.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="213.3" y="1006.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.76%)</title><rect x="213.8" y="979.0" width="8.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="216.8" y="990.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.64%)</title><rect x="215.1" y="963.0" width="7.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="218.1" y="974.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.58%)</title><rect x="215.8" y="947.0" width="6.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="218.8" y="958.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.47%)</title><rect x="217.2" y="931.0" width="5.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="220.2" y="942.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.41%)</title><rect x="217.9" y="915.0" width="4.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="220.9" y="926.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.35%)</title><rect x="218.6" y="899.0" width="4.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="221.6" y="910.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.35%)</title><rect x="218.6" y="883.0" width="4.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="221.6" y="894.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.17%)</title><rect x="220.6" y="867.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="223.6" y="878.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.17%)</title><rect x="220.6" y="851.0" width="2.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="223.6" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="222.0" y="835.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="225.0" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="222.0" y="819.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="225.0" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.06%)</title><rect x="222.7" y="1235.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="225.7" y="1246.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl$$Lambda$65/80866200.run (778 samples, 45.23%)</title><rect x="223.4" y="1315.0" width="533.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="226.4" y="1326.0">ru/mail/polis/service/alex/AsyncServiceImpl$$Lambda$65/80866200.run</text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl$$Lambda$60/1922119469.action (1 samples, 0.06%)</title><rect x="224.0" y="1299.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.0" y="1310.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.lambda$entity$1 (1 samples, 0.06%)</title><rect x="224.0" y="1283.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="227.0" y="1294.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.put (1 samples, 0.06%)</title><rect x="224.0" y="1267.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.0" y="1278.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.06%)</title><rect x="224.0" y="1251.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="227.0" y="1262.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.06%)</title><rect x="224.0" y="1235.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.0" y="1246.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.lambda$executeAsync$3 (776 samples, 45.12%)</title><rect x="224.7" y="1299.0" width="532.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="227.7" y="1310.0">ru/mail/polis/service/alex/AsyncServiceImpl.lambda$executeAsync$3</text>
</g>
<g>
<title>itable stub (5 samples, 0.29%)</title><rect x="226.8" y="1283.0" width="3.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="229.8" y="1294.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (615 samples, 35.76%)</title><rect x="230.2" y="1283.0" width="421.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.2" y="1294.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.23%)</title><rect x="233.0" y="1267.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.0" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.23%)</title><rect x="233.0" y="1251.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="236.0" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.23%)</title><rect x="233.0" y="1235.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.0" y="1246.0"></text>
</g>
<g>
<title>_init (1 samples, 0.06%)</title><rect x="233.0" y="1219.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="236.0" y="1230.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.12%)</title><rect x="233.7" y="1219.0" width="1.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="236.7" y="1230.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.06%)</title><rect x="235.0" y="1219.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="238.0" y="1230.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.06%)</title><rect x="235.0" y="1203.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="238.0" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.06%)</title><rect x="235.0" y="1187.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="238.0" y="1198.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (600 samples, 34.88%)</title><rect x="235.7" y="1267.0" width="411.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="238.7" y="1278.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.12%)</title><rect x="237.1" y="1251.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.1" y="1262.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (12 samples, 0.70%)</title><rect x="238.5" y="1251.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="241.5" y="1262.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.35%)</title><rect x="242.6" y="1235.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.6" y="1246.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.35%)</title><rect x="242.6" y="1219.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.6" y="1230.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.35%)</title><rect x="242.6" y="1203.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="245.6" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.35%)</title><rect x="242.6" y="1187.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.6" y="1198.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="246.0" y="1171.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="249.0" y="1182.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (584 samples, 33.95%)</title><rect x="246.7" y="1251.0" width="400.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.7" y="1262.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (584 samples, 33.95%)</title><rect x="246.7" y="1235.0" width="400.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.7" y="1246.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.06%)</title><rect x="249.4" y="1219.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.4" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (579 samples, 33.66%)</title><rect x="250.1" y="1219.0" width="397.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.1" y="1230.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (578 samples, 33.60%)</title><rect x="250.8" y="1203.0" width="396.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="253.8" y="1214.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (3 samples, 0.17%)</title><rect x="254.9" y="1187.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="257.9" y="1198.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 1.63%)</title><rect x="257.0" y="1187.0" width="19.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="260.0" y="1198.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 1.63%)</title><rect x="257.0" y="1171.0" width="19.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="260.0" y="1182.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (21 samples, 1.22%)</title><rect x="257.0" y="1155.0" width="14.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="260.0" y="1166.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.06%)</title><rect x="259.0" y="1139.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="262.0" y="1150.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (1 samples, 0.06%)</title><rect x="259.7" y="1139.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="262.7" y="1150.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (2 samples, 0.12%)</title><rect x="260.4" y="1139.0" width="1.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="263.4" y="1150.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.06%)</title><rect x="261.8" y="1139.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="264.8" y="1150.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (13 samples, 0.76%)</title><rect x="262.5" y="1139.0" width="8.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="265.5" y="1150.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.06%)</title><rect x="263.8" y="1123.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="266.8" y="1134.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.17%)</title><rect x="264.5" y="1123.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="267.5" y="1134.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (2 samples, 0.12%)</title><rect x="266.6" y="1123.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="269.6" y="1134.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.29%)</title><rect x="268.0" y="1123.0" width="3.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="271.0" y="1134.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.23%)</title><rect x="268.6" y="1107.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="271.6" y="1118.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.06%)</title><rect x="271.4" y="1155.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="274.4" y="1166.0"></text>
</g>
<g>
<title>__send (3 samples, 0.17%)</title><rect x="272.1" y="1155.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="275.1" y="1166.0"></text>
</g>
<g>
<title>_init (1 samples, 0.06%)</title><rect x="274.1" y="1155.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="277.1" y="1166.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.12%)</title><rect x="274.8" y="1155.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="277.8" y="1166.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.06%)</title><rect x="276.2" y="1187.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="279.2" y="1198.0"></text>
</g>
<g>
<title>__send (540 samples, 31.40%)</title><rect x="276.9" y="1187.0" width="370.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="279.9" y="1198.0">__send</text>
</g>
<g>
<title>[unknown] (538 samples, 31.28%)</title><rect x="278.2" y="1171.0" width="369.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="281.2" y="1182.0">[unknown]</text>
</g>
<g>
<title>[unknown] (538 samples, 31.28%)</title><rect x="278.2" y="1155.0" width="369.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="281.2" y="1166.0">[unknown]</text>
</g>
<g>
<title>[unknown] (535 samples, 31.10%)</title><rect x="280.3" y="1139.0" width="367.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="283.3" y="1150.0">[unknown]</text>
</g>
<g>
<title>[unknown] (533 samples, 30.99%)</title><rect x="281.7" y="1123.0" width="365.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="284.7" y="1134.0">[unknown]</text>
</g>
<g>
<title>[unknown] (527 samples, 30.64%)</title><rect x="285.8" y="1107.0" width="361.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="288.8" y="1118.0">[unknown]</text>
</g>
<g>
<title>[unknown] (520 samples, 30.23%)</title><rect x="290.6" y="1091.0" width="356.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="293.6" y="1102.0">[unknown]</text>
</g>
<g>
<title>[unknown] (513 samples, 29.83%)</title><rect x="295.4" y="1075.0" width="351.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="298.4" y="1086.0">[unknown]</text>
</g>
<g>
<title>[unknown] (512 samples, 29.77%)</title><rect x="296.1" y="1059.0" width="351.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="299.1" y="1070.0">[unknown]</text>
</g>
<g>
<title>[unknown] (485 samples, 28.20%)</title><rect x="314.6" y="1043.0" width="332.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="317.6" y="1054.0">[unknown]</text>
</g>
<g>
<title>[unknown] (468 samples, 27.21%)</title><rect x="326.3" y="1027.0" width="321.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="329.3" y="1038.0">[unknown]</text>
</g>
<g>
<title>[unknown] (451 samples, 26.22%)</title><rect x="337.9" y="1011.0" width="309.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="340.9" y="1022.0">[unknown]</text>
</g>
<g>
<title>[unknown] (427 samples, 24.83%)</title><rect x="354.4" y="995.0" width="292.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="357.4" y="1006.0">[unknown]</text>
</g>
<g>
<title>[unknown] (404 samples, 23.49%)</title><rect x="370.2" y="979.0" width="277.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="373.2" y="990.0">[unknown]</text>
</g>
<g>
<title>[unknown] (397 samples, 23.08%)</title><rect x="375.0" y="963.0" width="272.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="378.0" y="974.0">[unknown]</text>
</g>
<g>
<title>[unknown] (386 samples, 22.44%)</title><rect x="382.5" y="947.0" width="264.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="385.5" y="958.0">[unknown]</text>
</g>
<g>
<title>[unknown] (380 samples, 22.09%)</title><rect x="386.6" y="931.0" width="260.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="389.6" y="942.0">[unknown]</text>
</g>
<g>
<title>[unknown] (373 samples, 21.69%)</title><rect x="391.4" y="915.0" width="255.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="394.4" y="926.0">[unknown]</text>
</g>
<g>
<title>[unknown] (356 samples, 20.70%)</title><rect x="403.1" y="899.0" width="244.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="406.1" y="910.0">[unknown]</text>
</g>
<g>
<title>[unknown] (345 samples, 20.06%)</title><rect x="410.7" y="883.0" width="236.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="413.7" y="894.0">[unknown]</text>
</g>
<g>
<title>[unknown] (326 samples, 18.95%)</title><rect x="423.7" y="867.0" width="223.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="426.7" y="878.0">[unknown]</text>
</g>
<g>
<title>[unknown] (290 samples, 16.86%)</title><rect x="448.4" y="851.0" width="198.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="451.4" y="862.0">[unknown]</text>
</g>
<g>
<title>[unknown] (270 samples, 15.70%)</title><rect x="462.1" y="835.0" width="185.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="465.1" y="846.0">[unknown]</text>
</g>
<g>
<title>[unknown] (256 samples, 14.88%)</title><rect x="471.7" y="819.0" width="175.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="474.7" y="830.0">[unknown]</text>
</g>
<g>
<title>[unknown] (246 samples, 14.30%)</title><rect x="478.6" y="803.0" width="168.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="481.6" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (239 samples, 13.90%)</title><rect x="483.4" y="787.0" width="163.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="486.4" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (236 samples, 13.72%)</title><rect x="485.4" y="771.0" width="161.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="488.4" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (232 samples, 13.49%)</title><rect x="488.2" y="755.0" width="159.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="491.2" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (222 samples, 12.91%)</title><rect x="495.0" y="739.0" width="152.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="498.0" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (215 samples, 12.50%)</title><rect x="499.8" y="723.0" width="147.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="502.8" y="734.0">[unknown]</text>
</g>
<g>
<title>[unknown] (211 samples, 12.27%)</title><rect x="502.6" y="707.0" width="144.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="505.6" y="718.0">[unknown]</text>
</g>
<g>
<title>[unknown] (210 samples, 12.21%)</title><rect x="503.3" y="691.0" width="144.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="506.3" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (208 samples, 12.09%)</title><rect x="504.6" y="675.0" width="142.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="507.6" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (198 samples, 11.51%)</title><rect x="511.5" y="659.0" width="135.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="514.5" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (183 samples, 10.64%)</title><rect x="521.8" y="643.0" width="125.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="524.8" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (175 samples, 10.17%)</title><rect x="527.3" y="627.0" width="120.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="530.3" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (154 samples, 8.95%)</title><rect x="541.7" y="611.0" width="105.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="544.7" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (124 samples, 7.21%)</title><rect x="562.3" y="595.0" width="85.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="565.3" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (113 samples, 6.57%)</title><rect x="569.8" y="579.0" width="77.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="572.8" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (111 samples, 6.45%)</title><rect x="571.2" y="563.0" width="76.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="574.2" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (5 samples, 0.29%)</title><rect x="643.9" y="547.0" width="3.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="646.9" y="558.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.23%)</title><rect x="644.6" y="531.0" width="2.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="647.6" y="542.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="646.7" y="515.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="649.7" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.41%)</title><rect x="647.3" y="1267.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="650.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.17%)</title><rect x="650.1" y="1251.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="653.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.17%)</title><rect x="650.1" y="1235.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="653.1" y="1246.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl$$Lambda$60/1922119469.action (153 samples, 8.90%)</title><rect x="652.1" y="1283.0" width="105.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="655.1" y="1294.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.lambda$entity$1 (147 samples, 8.55%)</title><rect x="656.3" y="1267.0" width="100.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="659.3" y="1278.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.put (147 samples, 8.55%)</title><rect x="656.3" y="1251.0" width="100.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="659.3" y="1262.0">ru/mail/poli..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9 samples, 0.52%)</title><rect x="659.7" y="1235.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="662.7" y="1246.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9 samples, 0.52%)</title><rect x="659.7" y="1219.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="662.7" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="663.1" y="1203.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="666.1" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="663.1" y="1187.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="666.1" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="663.1" y="1171.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="666.1" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="663.1" y="1155.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="666.1" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="663.1" y="1139.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="666.1" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="663.1" y="1123.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="666.1" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="663.1" y="1107.0" width="0.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="666.1" y="1118.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.12%)</title><rect x="663.8" y="1203.0" width="1.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="666.8" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/AlexDAO.upsert (1 samples, 0.06%)</title><rect x="665.2" y="1203.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="668.2" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/AlexDAO.upsert (133 samples, 7.73%)</title><rect x="665.9" y="1235.0" width="91.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="668.9" y="1246.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTablePool.upsert (133 samples, 7.73%)</title><rect x="665.9" y="1219.0" width="91.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="668.9" y="1230.0">ru/mail/pol..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (10 samples, 0.58%)</title><rect x="665.9" y="1203.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="668.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (10 samples, 0.58%)</title><rect x="665.9" y="1187.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="668.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (2 samples, 0.12%)</title><rect x="671.3" y="1171.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="674.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.06%)</title><rect x="671.3" y="1155.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="674.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.06%)</title><rect x="671.3" y="1139.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="674.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.06%)</title><rect x="671.3" y="1123.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="674.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (1 samples, 0.06%)</title><rect x="672.0" y="1155.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="675.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (1 samples, 0.06%)</title><rect x="672.0" y="1139.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="675.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (4 samples, 0.23%)</title><rect x="672.7" y="1203.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="675.7" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (4 samples, 0.23%)</title><rect x="672.7" y="1187.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="675.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (4 samples, 0.23%)</title><rect x="672.7" y="1171.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="675.7" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="674.8" y="1155.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="677.8" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="674.8" y="1139.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="677.8" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="674.8" y="1123.0" width="0.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="677.8" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="674.8" y="1107.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="677.8" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="674.8" y="1091.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="677.8" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="674.8" y="1075.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="677.8" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="674.8" y="1059.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="677.8" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTable.upsert (119 samples, 6.92%)</title><rect x="675.5" y="1203.0" width="81.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="678.5" y="1214.0">ru/mail/p..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (119 samples, 6.92%)</title><rect x="675.5" y="1187.0" width="81.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="678.5" y="1198.0">java/util..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.12%)</title><rect x="677.5" y="1171.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="680.5" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.12%)</title><rect x="677.5" y="1155.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="680.5" y="1166.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.12%)</title><rect x="678.9" y="1171.0" width="1.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="681.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (108 samples, 6.28%)</title><rect x="680.3" y="1171.0" width="74.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="683.3" y="1182.0">java/uti..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.06%)</title><rect x="688.5" y="1155.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="691.5" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.06%)</title><rect x="688.5" y="1139.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="691.5" y="1150.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.12%)</title><rect x="689.2" y="1155.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="692.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (2 samples, 0.12%)</title><rect x="690.6" y="1155.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="693.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (91 samples, 5.29%)</title><rect x="691.9" y="1155.0" width="62.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="694.9" y="1166.0">java/u..</text>
</g>
<g>
<title>java/lang/Long.compareTo (5 samples, 0.29%)</title><rect x="692.6" y="1139.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="695.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (4 samples, 0.23%)</title><rect x="692.6" y="1123.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="695.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/Long.compare (4 samples, 0.23%)</title><rect x="692.6" y="1107.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="695.6" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.06%)</title><rect x="695.4" y="1123.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="698.4" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (85 samples, 4.94%)</title><rect x="696.0" y="1139.0" width="58.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="699.0" y="1150.0">java/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (45 samples, 2.62%)</title><rect x="723.5" y="1123.0" width="30.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="726.5" y="1134.0">ja..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (45 samples, 2.62%)</title><rect x="723.5" y="1107.0" width="30.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="726.5" y="1118.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.12%)</title><rect x="733.1" y="1091.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="736.1" y="1102.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.12%)</title><rect x="733.1" y="1075.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="736.1" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (29 samples, 1.69%)</title><rect x="734.5" y="1091.0" width="19.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="737.5" y="1102.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.23%)</title><rect x="750.2" y="1075.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="753.2" y="1086.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.12%)</title><rect x="753.0" y="1075.0" width="1.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="756.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (2 samples, 0.12%)</title><rect x="754.4" y="1171.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="757.4" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.12%)</title><rect x="755.7" y="1171.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="758.7" y="1182.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.12%)</title><rect x="755.7" y="1155.0" width="1.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="758.7" y="1166.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.06%)</title><rect x="756.4" y="1139.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="759.4" y="1150.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (502 samples, 29.19%)</title><rect x="757.1" y="1363.0" width="344.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="760.1" y="1374.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.06%)</title><rect x="759.2" y="1347.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="762.2" y="1358.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.12%)</title><rect x="759.8" y="1347.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="762.8" y="1358.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (2 samples, 0.12%)</title><rect x="759.8" y="1331.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="762.8" y="1342.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) [clone .part.83] (1 samples, 0.06%)</title><rect x="760.5" y="1315.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="763.5" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="761.2" y="1347.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="764.2" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="761.2" y="1331.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="764.2" y="1342.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.06%)</title><rect x="761.2" y="1315.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="764.2" y="1326.0"></text>
</g>
<g>
<title>_init (1 samples, 0.06%)</title><rect x="761.9" y="1347.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="764.9" y="1358.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3 samples, 0.17%)</title><rect x="762.6" y="1347.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="765.6" y="1358.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (116 samples, 6.74%)</title><rect x="764.7" y="1347.0" width="79.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="767.7" y="1358.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (111 samples, 6.45%)</title><rect x="768.1" y="1331.0" width="76.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="771.1" y="1342.0">one/nio/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.06%)</title><rect x="774.9" y="1315.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="777.9" y="1326.0"></text>
</g>
<g>
<title>[unknown] (93 samples, 5.41%)</title><rect x="775.6" y="1315.0" width="63.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="778.6" y="1326.0">[unknown]</text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.06%)</title><rect x="775.6" y="1299.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="778.6" y="1310.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (2 samples, 0.12%)</title><rect x="776.3" y="1299.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="779.3" y="1310.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.12%)</title><rect x="777.7" y="1299.0" width="1.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="780.7" y="1310.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.12%)</title><rect x="777.7" y="1283.0" width="1.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="780.7" y="1294.0"></text>
</g>
<g>
<title>epoll_wait (88 samples, 5.12%)</title><rect x="779.1" y="1299.0" width="60.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="782.1" y="1310.0">epoll_..</text>
</g>
<g>
<title>[unknown] (83 samples, 4.83%)</title><rect x="782.5" y="1283.0" width="56.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="785.5" y="1294.0">[unkno..</text>
</g>
<g>
<title>[unknown] (83 samples, 4.83%)</title><rect x="782.5" y="1267.0" width="56.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="785.5" y="1278.0">[unkno..</text>
</g>
<g>
<title>[unknown] (77 samples, 4.48%)</title><rect x="786.6" y="1251.0" width="52.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="789.6" y="1262.0">[unkn..</text>
</g>
<g>
<title>[unknown] (76 samples, 4.42%)</title><rect x="787.3" y="1235.0" width="52.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="790.3" y="1246.0">[unkn..</text>
</g>
<g>
<title>[unknown] (72 samples, 4.19%)</title><rect x="790.0" y="1219.0" width="49.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="793.0" y="1230.0">[unkn..</text>
</g>
<g>
<title>[unknown] (61 samples, 3.55%)</title><rect x="797.6" y="1203.0" width="41.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="800.6" y="1214.0">[un..</text>
</g>
<g>
<title>[unknown] (50 samples, 2.91%)</title><rect x="805.1" y="1187.0" width="34.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="808.1" y="1198.0">[u..</text>
</g>
<g>
<title>[unknown] (31 samples, 1.80%)</title><rect x="818.2" y="1171.0" width="21.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="821.2" y="1182.0">[..</text>
</g>
<g>
<title>[unknown] (29 samples, 1.69%)</title><rect x="819.5" y="1155.0" width="19.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="822.5" y="1166.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 1.22%)</title><rect x="825.0" y="1139.0" width="14.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="828.0" y="1150.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.12%)</title><rect x="838.1" y="1123.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="841.1" y="1134.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.12%)</title><rect x="838.1" y="1107.0" width="1.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="841.1" y="1118.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.12%)</title><rect x="838.1" y="1091.0" width="1.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="841.1" y="1102.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.12%)</title><rect x="838.1" y="1075.0" width="1.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="841.1" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="838.7" y="1059.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="841.7" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="838.7" y="1043.0" width="0.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="841.7" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="838.7" y="1027.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="841.7" y="1038.0"></text>
</g>
<g>
<title>_init (2 samples, 0.12%)</title><rect x="839.4" y="1315.0" width="1.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="842.4" y="1326.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.23%)</title><rect x="840.8" y="1315.0" width="2.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="843.8" y="1326.0"></text>
</g>
<g>
<title>epoll_wait (1 samples, 0.06%)</title><rect x="843.5" y="1315.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="846.5" y="1326.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (375 samples, 21.80%)</title><rect x="844.2" y="1347.0" width="257.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="847.2" y="1358.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (364 samples, 21.16%)</title><rect x="851.1" y="1331.0" width="249.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="854.1" y="1342.0">one/nio/http/HttpSession.processR..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (229 samples, 13.31%)</title><rect x="851.1" y="1315.0" width="157.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="854.1" y="1326.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (173 samples, 10.06%)</title><rect x="855.2" y="1299.0" width="118.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="858.2" y="1310.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (173 samples, 10.06%)</title><rect x="855.2" y="1283.0" width="118.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="858.2" y="1294.0">one/nio/http/H..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (152 samples, 8.84%)</title><rect x="855.9" y="1267.0" width="104.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="858.9" y="1278.0">RequestHandl..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (15 samples, 0.87%)</title><rect x="855.9" y="1251.0" width="10.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="858.9" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.29%)</title><rect x="858.0" y="1235.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="861.0" y="1246.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.29%)</title><rect x="858.0" y="1219.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="861.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.06%)</title><rect x="861.4" y="1235.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="864.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.06%)</title><rect x="861.4" y="1219.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="864.4" y="1230.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (6 samples, 0.35%)</title><rect x="862.1" y="1235.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="865.1" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.17%)</title><rect x="864.1" y="1219.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="867.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.17%)</title><rect x="864.1" y="1203.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="867.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.17%)</title><rect x="864.1" y="1187.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="867.1" y="1198.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.12%)</title><rect x="866.2" y="1251.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="869.2" y="1262.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.entity (135 samples, 7.85%)</title><rect x="867.6" y="1251.0" width="92.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="870.6" y="1262.0">ru/mail/pol..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.12%)</title><rect x="867.6" y="1235.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="870.6" y="1246.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/AsyncServiceImpl.executeAsync (133 samples, 7.73%)</title><rect x="868.9" y="1235.0" width="91.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="871.9" y="1246.0">ru/mail/pol..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (123 samples, 7.15%)</title><rect x="875.1" y="1219.0" width="84.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="878.1" y="1230.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (123 samples, 7.15%)</title><rect x="875.1" y="1203.0" width="84.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="878.1" y="1214.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (113 samples, 6.57%)</title><rect x="875.1" y="1187.0" width="77.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="878.1" y="1198.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.23%)</title><rect x="875.1" y="1171.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="878.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.23%)</title><rect x="875.1" y="1155.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="878.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.23%)</title><rect x="875.1" y="1139.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="878.1" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="877.2" y="1123.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="880.2" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="877.2" y="1107.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="880.2" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="877.2" y="1091.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="880.2" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="877.2" y="1075.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="880.2" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="877.2" y="1059.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="880.2" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="877.2" y="1043.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="880.2" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="877.2" y="1027.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="880.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (109 samples, 6.34%)</title><rect x="877.8" y="1171.0" width="74.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="880.8" y="1182.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (109 samples, 6.34%)</title><rect x="877.8" y="1155.0" width="74.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="880.8" y="1166.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (109 samples, 6.34%)</title><rect x="877.8" y="1139.0" width="74.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="880.8" y="1150.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (109 samples, 6.34%)</title><rect x="877.8" y="1123.0" width="74.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="880.8" y="1134.0">java/uti..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (108 samples, 6.28%)</title><rect x="878.5" y="1107.0" width="74.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="881.5" y="1118.0">jdk/inte..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.06%)</title><rect x="879.2" y="1091.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="882.2" y="1102.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.06%)</title><rect x="879.9" y="1091.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="882.9" y="1102.0"></text>
</g>
<g>
<title>Unsafe_Unpark (22 samples, 1.28%)</title><rect x="880.6" y="1091.0" width="15.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="883.6" y="1102.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.06%)</title><rect x="882.7" y="1075.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="885.7" y="1086.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.06%)</title><rect x="883.3" y="1075.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="886.3" y="1086.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="884.0" y="1075.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="887.0" y="1086.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.06%)</title><rect x="884.7" y="1075.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="887.7" y="1086.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.17%)</title><rect x="885.4" y="1075.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="888.4" y="1086.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (3 samples, 0.17%)</title><rect x="887.5" y="1075.0" width="2.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="890.5" y="1086.0"></text>
</g>
<g>
<title>_init (2 samples, 0.12%)</title><rect x="889.5" y="1075.0" width="1.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="892.5" y="1086.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.17%)</title><rect x="890.9" y="1075.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="893.9" y="1086.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (4 samples, 0.23%)</title><rect x="892.9" y="1075.0" width="2.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="895.9" y="1086.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.12%)</title><rect x="895.7" y="1091.0" width="1.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="898.7" y="1102.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.06%)</title><rect x="897.1" y="1091.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="900.1" y="1102.0"></text>
</g>
<g>
<title>_init (1 samples, 0.06%)</title><rect x="897.7" y="1091.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="900.7" y="1102.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.06%)</title><rect x="898.4" y="1091.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="901.4" y="1102.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (78 samples, 4.53%)</title><rect x="899.1" y="1091.0" width="53.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="902.1" y="1102.0">pthre..</text>
</g>
<g>
<title>[unknown] (74 samples, 4.30%)</title><rect x="901.9" y="1075.0" width="50.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="904.9" y="1086.0">[unkn..</text>
</g>
<g>
<title>[unknown] (74 samples, 4.30%)</title><rect x="901.9" y="1059.0" width="50.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="904.9" y="1070.0">[unkn..</text>
</g>
<g>
<title>[unknown] (70 samples, 4.07%)</title><rect x="904.6" y="1043.0" width="48.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="907.6" y="1054.0">[unk..</text>
</g>
<g>
<title>[unknown] (66 samples, 3.84%)</title><rect x="907.3" y="1027.0" width="45.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="910.3" y="1038.0">[unk..</text>
</g>
<g>
<title>[unknown] (65 samples, 3.78%)</title><rect x="908.0" y="1011.0" width="44.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="911.0" y="1022.0">[unk..</text>
</g>
<g>
<title>[unknown] (56 samples, 3.26%)</title><rect x="914.2" y="995.0" width="38.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="917.2" y="1006.0">[un..</text>
</g>
<g>
<title>[unknown] (48 samples, 2.79%)</title><rect x="919.7" y="979.0" width="32.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="922.7" y="990.0">[u..</text>
</g>
<g>
<title>[unknown] (44 samples, 2.56%)</title><rect x="922.4" y="963.0" width="30.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="925.4" y="974.0">[u..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.12%)</title><rect x="952.6" y="1187.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="955.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.12%)</title><rect x="952.6" y="1171.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="955.6" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.06%)</title><rect x="953.3" y="1155.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="956.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 0.47%)</title><rect x="954.0" y="1187.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="957.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.47%)</title><rect x="954.0" y="1171.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="957.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.47%)</title><rect x="954.0" y="1155.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="957.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.47%)</title><rect x="954.0" y="1139.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="957.0" y="1150.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="959.5" y="1219.0" width="0.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="962.5" y="1230.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (20 samples, 1.16%)</title><rect x="960.2" y="1267.0" width="13.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="963.2" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.get (20 samples, 1.16%)</title><rect x="960.2" y="1251.0" width="13.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="963.2" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.23%)</title><rect x="960.2" y="1235.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="963.2" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (16 samples, 0.93%)</title><rect x="962.9" y="1235.0" width="11.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="965.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (16 samples, 0.93%)</title><rect x="962.9" y="1219.0" width="11.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="965.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (16 samples, 0.93%)</title><rect x="962.9" y="1203.0" width="11.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="965.9" y="1214.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="970.5" y="1187.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="973.5" y="1198.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="971.2" y="1187.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="974.2" y="1198.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.17%)</title><rect x="971.8" y="1187.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="974.8" y="1198.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (33 samples, 1.92%)</title><rect x="973.9" y="1299.0" width="22.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="976.9" y="1310.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (6 samples, 0.35%)</title><rect x="977.3" y="1283.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="980.3" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.35%)</title><rect x="977.3" y="1267.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="980.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.35%)</title><rect x="977.3" y="1251.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="980.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (6 samples, 0.35%)</title><rect x="977.3" y="1235.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="980.3" y="1246.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.06%)</title><rect x="980.8" y="1219.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="983.8" y="1230.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.52%)</title><rect x="981.4" y="1283.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="984.4" y="1294.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.41%)</title><rect x="982.8" y="1267.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="985.8" y="1278.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (13 samples, 0.76%)</title><rect x="987.6" y="1283.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="990.6" y="1294.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 0.52%)</title><rect x="996.5" y="1299.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="999.5" y="1310.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.41%)</title><rect x="997.9" y="1283.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1000.9" y="1294.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.41%)</title><rect x="997.9" y="1267.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1000.9" y="1278.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.06%)</title><rect x="1000.7" y="1251.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1003.7" y="1262.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.12%)</title><rect x="1001.3" y="1251.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1004.3" y="1262.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.47%)</title><rect x="1002.7" y="1299.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1005.7" y="1310.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1 samples, 0.06%)</title><rect x="1004.1" y="1283.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1007.1" y="1294.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.29%)</title><rect x="1004.8" y="1283.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1007.8" y="1294.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (2 samples, 0.12%)</title><rect x="1008.2" y="1315.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1011.2" y="1326.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (133 samples, 7.73%)</title><rect x="1009.6" y="1315.0" width="91.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1012.6" y="1326.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (127 samples, 7.38%)</title><rect x="1013.7" y="1299.0" width="87.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1016.7" y="1310.0">one/nio/ne..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (4 samples, 0.23%)</title><rect x="1015.7" y="1283.0" width="2.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1018.7" y="1294.0"></text>
</g>
<g>
<title>[unknown] (38 samples, 2.21%)</title><rect x="1018.5" y="1283.0" width="26.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1021.5" y="1294.0">[..</text>
</g>
<g>
<title>[unknown] (38 samples, 2.21%)</title><rect x="1018.5" y="1267.0" width="26.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1021.5" y="1278.0">[..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (35 samples, 2.03%)</title><rect x="1018.5" y="1251.0" width="24.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1021.5" y="1262.0">J..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.17%)</title><rect x="1018.5" y="1235.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1021.5" y="1246.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.12%)</title><rect x="1020.5" y="1235.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1023.5" y="1246.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (2 samples, 0.12%)</title><rect x="1021.9" y="1235.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1024.9" y="1246.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (4 samples, 0.23%)</title><rect x="1023.3" y="1235.0" width="2.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1026.3" y="1246.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (18 samples, 1.05%)</title><rect x="1026.0" y="1235.0" width="12.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1029.0" y="1246.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.12%)</title><rect x="1028.8" y="1219.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1031.8" y="1230.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="1030.2" y="1219.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1033.2" y="1230.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (2 samples, 0.12%)</title><rect x="1030.8" y="1219.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1033.8" y="1230.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (9 samples, 0.52%)</title><rect x="1032.2" y="1219.0" width="6.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1035.2" y="1230.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.23%)</title><rect x="1035.6" y="1203.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1038.6" y="1214.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (2 samples, 0.12%)</title><rect x="1038.4" y="1235.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1041.4" y="1246.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (4 samples, 0.23%)</title><rect x="1039.8" y="1235.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1042.8" y="1246.0"></text>
</g>
<g>
<title>__GI___recv (1 samples, 0.06%)</title><rect x="1042.5" y="1251.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1045.5" y="1262.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.06%)</title><rect x="1043.2" y="1251.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1046.2" y="1262.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.06%)</title><rect x="1043.9" y="1251.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1046.9" y="1262.0"></text>
</g>
<g>
<title>__GI___recv (79 samples, 4.59%)</title><rect x="1044.6" y="1283.0" width="54.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1047.6" y="1294.0">__GI_..</text>
</g>
<g>
<title>[unknown] (79 samples, 4.59%)</title><rect x="1044.6" y="1267.0" width="54.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1047.6" y="1278.0">[unkn..</text>
</g>
<g>
<title>[unknown] (79 samples, 4.59%)</title><rect x="1044.6" y="1251.0" width="54.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1047.6" y="1262.0">[unkn..</text>
</g>
<g>
<title>[unknown] (77 samples, 4.48%)</title><rect x="1045.9" y="1235.0" width="52.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1048.9" y="1246.0">[unkn..</text>
</g>
<g>
<title>[unknown] (72 samples, 4.19%)</title><rect x="1049.4" y="1219.0" width="49.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1052.4" y="1230.0">[unkn..</text>
</g>
<g>
<title>[unknown] (70 samples, 4.07%)</title><rect x="1050.7" y="1203.0" width="48.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1053.7" y="1214.0">[unk..</text>
</g>
<g>
<title>[unknown] (65 samples, 3.78%)</title><rect x="1054.2" y="1187.0" width="44.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1057.2" y="1198.0">[unk..</text>
</g>
<g>
<title>[unknown] (59 samples, 3.43%)</title><rect x="1058.3" y="1171.0" width="40.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1061.3" y="1182.0">[un..</text>
</g>
<g>
<title>[unknown] (47 samples, 2.73%)</title><rect x="1066.5" y="1155.0" width="32.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1069.5" y="1166.0">[u..</text>
</g>
<g>
<title>[unknown] (33 samples, 1.92%)</title><rect x="1076.1" y="1139.0" width="22.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1079.1" y="1150.0">[..</text>
</g>
<g>
<title>[unknown] (20 samples, 1.16%)</title><rect x="1085.0" y="1123.0" width="13.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1088.0" y="1134.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.64%)</title><rect x="1091.2" y="1107.0" width="7.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1094.2" y="1118.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.35%)</title><rect x="1094.6" y="1091.0" width="4.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1097.6" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1098.1" y="1075.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1101.1" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1098.1" y="1059.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1101.1" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1098.1" y="1043.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1101.1" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1098.1" y="1027.0" width="0.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1101.1" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1098.1" y="1011.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1101.1" y="1022.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (3 samples, 0.17%)</title><rect x="1098.8" y="1283.0" width="2.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1101.8" y="1294.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (1 samples, 0.06%)</title><rect x="1100.8" y="1331.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1103.8" y="1342.0"></text>
</g>
<g>
<title>start_thread (129 samples, 7.50%)</title><rect x="1101.5" y="1363.0" width="88.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1104.5" y="1374.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (129 samples, 7.50%)</title><rect x="1101.5" y="1347.0" width="88.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1104.5" y="1358.0">thread_nat..</text>
</g>
<g>
<title>Thread::call_run() (129 samples, 7.50%)</title><rect x="1101.5" y="1331.0" width="88.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.5" y="1342.0">Thread::ca..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.06%)</title><rect x="1101.5" y="1315.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1104.5" y="1326.0"></text>
</g>
<g>
<title>G1ConcurrentRefineThread::run_service() (1 samples, 0.06%)</title><rect x="1101.5" y="1299.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.5" y="1310.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long) (1 samples, 0.06%)</title><rect x="1101.5" y="1283.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.5" y="1294.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(signed char*, unsigned int) (1 samples, 0.06%)</title><rect x="1101.5" y="1267.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1104.5" y="1278.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;false, G1ConcurrentRefineOopClosure&gt;(MemRegion, G1ConcurrentRefineOopClosure*) (1 samples, 0.06%)</title><rect x="1101.5" y="1251.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1104.5" y="1262.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ConcurrentRefineOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="1101.5" y="1235.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1104.5" y="1246.0"></text>
</g>
<g>
<title>GangWorker::loop() (35 samples, 2.03%)</title><rect x="1102.2" y="1315.0" width="24.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.2" y="1326.0">G..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (4 samples, 0.23%)</title><rect x="1102.2" y="1299.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1105.2" y="1310.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (4 samples, 0.23%)</title><rect x="1102.2" y="1283.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.2" y="1294.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (2 samples, 0.12%)</title><rect x="1102.2" y="1267.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1105.2" y="1278.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.154] (1 samples, 0.06%)</title><rect x="1102.2" y="1251.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.2" y="1262.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.06%)</title><rect x="1102.2" y="1235.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.2" y="1246.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="1102.2" y="1219.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1105.2" y="1230.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.06%)</title><rect x="1102.9" y="1251.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.9" y="1262.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="1102.9" y="1235.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.9" y="1246.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.06%)</title><rect x="1102.9" y="1219.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1105.9" y="1230.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.154] (2 samples, 0.12%)</title><rect x="1103.6" y="1267.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.6" y="1278.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (2 samples, 0.12%)</title><rect x="1103.6" y="1251.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.6" y="1262.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (2 samples, 0.12%)</title><rect x="1103.6" y="1235.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1106.6" y="1246.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.06%)</title><rect x="1104.2" y="1219.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.2" y="1230.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (25 samples, 1.45%)</title><rect x="1104.9" y="1299.0" width="17.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.9" y="1310.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.12%)</title><rect x="1104.9" y="1283.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.9" y="1294.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.12%)</title><rect x="1104.9" y="1267.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.9" y="1278.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.06%)</title><rect x="1105.6" y="1251.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.6" y="1262.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (14 samples, 0.81%)</title><rect x="1106.3" y="1283.0" width="9.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1109.3" y="1294.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (14 samples, 0.81%)</title><rect x="1106.3" y="1267.0" width="9.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.3" y="1278.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (14 samples, 0.81%)</title><rect x="1106.3" y="1251.0" width="9.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1109.3" y="1262.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (14 samples, 0.81%)</title><rect x="1106.3" y="1235.0" width="9.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1109.3" y="1246.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (13 samples, 0.76%)</title><rect x="1107.0" y="1219.0" width="8.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.0" y="1230.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (9 samples, 0.52%)</title><rect x="1107.0" y="1203.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.0" y="1214.0"></text>
</g>
<g>
<title>G1CardTable::mark_card_deferred(unsigned long) (1 samples, 0.06%)</title><rect x="1107.7" y="1187.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.7" y="1198.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 0.29%)</title><rect x="1108.4" y="1187.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.4" y="1198.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="1111.1" y="1171.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.1" y="1182.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="1111.8" y="1187.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.8" y="1198.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;TypeArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="1112.5" y="1187.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.5" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.123] (4 samples, 0.23%)</title><rect x="1113.2" y="1203.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.2" y="1214.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (3 samples, 0.17%)</title><rect x="1113.2" y="1187.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.2" y="1198.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.06%)</title><rect x="1113.2" y="1171.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.2" y="1182.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.06%)</title><rect x="1113.2" y="1155.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1116.2" y="1166.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.12%)</title><rect x="1113.8" y="1171.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.8" y="1182.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="1115.2" y="1187.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.2" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (8 samples, 0.47%)</title><rect x="1115.9" y="1283.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.9" y="1294.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (8 samples, 0.47%)</title><rect x="1115.9" y="1267.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1118.9" y="1278.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (8 samples, 0.47%)</title><rect x="1115.9" y="1251.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.9" y="1262.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (8 samples, 0.47%)</title><rect x="1115.9" y="1235.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1118.9" y="1246.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (6 samples, 0.35%)</title><rect x="1115.9" y="1219.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1118.9" y="1230.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.23%)</title><rect x="1116.6" y="1203.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.6" y="1214.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.12%)</title><rect x="1118.0" y="1187.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.0" y="1198.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="1119.3" y="1203.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.3" y="1214.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (2 samples, 0.12%)</title><rect x="1120.0" y="1219.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1123.0" y="1230.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.06%)</title><rect x="1120.0" y="1203.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1123.0" y="1214.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.06%)</title><rect x="1120.0" y="1187.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.0" y="1198.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringScanRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringScanRSClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="1120.7" y="1203.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.7" y="1214.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.06%)</title><rect x="1121.4" y="1283.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.4" y="1294.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.06%)</title><rect x="1121.4" y="1267.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.4" y="1278.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (2 samples, 0.12%)</title><rect x="1122.1" y="1299.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.1" y="1310.0"></text>
</g>
<g>
<title>InstanceKlass::clean_weak_instanceklass_links() (2 samples, 0.12%)</title><rect x="1122.1" y="1283.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.1" y="1294.0"></text>
</g>
<g>
<title>MethodData::clean_method_data(bool) (2 samples, 0.12%)</title><rect x="1122.1" y="1267.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.1" y="1278.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (3 samples, 0.17%)</title><rect x="1123.5" y="1299.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.5" y="1310.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (3 samples, 0.17%)</title><rect x="1123.5" y="1283.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.5" y="1294.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.12%)</title><rect x="1123.5" y="1267.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.5" y="1278.0"></text>
</g>
<g>
<title>java_lang_Class::oop_size(oopDesc*) (1 samples, 0.06%)</title><rect x="1124.8" y="1267.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.8" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1124.8" y="1251.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1127.8" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1124.8" y="1235.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1127.8" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1124.8" y="1219.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1127.8" y="1230.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.06%)</title><rect x="1125.5" y="1299.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.5" y="1310.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.06%)</title><rect x="1125.5" y="1283.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.5" y="1294.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.67] (1 samples, 0.06%)</title><rect x="1125.5" y="1267.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1128.5" y="1278.0"></text>
</g>
<g>
<title>StackFrameStream::StackFrameStream(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="1125.5" y="1251.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.5" y="1262.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.06%)</title><rect x="1125.5" y="1235.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1128.5" y="1246.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.06%)</title><rect x="1125.5" y="1219.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.5" y="1230.0"></text>
</g>
<g>
<title>JavaThread::run() (92 samples, 5.35%)</title><rect x="1126.2" y="1315.0" width="63.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.2" y="1326.0">JavaThr..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (92 samples, 5.35%)</title><rect x="1126.2" y="1299.0" width="63.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.2" y="1310.0">JavaThr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (92 samples, 5.35%)</title><rect x="1126.2" y="1283.0" width="63.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.2" y="1294.0">Compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (92 samples, 5.35%)</title><rect x="1126.2" y="1267.0" width="63.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.2" y="1278.0">Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (89 samples, 5.17%)</title><rect x="1126.2" y="1251.0" width="61.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.2" y="1262.0">C2Comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (89 samples, 5.17%)</title><rect x="1126.2" y="1235.0" width="61.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.2" y="1246.0">Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (40 samples, 2.33%)</title><rect x="1126.2" y="1219.0" width="27.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.2" y="1230.0">C..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.12%)</title><rect x="1126.2" y="1203.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.2" y="1214.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.06%)</title><rect x="1126.2" y="1187.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.2" y="1198.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.06%)</title><rect x="1126.9" y="1187.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.9" y="1198.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::alignment_required() const (1 samples, 0.06%)</title><rect x="1126.9" y="1171.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.9" y="1182.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.12%)</title><rect x="1127.6" y="1203.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.6" y="1214.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.12%)</title><rect x="1127.6" y="1187.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.6" y="1198.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.06%)</title><rect x="1128.3" y="1171.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.3" y="1182.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.06%)</title><rect x="1128.3" y="1155.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.3" y="1166.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.06%)</title><rect x="1128.3" y="1139.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.3" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.17%)</title><rect x="1128.9" y="1203.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.9" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.17%)</title><rect x="1128.9" y="1187.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.9" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.06%)</title><rect x="1128.9" y="1171.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.9" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool) (1 samples, 0.06%)</title><rect x="1128.9" y="1155.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.9" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::mark_ssa() (2 samples, 0.12%)</title><rect x="1129.6" y="1171.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.6" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (33 samples, 1.92%)</title><rect x="1131.0" y="1203.0" width="22.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.0" y="1214.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.06%)</title><rect x="1131.0" y="1187.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.0" y="1198.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.06%)</title><rect x="1131.7" y="1187.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.7" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.12%)</title><rect x="1132.4" y="1187.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.4" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.06%)</title><rect x="1132.4" y="1171.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.4" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.06%)</title><rect x="1133.1" y="1171.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.1" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.12%)</title><rect x="1133.7" y="1187.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.7" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.12%)</title><rect x="1133.7" y="1171.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.7" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.17%)</title><rect x="1135.1" y="1187.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.1" y="1198.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.06%)</title><rect x="1136.5" y="1171.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.5" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 0.35%)</title><rect x="1137.2" y="1187.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.2" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.06%)</title><rect x="1139.9" y="1171.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.9" y="1182.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.06%)</title><rect x="1140.6" y="1171.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.6" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.06%)</title><rect x="1141.3" y="1187.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.3" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.06%)</title><rect x="1141.3" y="1171.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.3" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::compact() (2 samples, 0.12%)</title><rect x="1142.0" y="1187.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.0" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.12%)</title><rect x="1143.3" y="1187.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.3" y="1198.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.06%)</title><rect x="1144.0" y="1171.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.0" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.82] (1 samples, 0.06%)</title><rect x="1144.7" y="1187.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.7" y="1198.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.06%)</title><rect x="1144.7" y="1171.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1147.7" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.29%)</title><rect x="1145.4" y="1187.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.4" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.12%)</title><rect x="1146.8" y="1171.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.8" y="1182.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.06%)</title><rect x="1148.2" y="1171.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1151.2" y="1182.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.06%)</title><rect x="1148.8" y="1187.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.8" y="1198.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.06%)</title><rect x="1148.8" y="1171.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.12%)</title><rect x="1149.5" y="1187.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.5" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.06%)</title><rect x="1150.2" y="1171.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.2" y="1182.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.06%)</title><rect x="1150.9" y="1187.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.9" y="1198.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.06%)</title><rect x="1150.9" y="1171.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.9" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.17%)</title><rect x="1151.6" y="1187.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.6" y="1198.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.06%)</title><rect x="1153.0" y="1171.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.0" y="1182.0"></text>
</g>
<g>
<title>Compile::Optimize() (41 samples, 2.38%)</title><rect x="1153.6" y="1219.0" width="28.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.6" y="1230.0">Co..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.256] (1 samples, 0.06%)</title><rect x="1153.6" y="1203.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.6" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.06%)</title><rect x="1154.3" y="1203.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.3" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.06%)</title><rect x="1154.3" y="1187.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.3" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="1154.3" y="1171.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.3" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="1154.3" y="1155.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.3" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="1154.3" y="1139.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.3" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.06%)</title><rect x="1154.3" y="1123.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.3" y="1134.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.239] (1 samples, 0.06%)</title><rect x="1154.3" y="1107.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.3" y="1118.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.06%)</title><rect x="1154.3" y="1091.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (31 samples, 1.80%)</title><rect x="1155.0" y="1203.0" width="21.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.0" y="1214.0">P..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="1155.0" y="1187.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.0" y="1198.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="1155.0" y="1171.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.0" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="1155.0" y="1155.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.06%)</title><rect x="1155.0" y="1139.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_post_loop(IdealLoopTree*, Node_List&amp;, CountedLoopNode*, CountedLoopEndNode*, Node*, Node*, CountedLoopNode*&amp;) (1 samples, 0.06%)</title><rect x="1155.0" y="1123.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.06%)</title><rect x="1155.0" y="1107.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.0" y="1118.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.06%)</title><rect x="1155.0" y="1091.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.0" y="1102.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.06%)</title><rect x="1155.0" y="1075.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1158.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.06%)</title><rect x="1155.7" y="1187.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.7" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (28 samples, 1.63%)</title><rect x="1156.4" y="1187.0" width="19.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.4" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (26 samples, 1.51%)</title><rect x="1157.8" y="1171.0" width="17.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (22 samples, 1.28%)</title><rect x="1159.1" y="1155.0" width="15.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.06%)</title><rect x="1161.9" y="1139.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (16 samples, 0.93%)</title><rect x="1162.6" y="1139.0" width="10.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.6" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1172.8" y="1123.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1175.8" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1172.8" y="1107.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1175.8" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1172.8" y="1091.0" width="0.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1175.8" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1172.8" y="1075.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1175.8" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1173.5" y="1139.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1176.5" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1173.5" y="1123.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1176.5" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1173.5" y="1107.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1176.5" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1173.5" y="1091.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1176.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.06%)</title><rect x="1174.2" y="1155.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.2" y="1166.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.06%)</title><rect x="1174.9" y="1155.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.06%)</title><rect x="1175.6" y="1187.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.6" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.06%)</title><rect x="1175.6" y="1171.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.6" y="1182.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1175.6" y="1155.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.6" y="1166.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1175.6" y="1139.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.6" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1175.6" y="1123.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1178.6" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1175.6" y="1107.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1178.6" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1175.6" y="1091.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1178.6" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1175.6" y="1075.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1178.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.29%)</title><rect x="1176.3" y="1203.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.3" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.29%)</title><rect x="1176.3" y="1187.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="1198.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.12%)</title><rect x="1176.3" y="1171.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.3" y="1182.0"></text>
</g>
<g>
<title>IfNode::fold_compares(PhaseIterGVN*) (1 samples, 0.06%)</title><rect x="1176.3" y="1155.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="1166.0"></text>
</g>
<g>
<title>IfNode::has_only_uncommon_traps(ProjNode*, ProjNode*&amp;, ProjNode*&amp;, PhaseIterGVN*) (1 samples, 0.06%)</title><rect x="1176.3" y="1139.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.3" y="1150.0"></text>
</g>
<g>
<title>ciMethod::has_jsrs() const (1 samples, 0.06%)</title><rect x="1176.3" y="1123.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="1134.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1177.0" y="1155.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.0" y="1166.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.06%)</title><rect x="1177.7" y="1171.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.7" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.06%)</title><rect x="1178.3" y="1171.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.3" y="1182.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1179.0" y="1171.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.0" y="1182.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.06%)</title><rect x="1179.0" y="1155.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.0" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.06%)</title><rect x="1179.7" y="1203.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="1214.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.06%)</title><rect x="1179.7" y="1187.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.06%)</title><rect x="1179.7" y="1171.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.7" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.06%)</title><rect x="1179.7" y="1155.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.7" y="1166.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.06%)</title><rect x="1179.7" y="1139.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.7" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.06%)</title><rect x="1180.4" y="1203.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.06%)</title><rect x="1180.4" y="1187.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.06%)</title><rect x="1180.4" y="1171.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.4" y="1182.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1180.4" y="1155.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.4" y="1166.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.06%)</title><rect x="1180.4" y="1139.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="1150.0"></text>
</g>
<g>
<title>VectorSet::Clear() (1 samples, 0.06%)</title><rect x="1181.1" y="1203.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.1" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.47%)</title><rect x="1181.8" y="1219.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.8" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.47%)</title><rect x="1181.8" y="1203.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.47%)</title><rect x="1181.8" y="1187.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.47%)</title><rect x="1181.8" y="1171.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.41%)</title><rect x="1181.8" y="1155.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.41%)</title><rect x="1181.8" y="1139.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="1150.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1181.8" y="1123.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="1134.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.06%)</title><rect x="1181.8" y="1107.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.8" y="1118.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) [clone .part.177] (1 samples, 0.06%)</title><rect x="1181.8" y="1091.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="1102.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.06%)</title><rect x="1181.8" y="1075.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.8" y="1086.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.06%)</title><rect x="1181.8" y="1059.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.8" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.23%)</title><rect x="1182.5" y="1123.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.5" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.23%)</title><rect x="1182.5" y="1107.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.23%)</title><rect x="1182.5" y="1091.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.23%)</title><rect x="1182.5" y="1075.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.23%)</title><rect x="1182.5" y="1059.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.17%)</title><rect x="1182.5" y="1043.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1182.5" y="1027.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1182.5" y="1011.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1182.5" y="995.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1182.5" y="979.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1182.5" y="963.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1182.5" y="947.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.5" y="958.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.06%)</title><rect x="1182.5" y="931.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.5" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.06%)</title><rect x="1182.5" y="915.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.5" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.06%)</title><rect x="1182.5" y="899.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.5" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.06%)</title><rect x="1182.5" y="883.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="894.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.06%)</title><rect x="1182.5" y="867.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.5" y="878.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.06%)</title><rect x="1182.5" y="851.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.5" y="862.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.12%)</title><rect x="1183.1" y="1027.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.1" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1183.1" y="1011.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.1" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1183.1" y="995.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1183.1" y="979.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1183.1" y="963.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.1" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1183.1" y="947.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1183.1" y="931.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.1" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1183.1" y="915.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.1" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1183.1" y="899.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1183.1" y="883.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1183.1" y="867.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1183.1" y="851.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.06%)</title><rect x="1183.1" y="835.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="846.0"></text>
</g>
<g>
<title>Parse::dynamic_branch_prediction(float&amp;, BoolTest::mask, Node*) (1 samples, 0.06%)</title><rect x="1183.1" y="819.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="830.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1183.8" y="1011.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.8" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1183.8" y="995.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.8" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1183.8" y="979.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1183.8" y="963.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1183.8" y="947.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1183.8" y="931.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1183.8" y="915.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.8" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1183.8" y="899.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.8" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1183.8" y="883.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1183.8" y="867.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1183.8" y="851.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1183.8" y="835.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1183.8" y="819.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.8" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1183.8" y="803.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.8" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1183.8" y="787.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1183.8" y="771.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1183.8" y="755.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1183.8" y="739.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1183.8" y="723.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1183.8" y="707.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1183.8" y="691.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1183.8" y="675.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1183.8" y="659.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1183.8" y="643.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1183.8" y="627.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.8" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1183.8" y="611.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.8" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1183.8" y="595.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1183.8" y="579.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1183.8" y="563.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1183.8" y="547.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1183.8" y="531.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.8" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1183.8" y="515.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1183.8" y="499.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1183.8" y="483.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1183.8" y="467.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1183.8" y="451.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1183.8" y="435.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1183.8" y="419.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1183.8" y="403.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1183.8" y="387.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1183.8" y="371.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1183.8" y="355.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1183.8" y="339.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1183.8" y="323.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1183.8" y="307.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1183.8" y="291.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1183.8" y="275.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1183.8" y="259.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1183.8" y="243.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1183.8" y="227.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.8" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1183.8" y="211.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1183.8" y="195.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1183.8" y="179.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1183.8" y="163.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1183.8" y="147.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.8" y="158.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1183.8" y="131.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="142.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.06%)</title><rect x="1183.8" y="115.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.8" y="126.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.06%)</title><rect x="1183.8" y="99.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.8" y="110.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.06%)</title><rect x="1183.8" y="83.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.8" y="94.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.06%)</title><rect x="1183.8" y="67.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.8" y="78.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.06%)</title><rect x="1183.8" y="51.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.8" y="62.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.06%)</title><rect x="1183.8" y="35.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="46.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.06%)</title><rect x="1184.5" y="1043.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.5" y="1054.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.06%)</title><rect x="1184.5" y="1027.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.5" y="1038.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.06%)</title><rect x="1184.5" y="1011.0" width="0.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1187.5" y="1022.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.12%)</title><rect x="1185.2" y="1123.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.2" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.12%)</title><rect x="1185.2" y="1107.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.2" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.12%)</title><rect x="1185.2" y="1091.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.12%)</title><rect x="1185.2" y="1075.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.12%)</title><rect x="1185.2" y="1059.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.12%)</title><rect x="1185.2" y="1043.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.12%)</title><rect x="1185.2" y="1027.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.2" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.12%)</title><rect x="1185.2" y="1011.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.2" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.12%)</title><rect x="1185.2" y="995.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.12%)</title><rect x="1185.2" y="979.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.12%)</title><rect x="1185.2" y="963.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.12%)</title><rect x="1185.2" y="947.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1185.2" y="931.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.2" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1185.2" y="915.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.2" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1185.2" y="899.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1185.2" y="883.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1185.2" y="867.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1185.2" y="851.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1185.2" y="835.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.2" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1185.2" y="819.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.2" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1185.2" y="803.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1185.2" y="787.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1185.2" y="771.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1185.2" y="755.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1185.2" y="739.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1185.2" y="723.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1185.2" y="707.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1185.2" y="691.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1185.2" y="675.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1185.2" y="659.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.06%)</title><rect x="1185.2" y="643.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.06%)</title><rect x="1185.2" y="627.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.2" y="638.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.06%)</title><rect x="1185.2" y="611.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="622.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.06%)</title><rect x="1185.2" y="595.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.2" y="606.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.06%)</title><rect x="1185.2" y="579.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="590.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.06%)</title><rect x="1185.2" y="563.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.2" y="574.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.06%)</title><rect x="1185.2" y="547.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.2" y="558.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.06%)</title><rect x="1185.2" y="531.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.06%)</title><rect x="1185.9" y="931.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.9" y="942.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.06%)</title><rect x="1185.9" y="915.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.9" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.06%)</title><rect x="1185.9" y="899.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.9" y="910.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.06%)</title><rect x="1185.9" y="883.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.9" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.06%)</title><rect x="1185.9" y="867.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.9" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.06%)</title><rect x="1185.9" y="851.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="862.0"></text>
</g>
<g>
<title>JavaFieldStream::JavaFieldStream(InstanceKlass const*) (1 samples, 0.06%)</title><rect x="1185.9" y="835.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.9" y="846.0"></text>
</g>
<g>
<title>constantPoolHandle::operator=(constantPoolHandle const&amp;) (1 samples, 0.06%)</title><rect x="1185.9" y="819.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.9" y="830.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.06%)</title><rect x="1186.6" y="1155.0" width="0.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1189.6" y="1166.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.17%)</title><rect x="1187.3" y="1251.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.3" y="1262.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 0.17%)</title><rect x="1187.3" y="1235.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.3" y="1246.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.17%)</title><rect x="1187.3" y="1219.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.3" y="1230.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.17%)</title><rect x="1187.3" y="1203.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.3" y="1214.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (1 samples, 0.06%)</title><rect x="1187.3" y="1187.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.3" y="1198.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.06%)</title><rect x="1187.3" y="1171.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.3" y="1182.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.06%)</title><rect x="1187.3" y="1155.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.3" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.06%)</title><rect x="1187.3" y="1139.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.3" y="1150.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.06%)</title><rect x="1187.3" y="1123.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.3" y="1134.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.06%)</title><rect x="1187.3" y="1107.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.3" y="1118.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.06%)</title><rect x="1187.3" y="1091.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.3" y="1102.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.06%)</title><rect x="1187.3" y="1075.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.3" y="1086.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::propagate(MethodLiveness*) (1 samples, 0.06%)</title><rect x="1187.3" y="1059.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.3" y="1070.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.12%)</title><rect x="1187.9" y="1187.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="1198.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.12%)</title><rect x="1187.9" y="1171.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.9" y="1182.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.06%)</title><rect x="1187.9" y="1155.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.9" y="1166.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (1 samples, 0.06%)</title><rect x="1187.9" y="1139.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.9" y="1150.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.06%)</title><rect x="1187.9" y="1123.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.9" y="1134.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.06%)</title><rect x="1188.6" y="1155.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.6" y="1166.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.06%)</title><rect x="1188.6" y="1139.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1191.6" y="1150.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.06%)</title><rect x="1189.3" y="1315.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.3" y="1326.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.06%)</title><rect x="1189.3" y="1299.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.3" y="1310.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.06%)</title><rect x="1189.3" y="1283.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.3" y="1294.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.06%)</title><rect x="1189.3" y="1267.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.3" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1189.3" y="1251.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1192.3" y="1262.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.06%)</title><rect x="1189.3" y="1235.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1192.3" y="1246.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.06%)</title><rect x="1189.3" y="1219.0" width="0.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1192.3" y="1230.0"></text>
</g>
</g>
</svg>
