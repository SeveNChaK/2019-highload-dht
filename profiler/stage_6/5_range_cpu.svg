<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (6,020 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (6 samples, 0.10%)</title><rect x="10.4" y="883.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.4" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (88 samples, 1.46%)</title><rect x="11.8" y="883.0" width="17.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.8" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (81 samples, 1.35%)</title><rect x="12.9" y="867.0" width="15.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.9" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (79 samples, 1.31%)</title><rect x="13.3" y="851.0" width="15.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="16.3" y="862.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (2 samples, 0.03%)</title><rect x="13.3" y="835.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.3" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (70 samples, 1.16%)</title><rect x="13.7" y="835.0" width="13.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="16.7" y="846.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (3 samples, 0.05%)</title><rect x="14.7" y="819.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="17.7" y="830.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (3 samples, 0.05%)</title><rect x="14.7" y="803.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="17.7" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.03%)</title><rect x="15.3" y="819.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="18.3" y="830.0"></text>
</g>
<g>
<title>JfrAllocationTracer::~JfrAllocationTracer() (2 samples, 0.03%)</title><rect x="15.9" y="819.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="18.9" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (51 samples, 0.85%)</title><rect x="16.5" y="819.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="19.5" y="830.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (3 samples, 0.05%)</title><rect x="17.6" y="803.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="20.6" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (28 samples, 0.47%)</title><rect x="18.4" y="803.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="21.4" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (26 samples, 0.43%)</title><rect x="18.8" y="787.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="21.8" y="798.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (6 samples, 0.10%)</title><rect x="19.0" y="771.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="22.0" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (5 samples, 0.08%)</title><rect x="19.2" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="22.2" y="766.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (2 samples, 0.03%)</title><rect x="19.4" y="739.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="22.4" y="750.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (13 samples, 0.22%)</title><rect x="20.6" y="771.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="23.6" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (7 samples, 0.12%)</title><rect x="20.8" y="755.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="23.8" y="766.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (7 samples, 0.12%)</title><rect x="20.8" y="739.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="23.8" y="750.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (3 samples, 0.05%)</title><rect x="21.0" y="723.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="24.0" y="734.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (2 samples, 0.03%)</title><rect x="21.6" y="723.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="24.6" y="734.0"></text>
</g>
<g>
<title>HSpaceCounters::update_used(unsigned long) (3 samples, 0.05%)</title><rect x="22.5" y="755.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="25.5" y="766.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (3 samples, 0.05%)</title><rect x="23.3" y="771.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="26.3" y="782.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (8 samples, 0.13%)</title><rect x="24.1" y="803.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="27.1" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (5 samples, 0.08%)</title><rect x="24.1" y="787.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="27.1" y="798.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (3 samples, 0.05%)</title><rect x="24.5" y="771.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="27.5" y="782.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (3 samples, 0.05%)</title><rect x="25.1" y="787.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="28.1" y="798.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (3 samples, 0.05%)</title><rect x="25.7" y="803.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="28.7" y="814.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (2 samples, 0.03%)</title><rect x="27.1" y="819.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="30.1" y="830.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (2 samples, 0.03%)</title><rect x="27.4" y="835.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="30.4" y="846.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.08%)</title><rect x="27.8" y="835.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="30.8" y="846.0"></text>
</g>
<g>
<title>[not_walkable_Java] (11 samples, 0.18%)</title><rect x="29.2" y="883.0" width="2.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="32.2" y="894.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (3 samples, 0.05%)</title><rect x="29.2" y="867.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="32.2" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.05%)</title><rect x="29.8" y="867.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="32.8" y="878.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (2 samples, 0.03%)</title><rect x="30.0" y="851.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="33.0" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (5 samples, 0.08%)</title><rect x="30.4" y="867.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="33.4" y="878.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.23%)</title><rect x="31.4" y="883.0" width="2.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="34.4" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 0.07%)</title><rect x="31.4" y="867.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="34.4" y="878.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="31.8" y="851.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="34.8" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="31.8" y="835.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="34.8" y="846.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.07%)</title><rect x="32.1" y="867.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="35.1" y="878.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.07%)</title><rect x="32.1" y="851.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="35.1" y="862.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.1 (6 samples, 0.10%)</title><rect x="32.9" y="867.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="35.9" y="878.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="32.9" y="851.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="35.9" y="862.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="32.9" y="835.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="35.9" y="846.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="32.9" y="819.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="35.9" y="830.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="32.9" y="803.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="35.9" y="814.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="32.9" y="787.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="35.9" y="798.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="33.1" y="771.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="36.1" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="33.7" y="755.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="36.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="33.7" y="739.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="36.7" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="33.7" y="723.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="36.7" y="734.0"></text>
</g>
<g>
<title>[unknown_Java] (92 samples, 1.53%)</title><rect x="34.1" y="883.0" width="18.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="37.1" y="894.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="51.2" y="867.0" width="0.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="54.2" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.05%)</title><rect x="51.2" y="851.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="54.2" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="51.8" y="851.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="54.8" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="51.8" y="835.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="54.8" y="846.0"></text>
</g>
<g>
<title>__GI___vsnprintf_chk (5 samples, 0.08%)</title><rect x="52.1" y="883.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="55.1" y="894.0"></text>
</g>
<g>
<title>vfprintf (5 samples, 0.08%)</title><rect x="52.1" y="867.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="55.1" y="878.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (5,490 samples, 91.20%)</title><rect x="53.7" y="883.0" width="1076.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.7" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2 samples, 0.03%)</title><rect x="53.9" y="867.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="56.9" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2 samples, 0.03%)</title><rect x="53.9" y="851.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.9" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (53 samples, 0.88%)</title><rect x="54.3" y="867.0" width="10.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="57.3" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (6 samples, 0.10%)</title><rect x="54.9" y="851.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="57.9" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (4 samples, 0.07%)</title><rect x="55.3" y="835.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="58.3" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (44 samples, 0.73%)</title><rect x="56.1" y="851.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="59.1" y="862.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 0.53%)</title><rect x="58.0" y="835.0" width="6.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="61.0" y="846.0"></text>
</g>
<g>
<title>epoll_wait (30 samples, 0.50%)</title><rect x="58.4" y="819.0" width="5.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="61.4" y="830.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.45%)</title><rect x="59.0" y="803.0" width="5.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="62.0" y="814.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.45%)</title><rect x="59.0" y="787.0" width="5.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="62.0" y="798.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.42%)</title><rect x="59.4" y="771.0" width="4.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="62.4" y="782.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.40%)</title><rect x="59.6" y="755.0" width="4.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="62.6" y="766.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.38%)</title><rect x="59.8" y="739.0" width="4.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="62.8" y="750.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.33%)</title><rect x="60.4" y="723.0" width="3.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="63.4" y="734.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.28%)</title><rect x="61.0" y="707.0" width="3.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="64.0" y="718.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.22%)</title><rect x="61.7" y="691.0" width="2.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="64.7" y="702.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.18%)</title><rect x="62.1" y="675.0" width="2.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="65.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.12%)</title><rect x="62.9" y="659.0" width="1.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="65.9" y="670.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="63.9" y="643.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="66.9" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="63.9" y="627.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="66.9" y="638.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="63.9" y="611.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="66.9" y="622.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="63.9" y="595.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="66.9" y="606.0"></text>
</g>
<g>
<title>_init (2 samples, 0.03%)</title><rect x="64.3" y="835.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="67.3" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (5,434 samples, 90.27%)</title><rect x="64.7" y="867.0" width="1065.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="67.7" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (5,434 samples, 90.27%)</title><rect x="64.7" y="851.0" width="1065.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.7" y="862.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (5,403 samples, 89.75%)</title><rect x="64.9" y="835.0" width="1059.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="67.9" y="846.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (5,394 samples, 89.60%)</title><rect x="64.9" y="819.0" width="1057.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="67.9" y="830.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (5,394 samples, 89.60%)</title><rect x="64.9" y="803.0" width="1057.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.9" y="814.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler2_entities.handleRequest (5,390 samples, 89.53%)</title><rect x="64.9" y="787.0" width="1056.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.9" y="798.0">RequestHandler2_entities.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (9 samples, 0.15%)</title><rect x="64.9" y="771.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="67.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.07%)</title><rect x="65.1" y="755.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="68.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (2 samples, 0.03%)</title><rect x="65.3" y="739.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="68.3" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (4 samples, 0.07%)</title><rect x="65.9" y="755.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="68.9" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/ReplicatedHttpServer.entities (5,381 samples, 89.39%)</title><rect x="66.6" y="771.0" width="1054.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="69.6" y="782.0">ru/mail/polis/service/alex/ReplicatedHttpServer.entities</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.08%)</title><rect x="66.8" y="755.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="69.8" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.07%)</title><rect x="67.0" y="739.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.0" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="67.0" y="723.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.0" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="67.0" y="707.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="70.0" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="67.2" y="691.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="70.2" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="67.2" y="675.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.2" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="67.2" y="659.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.2" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.03%)</title><rect x="67.2" y="643.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="70.2" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.range (5,057 samples, 84.00%)</title><rect x="67.8" y="755.0" width="991.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="70.8" y="766.0">ru/mail/polis/dao/DAO.range</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (42 samples, 0.70%)</title><rect x="68.8" y="739.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="71.8" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (42 samples, 0.70%)</title><rect x="68.8" y="723.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="71.8" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (26 samples, 0.43%)</title><rect x="69.2" y="707.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="72.2" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (11 samples, 0.18%)</title><rect x="72.1" y="691.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="75.1" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.07%)</title><rect x="73.5" y="675.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="76.5" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.07%)</title><rect x="73.5" y="659.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="76.5" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.07%)</title><rect x="73.5" y="643.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="76.5" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (14 samples, 0.23%)</title><rect x="74.3" y="707.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="77.3" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (40 samples, 0.66%)</title><rect x="77.0" y="739.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="80.0" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (33 samples, 0.55%)</title><rect x="78.4" y="723.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.4" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (3 samples, 0.05%)</title><rect x="84.9" y="739.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="87.9" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.&lt;init&gt; (3 samples, 0.05%)</title><rect x="84.9" y="723.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="87.9" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.empty (3 samples, 0.05%)</title><rect x="85.5" y="739.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="88.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.until (4,901 samples, 81.41%)</title><rect x="86.1" y="739.0" width="960.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="89.1" y="750.0">ru/mail/polis/dao/Iters.until</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.&lt;init&gt; (4,900 samples, 81.40%)</title><rect x="86.2" y="723.0" width="960.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="89.2" y="734.0">ru/mail/polis/dao/Iters$UntilIterator.&lt;init&gt;</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (4,900 samples, 81.40%)</title><rect x="86.2" y="707.0" width="960.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="89.2" y="718.0">com/google/common/collect/TransformedIterator.hasNext</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (4,900 samples, 81.40%)</title><rect x="86.2" y="691.0" width="960.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.2" y="702.0">com/google/common/collect/AbstractIterator.hasNext</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (4,900 samples, 81.40%)</title><rect x="86.2" y="675.0" width="960.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="89.2" y="686.0">com/google/common/collect/AbstractIterator.tryToComputeNext</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (4,898 samples, 81.36%)</title><rect x="86.6" y="659.0" width="960.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="89.6" y="670.0">com/google/common/collect/Iterators$5.computeNext</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2 samples, 0.03%)</title><rect x="91.9" y="643.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="94.9" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (4,865 samples, 80.81%)</title><rect x="92.3" y="643.0" width="953.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="95.3" y="654.0">ru/mail/polis/dao/Iters$CollapseEqualsIterator.next</text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="148.4" y="627.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="151.4" y="638.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="148.4" y="611.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="151.4" y="622.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="148.4" y="595.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="151.4" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (27 samples, 0.45%)</title><rect x="148.8" y="627.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="151.8" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3,393 samples, 56.36%)</title><rect x="154.1" y="627.0" width="665.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="157.1" y="638.0">com/google/common/collect/Iterators$MergingIterator.next</text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="162.1" y="611.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="165.1" y="622.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="162.1" y="595.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="165.1" y="606.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="162.1" y="579.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="165.1" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (3,348 samples, 55.61%)</title><rect x="162.5" y="611.0" width="656.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="165.5" y="622.0">com/google/common/collect/Iterators$PeekingImpl.next</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3,343 samples, 55.53%)</title><rect x="163.5" y="595.0" width="655.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="166.5" y="606.0">ru/mail/polis/dao/Iters$CollapseEqualsIterator.next</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (33 samples, 0.55%)</title><rect x="167.8" y="579.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="170.8" y="590.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.isEmpty (15 samples, 0.25%)</title><rect x="171.3" y="563.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="174.3" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2,128 samples, 35.35%)</title><rect x="174.3" y="579.0" width="417.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="177.3" y="590.0">com/google/common/collect/Iterators$MergingIterator.next</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (7 samples, 0.12%)</title><rect x="180.1" y="563.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="183.1" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (1,894 samples, 31.46%)</title><rect x="181.5" y="563.0" width="371.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="184.5" y="574.0">com/google/common/collect/Iterators$PeekingImpl.next</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (434 samples, 7.21%)</title><rect x="198.2" y="547.0" width="85.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="201.2" y="558.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (434 samples, 7.21%)</title><rect x="198.2" y="531.0" width="85.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.2" y="542.0">java/util/..</text>
</g>
<g>
<title>SafepointBlob (2 samples, 0.03%)</title><rect x="254.4" y="515.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="257.4" y="526.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="254.4" y="499.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="257.4" y="510.0"></text>
</g>
<g>
<title>__restore_rt (2 samples, 0.03%)</title><rect x="254.4" y="483.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="257.4" y="494.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="254.8" y="515.0" width="1.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="257.8" y="526.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="254.8" y="499.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="257.8" y="510.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="254.8" y="483.0" width="1.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="257.8" y="494.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="255.2" y="467.0" width="0.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="258.2" y="478.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="255.2" y="451.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="258.2" y="462.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (39 samples, 0.65%)</title><rect x="256.0" y="515.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.0" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (29 samples, 0.48%)</title><rect x="263.6" y="515.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="266.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (71 samples, 1.18%)</title><rect x="269.3" y="515.0" width="13.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.3" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1,375 samples, 22.84%)</title><rect x="283.2" y="547.0" width="269.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="286.2" y="558.0">ru/mail/polis/dao/Iters$CollapseEqua..</text>
</g>
<g>
<title>[unknown] (10 samples, 0.17%)</title><rect x="441.4" y="531.0" width="2.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="444.4" y="542.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.17%)</title><rect x="441.4" y="515.0" width="2.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="444.4" y="526.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.17%)</title><rect x="441.4" y="499.0" width="2.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="444.4" y="510.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="442.6" y="483.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="445.6" y="494.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="442.6" y="467.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="445.6" y="478.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="442.6" y="451.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="445.6" y="462.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="442.8" y="435.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="445.8" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (326 samples, 5.42%)</title><rect x="443.4" y="531.0" width="63.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="446.4" y="542.0">com/goo..</text>
</g>
<g>
<title>java/util/AbstractCollection.isEmpty (294 samples, 4.88%)</title><rect x="449.7" y="515.0" width="57.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="452.7" y="526.0">java/u..</text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="506.7" y="499.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="509.7" y="510.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="506.7" y="483.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="509.7" y="494.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="506.7" y="467.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="509.7" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (28 samples, 0.47%)</title><rect x="507.3" y="531.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="510.3" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.13%)</title><rect x="510.2" y="515.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="513.2" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (5 samples, 0.08%)</title><rect x="511.8" y="515.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="514.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$330/1708482040.apply (204 samples, 3.39%)</title><rect x="512.8" y="531.0" width="40.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="515.8" y="542.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (162 samples, 2.69%)</title><rect x="521.0" y="515.0" width="31.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="524.0" y="526.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (108 samples, 1.79%)</title><rect x="531.6" y="499.0" width="21.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="534.6" y="510.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (38 samples, 0.63%)</title><rect x="545.3" y="483.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="548.3" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (38 samples, 0.63%)</title><rect x="545.3" y="467.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="548.3" y="478.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (134 samples, 2.23%)</title><rect x="552.8" y="563.0" width="26.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="555.8" y="574.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (122 samples, 2.03%)</title><rect x="555.1" y="547.0" width="23.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="558.1" y="558.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (63 samples, 1.05%)</title><rect x="579.0" y="563.0" width="12.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="582.0" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (63 samples, 1.05%)</title><rect x="579.0" y="547.0" width="12.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="582.0" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (63 samples, 1.05%)</title><rect x="579.0" y="531.0" width="12.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="582.0" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (59 samples, 0.98%)</title><rect x="579.8" y="515.0" width="11.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="582.8" y="526.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="591.0" y="499.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="594.0" y="510.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="591.0" y="483.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="594.0" y="494.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="591.0" y="467.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="594.0" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (781 samples, 12.97%)</title><rect x="591.4" y="579.0" width="153.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="594.4" y="590.0">java/nio/ByteBuffer..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (780 samples, 12.96%)</title><rect x="591.6" y="563.0" width="152.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="594.6" y="574.0">java/nio/BufferMism..</text>
</g>
<g>
<title>[unknown] (7 samples, 0.12%)</title><rect x="696.0" y="547.0" width="1.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="699.0" y="558.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.12%)</title><rect x="696.0" y="531.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="699.0" y="542.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.12%)</title><rect x="696.0" y="515.0" width="1.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="699.0" y="526.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="696.6" y="499.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="699.6" y="510.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="696.6" y="483.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="699.6" y="494.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="696.6" y="467.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="699.6" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (240 samples, 3.99%)</title><rect x="697.4" y="547.0" width="47.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="700.4" y="558.0">java..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="727.0" y="531.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="730.0" y="542.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="727.0" y="515.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="730.0" y="526.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="727.0" y="499.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="730.0" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (85 samples, 1.41%)</title><rect x="727.4" y="531.0" width="16.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="730.4" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (2 samples, 0.03%)</title><rect x="744.1" y="531.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="747.1" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$330/1708482040.apply (379 samples, 6.30%)</title><rect x="744.5" y="579.0" width="74.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="747.5" y="590.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (377 samples, 6.26%)</title><rect x="744.9" y="563.0" width="73.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="747.9" y="574.0">ru/mail/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (377 samples, 6.26%)</title><rect x="744.9" y="547.0" width="73.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="747.9" y="558.0">java/nio..</text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.05%)</title><rect x="755.4" y="531.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="758.4" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (320 samples, 5.32%)</title><rect x="756.0" y="531.0" width="62.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="759.0" y="542.0">java/n..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (319 samples, 5.30%)</title><rect x="756.2" y="515.0" width="62.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="759.2" y="526.0">java/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (319 samples, 5.30%)</title><rect x="756.2" y="499.0" width="62.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="759.2" y="510.0">java/n..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (311 samples, 5.17%)</title><rect x="757.8" y="483.0" width="61.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="760.8" y="494.0">java/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (127 samples, 2.11%)</title><rect x="757.8" y="467.0" width="24.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="760.8" y="478.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (101 samples, 1.68%)</title><rect x="762.9" y="451.0" width="19.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="765.9" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (70 samples, 1.16%)</title><rect x="769.0" y="435.0" width="13.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="772.0" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (184 samples, 3.06%)</title><rect x="782.7" y="467.0" width="36.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="785.7" y="478.0">jav..</text>
</g>
<g>
<title>ThreadSafepointState::handle_polling_page_exception() (2 samples, 0.03%)</title><rect x="799.9" y="451.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="802.9" y="462.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="800.3" y="451.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="803.3" y="462.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="800.3" y="435.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="803.3" y="446.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="800.3" y="419.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="803.3" y="430.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="800.5" y="403.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="803.5" y="414.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="800.5" y="387.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="803.5" y="398.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="800.5" y="371.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="803.5" y="382.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="800.5" y="355.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="803.5" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (42 samples, 0.70%)</title><rect x="800.9" y="451.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="803.9" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (49 samples, 0.81%)</title><rect x="809.1" y="451.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="812.1" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (37 samples, 0.61%)</title><rect x="811.5" y="435.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="814.5" y="446.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (2 samples, 0.03%)</title><rect x="818.8" y="611.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="821.8" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (2 samples, 0.03%)</title><rect x="818.8" y="595.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="821.8" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (876 samples, 14.55%)</title><rect x="819.1" y="627.0" width="171.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="822.1" y="638.0">java/nio/ByteBuffer.eq..</text>
</g>
<g>
<title>java/nio/Buffer.remaining (13 samples, 0.22%)</title><rect x="822.3" y="611.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="825.3" y="622.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (847 samples, 14.07%)</title><rect x="824.8" y="611.0" width="166.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="827.8" y="622.0">java/nio/BufferMismat..</text>
</g>
<g>
<title>[unknown] (10 samples, 0.17%)</title><rect x="926.0" y="595.0" width="1.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="929.0" y="606.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.17%)</title><rect x="926.0" y="579.0" width="1.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="929.0" y="590.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.17%)</title><rect x="926.0" y="563.0" width="1.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="929.0" y="574.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="926.8" y="547.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="929.8" y="558.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="926.8" y="531.0" width="1.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="929.8" y="542.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="927.3" y="515.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="930.3" y="526.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="927.3" y="499.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="930.3" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (321 samples, 5.33%)</title><rect x="927.9" y="595.0" width="63.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="930.9" y="606.0">java/n..</text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="962.4" y="579.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="965.4" y="590.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="962.4" y="563.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="965.4" y="574.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="962.4" y="547.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="965.4" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (138 samples, 2.29%)</title><rect x="963.0" y="579.0" width="27.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="966.0" y="590.0">j..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="989.7" y="563.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="992.7" y="574.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="989.7" y="547.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="992.7" y="558.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="989.7" y="531.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="992.7" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (4 samples, 0.07%)</title><rect x="990.1" y="579.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="993.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$330/1708482040.apply (281 samples, 4.67%)</title><rect x="990.9" y="627.0" width="55.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="993.9" y="638.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (254 samples, 4.22%)</title><rect x="996.1" y="611.0" width="49.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="999.1" y="622.0">ru/ma..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (240 samples, 3.99%)</title><rect x="998.9" y="595.0" width="47.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1001.9" y="606.0">java..</text>
</g>
<g>
<title>java/nio/Buffer.capacity (9 samples, 0.15%)</title><rect x="1011.0" y="579.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1014.0" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.03%)</title><rect x="1012.8" y="579.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1015.8" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.markValue (21 samples, 0.35%)</title><rect x="1013.2" y="579.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1016.2" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.10%)</title><rect x="1017.3" y="579.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1020.3" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (140 samples, 2.33%)</title><rect x="1018.5" y="579.0" width="27.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1021.5" y="590.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (128 samples, 2.13%)</title><rect x="1020.8" y="563.0" width="25.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1023.8" y="574.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (113 samples, 1.88%)</title><rect x="1023.8" y="547.0" width="22.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1026.8" y="558.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (87 samples, 1.45%)</title><rect x="1028.9" y="531.0" width="17.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1031.9" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (40 samples, 0.66%)</title><rect x="1032.8" y="515.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1035.8" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (40 samples, 0.66%)</title><rect x="1032.8" y="499.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1035.8" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (40 samples, 0.66%)</title><rect x="1032.8" y="483.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1035.8" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (27 samples, 0.45%)</title><rect x="1040.6" y="515.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1043.6" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (27 samples, 0.45%)</title><rect x="1040.6" y="499.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1043.6" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (27 samples, 0.45%)</title><rect x="1040.6" y="483.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1043.6" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/LSMDao$$Lambda$352/1163804315.apply (4 samples, 0.07%)</title><rect x="1045.9" y="643.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1048.9" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/LSMDao.lambda$iterator$0 (2 samples, 0.03%)</title><rect x="1046.3" y="627.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1049.3" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Value.isDead (2 samples, 0.03%)</title><rect x="1046.3" y="611.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1049.3" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/LSMDao.iterator (63 samples, 1.05%)</title><rect x="1046.7" y="739.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1049.7" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/LSMDao.rowsIterator (62 samples, 1.03%)</title><rect x="1046.9" y="723.0" width="12.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1049.9" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.combineTables (44 samples, 0.73%)</title><rect x="1047.5" y="707.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1050.5" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTablePool.iterator (44 samples, 0.73%)</title><rect x="1047.5" y="691.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1050.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (10 samples, 0.17%)</title><rect x="1047.7" y="675.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1050.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (10 samples, 0.17%)</title><rect x="1047.7" y="659.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1050.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (10 samples, 0.17%)</title><rect x="1047.7" y="643.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1050.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.fullTryAcquireShared (6 samples, 0.10%)</title><rect x="1048.5" y="627.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1051.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (2 samples, 0.03%)</title><rect x="1049.7" y="675.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1052.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (2 samples, 0.03%)</title><rect x="1049.7" y="659.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1052.7" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.combineTables (23 samples, 0.38%)</title><rect x="1050.0" y="675.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1053.0" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTable.iterator (20 samples, 0.33%)</title><rect x="1050.6" y="659.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1053.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (19 samples, 0.32%)</title><rect x="1050.8" y="643.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1053.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (18 samples, 0.30%)</title><rect x="1051.0" y="627.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1054.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (18 samples, 0.30%)</title><rect x="1051.0" y="611.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1054.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (15 samples, 0.25%)</title><rect x="1051.6" y="595.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1054.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (15 samples, 0.25%)</title><rect x="1051.6" y="579.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1054.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (14 samples, 0.23%)</title><rect x="1051.8" y="563.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1054.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (8 samples, 0.13%)</title><rect x="1053.0" y="547.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1056.0" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.13%)</title><rect x="1053.0" y="531.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1056.0" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.05%)</title><rect x="1054.0" y="515.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1057.0" y="526.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="1054.2" y="499.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1057.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.transformRows (8 samples, 0.13%)</title><rect x="1054.6" y="675.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1057.6" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (6 samples, 0.10%)</title><rect x="1054.6" y="659.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1057.6" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (6 samples, 0.10%)</title><rect x="1054.6" y="643.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1057.6" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1055.1" y="627.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1058.1" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (2 samples, 0.03%)</title><rect x="1055.7" y="659.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1058.7" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1055.7" y="643.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1058.7" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2 samples, 0.03%)</title><rect x="1055.7" y="627.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1058.7" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (2 samples, 0.03%)</title><rect x="1055.7" y="611.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1058.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (2 samples, 0.03%)</title><rect x="1055.7" y="595.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1058.7" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.transformRows (15 samples, 0.25%)</title><rect x="1056.1" y="707.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1059.1" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (2 samples, 0.03%)</title><rect x="1056.3" y="691.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1059.3" y="702.0"></text>
</g>
<g>
<title>com/google/common/base/Preconditions.checkNotNull (2 samples, 0.03%)</title><rect x="1056.3" y="675.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1059.3" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (12 samples, 0.20%)</title><rect x="1056.7" y="691.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1059.7" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (12 samples, 0.20%)</title><rect x="1056.7" y="675.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1059.7" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (12 samples, 0.20%)</title><rect x="1056.7" y="659.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1059.7" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (12 samples, 0.20%)</title><rect x="1056.7" y="643.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1059.7" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (12 samples, 0.20%)</title><rect x="1056.7" y="627.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1059.7" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (4 samples, 0.07%)</title><rect x="1056.7" y="611.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1059.7" y="622.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (3 samples, 0.05%)</title><rect x="1056.9" y="595.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1059.9" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (3 samples, 0.05%)</title><rect x="1056.9" y="579.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1059.9" y="590.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1057.1" y="563.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1060.1" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$330/1708482040.apply (8 samples, 0.13%)</title><rect x="1057.5" y="611.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1060.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (8 samples, 0.13%)</title><rect x="1057.5" y="595.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1060.5" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (8 samples, 0.13%)</title><rect x="1057.5" y="579.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1060.5" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (6 samples, 0.10%)</title><rect x="1057.9" y="563.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1060.9" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="1057.9" y="547.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1060.9" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="1057.9" y="531.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1060.9" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="1057.9" y="515.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1060.9" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.07%)</title><rect x="1058.1" y="499.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1061.1" y="510.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.03%)</title><rect x="1058.5" y="483.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1061.5" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/StorageSession.stream (318 samples, 5.28%)</title><rect x="1059.1" y="755.0" width="62.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1062.1" y="766.0">ru/mai..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (250 samples, 4.15%)</title><rect x="1059.3" y="739.0" width="49.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1062.3" y="750.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.03%)</title><rect x="1059.3" y="723.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1062.3" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.03%)</title><rect x="1059.3" y="707.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1062.3" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (248 samples, 4.12%)</title><rect x="1059.7" y="723.0" width="48.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1062.7" y="734.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (247 samples, 4.10%)</title><rect x="1059.8" y="707.0" width="48.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1062.8" y="718.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (245 samples, 4.07%)</title><rect x="1060.0" y="691.0" width="48.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1063.0" y="702.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (245 samples, 4.07%)</title><rect x="1060.0" y="675.0" width="48.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1063.0" y="686.0">one/..</text>
</g>
<g>
<title>[unknown] (11 samples, 0.18%)</title><rect x="1060.8" y="659.0" width="2.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1063.8" y="670.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.17%)</title><rect x="1060.8" y="643.0" width="2.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1063.8" y="654.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (9 samples, 0.15%)</title><rect x="1060.8" y="627.0" width="1.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1063.8" y="638.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="1061.2" y="611.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1064.2" y="622.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="1061.8" y="611.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1064.8" y="622.0"></text>
</g>
<g>
<title>__send (230 samples, 3.82%)</title><rect x="1063.0" y="659.0" width="45.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1066.0" y="670.0">__send</text>
</g>
<g>
<title>[unknown] (227 samples, 3.77%)</title><rect x="1063.6" y="643.0" width="44.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1066.6" y="654.0">[unk..</text>
</g>
<g>
<title>[unknown] (227 samples, 3.77%)</title><rect x="1063.6" y="627.0" width="44.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1066.6" y="638.0">[unk..</text>
</g>
<g>
<title>[unknown] (224 samples, 3.72%)</title><rect x="1064.2" y="611.0" width="43.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1067.2" y="622.0">[unk..</text>
</g>
<g>
<title>[unknown] (224 samples, 3.72%)</title><rect x="1064.2" y="595.0" width="43.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1067.2" y="606.0">[unk..</text>
</g>
<g>
<title>[unknown] (223 samples, 3.70%)</title><rect x="1064.4" y="579.0" width="43.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1067.4" y="590.0">[unk..</text>
</g>
<g>
<title>[unknown] (222 samples, 3.69%)</title><rect x="1064.6" y="563.0" width="43.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1067.6" y="574.0">[unk..</text>
</g>
<g>
<title>[unknown] (220 samples, 3.65%)</title><rect x="1064.9" y="547.0" width="43.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1067.9" y="558.0">[unk..</text>
</g>
<g>
<title>[unknown] (219 samples, 3.64%)</title><rect x="1065.1" y="531.0" width="43.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1068.1" y="542.0">[unk..</text>
</g>
<g>
<title>[unknown] (207 samples, 3.44%)</title><rect x="1067.5" y="515.0" width="40.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1070.5" y="526.0">[un..</text>
</g>
<g>
<title>[unknown] (201 samples, 3.34%)</title><rect x="1068.7" y="499.0" width="39.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1071.7" y="510.0">[un..</text>
</g>
<g>
<title>[unknown] (194 samples, 3.22%)</title><rect x="1070.0" y="483.0" width="38.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1073.0" y="494.0">[un..</text>
</g>
<g>
<title>[unknown] (182 samples, 3.02%)</title><rect x="1072.4" y="467.0" width="35.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1075.4" y="478.0">[un..</text>
</g>
<g>
<title>[unknown] (167 samples, 2.77%)</title><rect x="1075.3" y="451.0" width="32.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1078.3" y="462.0">[u..</text>
</g>
<g>
<title>[unknown] (165 samples, 2.74%)</title><rect x="1075.7" y="435.0" width="32.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1078.7" y="446.0">[u..</text>
</g>
<g>
<title>[unknown] (162 samples, 2.69%)</title><rect x="1076.3" y="419.0" width="31.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1079.3" y="430.0">[u..</text>
</g>
<g>
<title>[unknown] (160 samples, 2.66%)</title><rect x="1076.7" y="403.0" width="31.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1079.7" y="414.0">[u..</text>
</g>
<g>
<title>[unknown] (157 samples, 2.61%)</title><rect x="1077.3" y="387.0" width="30.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1080.3" y="398.0">[u..</text>
</g>
<g>
<title>[unknown] (148 samples, 2.46%)</title><rect x="1079.1" y="371.0" width="29.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1082.1" y="382.0">[u..</text>
</g>
<g>
<title>[unknown] (135 samples, 2.24%)</title><rect x="1081.6" y="355.0" width="26.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1084.6" y="366.0">[..</text>
</g>
<g>
<title>[unknown] (128 samples, 2.13%)</title><rect x="1083.0" y="339.0" width="25.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1086.0" y="350.0">[..</text>
</g>
<g>
<title>[unknown] (118 samples, 1.96%)</title><rect x="1084.9" y="323.0" width="23.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1087.9" y="334.0">[..</text>
</g>
<g>
<title>[unknown] (108 samples, 1.79%)</title><rect x="1086.9" y="307.0" width="21.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1089.9" y="318.0">[..</text>
</g>
<g>
<title>[unknown] (104 samples, 1.73%)</title><rect x="1087.7" y="291.0" width="20.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1090.7" y="302.0"></text>
</g>
<g>
<title>[unknown] (97 samples, 1.61%)</title><rect x="1089.1" y="275.0" width="19.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1092.1" y="286.0"></text>
</g>
<g>
<title>[unknown] (94 samples, 1.56%)</title><rect x="1089.6" y="259.0" width="18.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1092.6" y="270.0"></text>
</g>
<g>
<title>[unknown] (90 samples, 1.50%)</title><rect x="1090.4" y="243.0" width="17.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1093.4" y="254.0"></text>
</g>
<g>
<title>[unknown] (88 samples, 1.46%)</title><rect x="1090.8" y="227.0" width="17.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1093.8" y="238.0"></text>
</g>
<g>
<title>[unknown] (80 samples, 1.33%)</title><rect x="1092.4" y="211.0" width="15.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1095.4" y="222.0"></text>
</g>
<g>
<title>[unknown] (78 samples, 1.30%)</title><rect x="1092.8" y="195.0" width="15.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1095.8" y="206.0"></text>
</g>
<g>
<title>[unknown] (76 samples, 1.26%)</title><rect x="1093.2" y="179.0" width="14.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1096.2" y="190.0"></text>
</g>
<g>
<title>[unknown] (72 samples, 1.20%)</title><rect x="1094.0" y="163.0" width="14.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1097.0" y="174.0"></text>
</g>
<g>
<title>[unknown] (71 samples, 1.18%)</title><rect x="1094.1" y="147.0" width="14.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1097.1" y="158.0"></text>
</g>
<g>
<title>[unknown] (62 samples, 1.03%)</title><rect x="1095.9" y="131.0" width="12.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1098.9" y="142.0"></text>
</g>
<g>
<title>[unknown] (59 samples, 0.98%)</title><rect x="1096.5" y="115.0" width="11.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1099.5" y="126.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 0.91%)</title><rect x="1097.3" y="99.0" width="10.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1100.3" y="110.0"></text>
</g>
<g>
<title>[unknown] (40 samples, 0.66%)</title><rect x="1100.2" y="83.0" width="7.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1103.2" y="94.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 0.56%)</title><rect x="1101.4" y="67.0" width="6.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1104.4" y="78.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 0.56%)</title><rect x="1101.4" y="51.0" width="6.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1104.4" y="62.0"></text>
</g>
<g>
<title>[unknown] (33 samples, 0.55%)</title><rect x="1101.6" y="35.0" width="6.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1104.6" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/StorageSession.next (65 samples, 1.08%)</title><rect x="1108.7" y="739.0" width="12.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1111.7" y="750.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.03%)</title><rect x="1108.9" y="723.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1111.9" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (60 samples, 1.00%)</title><rect x="1109.4" y="723.0" width="11.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1112.4" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (59 samples, 0.98%)</title><rect x="1109.6" y="707.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1112.6" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (58 samples, 0.96%)</title><rect x="1109.8" y="691.0" width="11.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1112.8" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (58 samples, 0.96%)</title><rect x="1109.8" y="675.0" width="11.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1112.8" y="686.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1109.8" y="659.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1112.8" y="670.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1109.8" y="643.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1112.8" y="654.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 0.03%)</title><rect x="1109.8" y="627.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1112.8" y="638.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="1109.8" y="611.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1112.8" y="622.0"></text>
</g>
<g>
<title>__send (56 samples, 0.93%)</title><rect x="1110.2" y="659.0" width="11.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1113.2" y="670.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 0.91%)</title><rect x="1110.4" y="643.0" width="10.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1113.4" y="654.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 0.91%)</title><rect x="1110.4" y="627.0" width="10.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1113.4" y="638.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 0.91%)</title><rect x="1110.4" y="611.0" width="10.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1113.4" y="622.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 0.91%)</title><rect x="1110.4" y="595.0" width="10.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1113.4" y="606.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 0.91%)</title><rect x="1110.4" y="579.0" width="10.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1113.4" y="590.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 0.90%)</title><rect x="1110.6" y="563.0" width="10.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1113.6" y="574.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 0.85%)</title><rect x="1111.2" y="547.0" width="10.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1114.2" y="558.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 0.85%)</title><rect x="1111.2" y="531.0" width="10.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1114.2" y="542.0"></text>
</g>
<g>
<title>[unknown] (46 samples, 0.76%)</title><rect x="1112.2" y="515.0" width="9.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1115.2" y="526.0"></text>
</g>
<g>
<title>[unknown] (43 samples, 0.71%)</title><rect x="1112.8" y="499.0" width="8.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1115.8" y="510.0"></text>
</g>
<g>
<title>[unknown] (38 samples, 0.63%)</title><rect x="1113.8" y="483.0" width="7.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1116.8" y="494.0"></text>
</g>
<g>
<title>[unknown] (33 samples, 0.55%)</title><rect x="1114.7" y="467.0" width="6.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1117.7" y="478.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.50%)</title><rect x="1115.3" y="451.0" width="5.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1118.3" y="462.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.50%)</title><rect x="1115.3" y="435.0" width="5.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1118.3" y="446.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.50%)</title><rect x="1115.3" y="419.0" width="5.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1118.3" y="430.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.45%)</title><rect x="1115.9" y="403.0" width="5.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1118.9" y="414.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.45%)</title><rect x="1115.9" y="387.0" width="5.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1118.9" y="398.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.45%)</title><rect x="1115.9" y="371.0" width="5.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1118.9" y="382.0"></text>
</g>
<g>
<title>[unknown] (26 samples, 0.43%)</title><rect x="1116.1" y="355.0" width="5.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1119.1" y="366.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.38%)</title><rect x="1116.7" y="339.0" width="4.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1119.7" y="350.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.35%)</title><rect x="1117.1" y="323.0" width="4.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1120.1" y="334.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.32%)</title><rect x="1117.5" y="307.0" width="3.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1120.5" y="318.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.30%)</title><rect x="1117.7" y="291.0" width="3.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1120.7" y="302.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.28%)</title><rect x="1117.9" y="275.0" width="3.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1120.9" y="286.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.28%)</title><rect x="1117.9" y="259.0" width="3.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1120.9" y="270.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.28%)</title><rect x="1117.9" y="243.0" width="3.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1120.9" y="254.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.28%)</title><rect x="1117.9" y="227.0" width="3.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1120.9" y="238.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.27%)</title><rect x="1118.1" y="211.0" width="3.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1121.1" y="222.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.27%)</title><rect x="1118.1" y="195.0" width="3.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1121.1" y="206.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.27%)</title><rect x="1118.1" y="179.0" width="3.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1121.1" y="190.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.27%)</title><rect x="1118.1" y="163.0" width="3.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1121.1" y="174.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.25%)</title><rect x="1118.3" y="147.0" width="2.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1121.3" y="158.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.18%)</title><rect x="1119.0" y="131.0" width="2.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1122.0" y="142.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.17%)</title><rect x="1119.2" y="115.0" width="2.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1122.2" y="126.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.15%)</title><rect x="1119.4" y="99.0" width="1.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1122.4" y="110.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.12%)</title><rect x="1119.8" y="83.0" width="1.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1122.8" y="94.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.12%)</title><rect x="1119.8" y="67.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1122.8" y="78.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.12%)</title><rect x="1119.8" y="51.0" width="1.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1122.8" y="62.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.07%)</title><rect x="1121.4" y="787.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1124.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.07%)</title><rect x="1121.4" y="771.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1124.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.07%)</title><rect x="1121.4" y="755.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1124.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.07%)</title><rect x="1121.4" y="739.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1124.4" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="1121.8" y="723.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1124.8" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.10%)</title><rect x="1122.2" y="819.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1125.2" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.07%)</title><rect x="1122.2" y="803.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1125.2" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="1123.0" y="803.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1126.0" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="1123.0" y="787.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1126.0" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="1123.6" y="819.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1126.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="1123.6" y="803.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1126.6" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="1123.6" y="787.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1126.6" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (30 samples, 0.50%)</title><rect x="1123.9" y="835.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1126.9" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (29 samples, 0.48%)</title><rect x="1123.9" y="819.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1126.9" y="830.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="1124.7" y="803.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1127.7" y="814.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="1124.7" y="787.0" width="1.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1127.7" y="798.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (4 samples, 0.07%)</title><rect x="1124.7" y="771.0" width="0.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1127.7" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.03%)</title><rect x="1124.9" y="755.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1127.9" y="766.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.03%)</title><rect x="1124.9" y="739.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1127.9" y="750.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.03%)</title><rect x="1125.5" y="771.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1128.5" y="782.0"></text>
</g>
<g>
<title>__GI___recv (19 samples, 0.32%)</title><rect x="1125.9" y="803.0" width="3.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1128.9" y="814.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.30%)</title><rect x="1126.1" y="787.0" width="3.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1129.1" y="798.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.30%)</title><rect x="1126.1" y="771.0" width="3.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1129.1" y="782.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.30%)</title><rect x="1126.1" y="755.0" width="3.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1129.1" y="766.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.30%)</title><rect x="1126.1" y="739.0" width="3.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1129.1" y="750.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.28%)</title><rect x="1126.3" y="723.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1129.3" y="734.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.27%)</title><rect x="1126.5" y="707.0" width="3.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1129.5" y="718.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.27%)</title><rect x="1126.5" y="691.0" width="3.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1129.5" y="702.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.20%)</title><rect x="1127.3" y="675.0" width="2.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1130.3" y="686.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.13%)</title><rect x="1128.1" y="659.0" width="1.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1131.1" y="670.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="1128.5" y="643.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1131.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="1128.6" y="627.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1131.6" y="638.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1129.2" y="611.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1132.2" y="622.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (6 samples, 0.10%)</title><rect x="1129.8" y="883.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1132.8" y="894.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="1129.8" y="867.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1132.8" y="878.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="1129.8" y="851.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1132.8" y="862.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="1130.0" y="835.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1133.0" y="846.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="1130.0" y="819.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1133.0" y="830.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="1130.0" y="803.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1133.0" y="814.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="1130.0" y="787.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1133.0" y="798.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="1130.2" y="771.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1133.2" y="782.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1130.4" y="755.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1133.4" y="766.0"></text>
</g>
<g>
<title>start_thread (301 samples, 5.00%)</title><rect x="1131.0" y="883.0" width="59.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1134.0" y="894.0">start_..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (301 samples, 5.00%)</title><rect x="1131.0" y="867.0" width="59.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1134.0" y="878.0">thread..</text>
</g>
<g>
<title>Thread::call_run() (301 samples, 5.00%)</title><rect x="1131.0" y="851.0" width="59.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.0" y="862.0">Thread..</text>
</g>
<g>
<title>GangWorker::loop() (213 samples, 3.54%)</title><rect x="1131.0" y="835.0" width="41.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.0" y="846.0">Gan..</text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (3 samples, 0.05%)</title><rect x="1131.0" y="819.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.0" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (2 samples, 0.03%)</title><rect x="1131.0" y="803.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.0" y="814.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region(HeapRegion*) (2 samples, 0.03%)</title><rect x="1131.0" y="787.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.0" y="798.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (192 samples, 3.19%)</title><rect x="1131.8" y="819.0" width="37.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.8" y="830.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (133 samples, 2.21%)</title><rect x="1131.8" y="803.0" width="26.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.8" y="814.0">G..</text>
</g>
<g>
<title>SpinPause (132 samples, 2.19%)</title><rect x="1132.0" y="787.0" width="25.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1135.0" y="798.0">S..</text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="1156.9" y="771.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1159.9" y="782.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="1156.9" y="755.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1159.9" y="766.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="1156.9" y="739.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1159.9" y="750.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1157.3" y="723.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1160.3" y="734.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1157.3" y="707.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1160.3" y="718.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1157.3" y="691.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1160.3" y="702.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1157.3" y="675.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1160.3" y="686.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::state_for_worker(unsigned int) (5 samples, 0.08%)</title><rect x="1157.9" y="803.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.9" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, unsigned int, unsigned long) (5 samples, 0.08%)</title><rect x="1157.9" y="787.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.9" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (2 samples, 0.03%)</title><rect x="1158.0" y="771.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.0" y="782.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (12 samples, 0.20%)</title><rect x="1158.8" y="803.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.8" y="814.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (12 samples, 0.20%)</title><rect x="1158.8" y="787.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.8" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (9 samples, 0.15%)</title><rect x="1158.8" y="771.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.8" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (9 samples, 0.15%)</title><rect x="1158.8" y="755.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.8" y="766.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (9 samples, 0.15%)</title><rect x="1158.8" y="739.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.8" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (7 samples, 0.12%)</title><rect x="1158.8" y="723.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.8" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.07%)</title><rect x="1159.2" y="707.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.2" y="718.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.123] (2 samples, 0.03%)</title><rect x="1160.2" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.2" y="734.0"></text>
</g>
<g>
<title>G1HotCardCache::drain(CardTableEntryClosure*, unsigned int) (2 samples, 0.03%)</title><rect x="1160.8" y="771.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.8" y="782.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (40 samples, 0.66%)</title><rect x="1161.4" y="803.0" width="7.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.4" y="814.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (2 samples, 0.03%)</title><rect x="1161.8" y="787.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.8" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (28 samples, 0.47%)</title><rect x="1162.4" y="787.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.4" y="798.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (5 samples, 0.08%)</title><rect x="1162.4" y="771.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.4" y="782.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (23 samples, 0.38%)</title><rect x="1163.3" y="771.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.3" y="782.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (20 samples, 0.33%)</title><rect x="1163.9" y="755.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.9" y="766.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (2 samples, 0.03%)</title><rect x="1163.9" y="739.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.9" y="750.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (4 samples, 0.07%)</title><rect x="1164.3" y="739.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.3" y="750.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (2 samples, 0.03%)</title><rect x="1164.5" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.5" y="734.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (3 samples, 0.05%)</title><rect x="1165.5" y="739.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.5" y="750.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (3 samples, 0.05%)</title><rect x="1165.5" y="723.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.5" y="734.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.03%)</title><rect x="1165.7" y="707.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.7" y="718.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (2 samples, 0.03%)</title><rect x="1166.1" y="739.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.1" y="750.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.03%)</title><rect x="1166.5" y="739.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.5" y="750.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (4 samples, 0.07%)</title><rect x="1166.9" y="739.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.9" y="750.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (7 samples, 0.12%)</title><rect x="1167.9" y="787.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.9" y="798.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (2 samples, 0.03%)</title><rect x="1168.8" y="771.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.8" y="782.0"></text>
</g>
<g>
<title>G1RedirtyLoggedCardsTask::work(unsigned int) (2 samples, 0.03%)</title><rect x="1169.4" y="819.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.4" y="830.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (2 samples, 0.03%)</title><rect x="1169.8" y="819.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.8" y="830.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (11 samples, 0.18%)</title><rect x="1170.4" y="819.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.4" y="830.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (10 samples, 0.17%)</title><rect x="1170.6" y="803.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.6" y="814.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.67] (6 samples, 0.10%)</title><rect x="1170.6" y="787.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.6" y="798.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.07%)</title><rect x="1171.0" y="771.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.0" y="782.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (2 samples, 0.03%)</title><rect x="1171.2" y="755.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.2" y="766.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (3 samples, 0.05%)</title><rect x="1172.0" y="787.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.0" y="798.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (2 samples, 0.03%)</title><rect x="1172.2" y="771.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.2" y="782.0"></text>
</g>
<g>
<title>JavaThread::run() (41 samples, 0.68%)</title><rect x="1172.8" y="835.0" width="8.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.8" y="846.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (41 samples, 0.68%)</title><rect x="1172.8" y="819.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.8" y="830.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (31 samples, 0.51%)</title><rect x="1172.8" y="803.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.8" y="814.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (31 samples, 0.51%)</title><rect x="1172.8" y="787.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.8" y="798.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (28 samples, 0.47%)</title><rect x="1172.8" y="771.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.8" y="782.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (28 samples, 0.47%)</title><rect x="1172.8" y="755.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.8" y="766.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (14 samples, 0.23%)</title><rect x="1172.8" y="739.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.8" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.05%)</title><rect x="1173.1" y="723.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.1" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.03%)</title><rect x="1173.3" y="707.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (9 samples, 0.15%)</title><rect x="1173.7" y="723.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.07%)</title><rect x="1174.1" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.03%)</title><rect x="1174.1" y="691.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.1" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (9 samples, 0.15%)</title><rect x="1175.5" y="739.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.5" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.03%)</title><rect x="1175.5" y="723.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.03%)</title><rect x="1175.5" y="707.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.5" y="718.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.03%)</title><rect x="1175.9" y="723.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (4 samples, 0.07%)</title><rect x="1176.3" y="723.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.3" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="1176.5" y="707.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.03%)</title><rect x="1176.5" y="691.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.5" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="1177.3" y="739.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.3" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.07%)</title><rect x="1177.3" y="723.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.07%)</title><rect x="1177.3" y="707.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="1177.3" y="691.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.07%)</title><rect x="1177.3" y="675.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.07%)</title><rect x="1177.3" y="659.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="1177.3" y="643.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.07%)</title><rect x="1177.3" y="627.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.07%)</title><rect x="1177.3" y="611.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="1177.3" y="595.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.07%)</title><rect x="1177.3" y="579.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.07%)</title><rect x="1177.3" y="563.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="1177.3" y="547.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.07%)</title><rect x="1177.3" y="531.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.07%)</title><rect x="1177.3" y="515.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="1177.3" y="499.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.07%)</title><rect x="1177.3" y="483.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="1177.3" y="467.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.3" y="478.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.03%)</title><rect x="1178.2" y="771.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.2" y="782.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.03%)</title><rect x="1178.2" y="755.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.2" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.03%)</title><rect x="1178.2" y="739.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.2" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.03%)</title><rect x="1178.2" y="723.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.2" y="734.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (8 samples, 0.13%)</title><rect x="1178.8" y="803.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="814.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (8 samples, 0.13%)</title><rect x="1178.8" y="787.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="798.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (8 samples, 0.13%)</title><rect x="1178.8" y="771.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.8" y="782.0"></text>
</g>
<g>
<title>NMethodSweeper::process_compiled_method(CompiledMethod*) (7 samples, 0.12%)</title><rect x="1178.8" y="755.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.8" y="766.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool, bool) (5 samples, 0.08%)</title><rect x="1178.8" y="739.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.8" y="750.0"></text>
</g>
<g>
<title>VMThread::run() (46 samples, 0.76%)</title><rect x="1180.8" y="835.0" width="9.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.8" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (46 samples, 0.76%)</title><rect x="1180.8" y="819.0" width="9.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.8" y="830.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (20 samples, 0.33%)</title><rect x="1180.8" y="803.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.8" y="814.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (22 samples, 0.37%)</title><rect x="1184.9" y="803.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.9" y="814.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (22 samples, 0.37%)</title><rect x="1184.9" y="787.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.9" y="798.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (22 samples, 0.37%)</title><rect x="1184.9" y="771.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.9" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (20 samples, 0.33%)</title><rect x="1185.1" y="755.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.1" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (3 samples, 0.05%)</title><rect x="1185.5" y="739.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.5" y="750.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics_before_gc() (2 samples, 0.03%)</title><rect x="1185.7" y="723.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.7" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (10 samples, 0.17%)</title><rect x="1186.1" y="739.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.1" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::flush() (2 samples, 0.03%)</title><rect x="1186.5" y="723.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.5" y="734.0"></text>
</g>
<g>
<title>G1PLABAllocator::flush_and_retire_stats() (2 samples, 0.03%)</title><rect x="1186.5" y="707.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.5" y="718.0"></text>
</g>
<g>
<title>G1STWIsAliveClosure::do_object_b(oopDesc*) (2 samples, 0.03%)</title><rect x="1187.1" y="723.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="734.0"></text>
</g>
<g>
<title>WeakProcessor::weak_oops_do(BoolObjectClosure*, OopClosure*) (2 samples, 0.03%)</title><rect x="1187.5" y="723.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.5" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::pre_evacuate_collection_set() (2 samples, 0.03%)</title><rect x="1188.0" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.0" y="750.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (2 samples, 0.03%)</title><rect x="1188.0" y="723.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.0" y="734.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (2 samples, 0.03%)</title><rect x="1188.0" y="707.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.0" y="718.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ResetScanTopClosure::do_heap_region(HeapRegion*) (2 samples, 0.03%)</title><rect x="1188.0" y="691.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.0" y="702.0"></text>
</g>
<g>
<title>__GI___sched_yield (3 samples, 0.05%)</title><rect x="1189.2" y="803.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1192.2" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1189.4" y="787.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1192.4" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1189.4" y="771.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1192.4" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1189.4" y="755.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1192.4" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1189.4" y="739.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1192.4" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1189.4" y="723.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1192.4" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1189.4" y="707.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1192.4" y="718.0"></text>
</g>
</g>
</svg>
