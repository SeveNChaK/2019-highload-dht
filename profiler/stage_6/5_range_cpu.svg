<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (6,380 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (6 samples, 0.09%)</title><rect x="10.2" y="915.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.2" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (83 samples, 1.30%)</title><rect x="11.7" y="915.0" width="15.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.7" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (76 samples, 1.19%)</title><rect x="12.8" y="899.0" width="14.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.8" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (76 samples, 1.19%)</title><rect x="12.8" y="883.0" width="14.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.8" y="894.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (66 samples, 1.03%)</title><rect x="13.0" y="867.0" width="12.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="16.0" y="878.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (3 samples, 0.05%)</title><rect x="14.1" y="851.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="17.1" y="862.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (2 samples, 0.03%)</title><rect x="14.3" y="835.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.3" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.03%)</title><rect x="14.8" y="851.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="17.8" y="862.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (2 samples, 0.03%)</title><rect x="15.4" y="851.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="18.4" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (48 samples, 0.75%)</title><rect x="15.9" y="851.0" width="8.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="18.9" y="862.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (7 samples, 0.11%)</title><rect x="16.7" y="835.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="19.7" y="846.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (2 samples, 0.03%)</title><rect x="18.0" y="835.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="21.0" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (27 samples, 0.42%)</title><rect x="18.3" y="835.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="21.3" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (26 samples, 0.41%)</title><rect x="18.3" y="819.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="21.3" y="830.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (7 samples, 0.11%)</title><rect x="18.5" y="803.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="21.5" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (7 samples, 0.11%)</title><rect x="18.5" y="787.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="21.5" y="798.0"></text>
</g>
<g>
<title>HeapRegion::set_eden() (2 samples, 0.03%)</title><rect x="18.9" y="771.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="21.9" y="782.0"></text>
</g>
<g>
<title>HeapRegionTracer::send_region_type_change(unsigned int, G1HeapRegionTraceType::Type, G1HeapRegionTraceType::Type, unsigned long, unsigned long) (2 samples, 0.03%)</title><rect x="19.2" y="771.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="22.2" y="782.0"></text>
</g>
<g>
<title>Monitor::lock() (2 samples, 0.03%)</title><rect x="20.0" y="803.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="23.0" y="814.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (13 samples, 0.20%)</title><rect x="20.4" y="803.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="23.4" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (9 samples, 0.14%)</title><rect x="20.7" y="787.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="23.7" y="798.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (8 samples, 0.13%)</title><rect x="20.7" y="771.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="23.7" y="782.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (7 samples, 0.11%)</title><rect x="20.9" y="755.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="23.9" y="766.0"></text>
</g>
<g>
<title>G1Analytics::predict_card_num(unsigned long, bool) const (4 samples, 0.06%)</title><rect x="21.3" y="739.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="24.3" y="750.0"></text>
</g>
<g>
<title>AbsSeq::dsd() const (2 samples, 0.03%)</title><rect x="21.7" y="723.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="24.7" y="734.0"></text>
</g>
<g>
<title>HSpaceCounters::update_used(unsigned long) (2 samples, 0.03%)</title><rect x="22.4" y="787.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="25.4" y="798.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (7 samples, 0.11%)</title><rect x="23.3" y="835.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="26.3" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (4 samples, 0.06%)</title><rect x="23.7" y="819.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="26.7" y="830.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (3 samples, 0.05%)</title><rect x="23.9" y="803.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="26.9" y="814.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.08%)</title><rect x="25.4" y="867.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="28.4" y="878.0"></text>
</g>
<g>
<title>_init (3 samples, 0.05%)</title><rect x="26.3" y="867.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="29.3" y="878.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.05%)</title><rect x="27.0" y="915.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="30.0" y="926.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.31%)</title><rect x="27.6" y="915.0" width="3.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="30.6" y="926.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 0.06%)</title><rect x="27.8" y="899.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="30.8" y="910.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="28.1" y="883.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="31.1" y="894.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="28.1" y="867.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="31.1" y="878.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="28.1" y="851.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="31.1" y="862.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.05%)</title><rect x="28.9" y="899.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="31.9" y="910.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="28.9" y="883.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="31.9" y="894.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.1 (10 samples, 0.16%)</title><rect x="29.4" y="899.0" width="1.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="32.4" y="910.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.09%)</title><rect x="30.2" y="883.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="33.2" y="894.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.09%)</title><rect x="30.2" y="867.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="33.2" y="878.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="30.3" y="851.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="33.3" y="862.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="30.3" y="835.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="33.3" y="846.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="30.3" y="819.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="33.3" y="830.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="30.3" y="803.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="33.3" y="814.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.06%)</title><rect x="30.5" y="787.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="33.5" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="30.9" y="771.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="33.9" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="30.9" y="755.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="33.9" y="766.0"></text>
</g>
<g>
<title>[unknown_Java] (109 samples, 1.71%)</title><rect x="31.3" y="915.0" width="20.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="34.3" y="926.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="51.1" y="899.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="54.1" y="910.0"></text>
</g>
<g>
<title>__GI___vsnprintf_chk (4 samples, 0.06%)</title><rect x="51.4" y="915.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="54.4" y="926.0"></text>
</g>
<g>
<title>__strchrnul_sse2 (2 samples, 0.03%)</title><rect x="51.4" y="899.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="54.4" y="910.0"></text>
</g>
<g>
<title>__new_sem_wait_slow.constprop.0 (2 samples, 0.03%)</title><rect x="52.2" y="915.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="55.2" y="926.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (5,885 samples, 92.24%)</title><rect x="52.7" y="915.0" width="1088.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="55.7" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2 samples, 0.03%)</title><rect x="52.7" y="899.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="55.7" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2 samples, 0.03%)</title><rect x="52.7" y="883.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="55.7" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (41 samples, 0.64%)</title><rect x="53.1" y="899.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="56.1" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (2 samples, 0.03%)</title><rect x="53.1" y="883.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="56.1" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (2 samples, 0.03%)</title><rect x="53.1" y="867.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="56.1" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (39 samples, 0.61%)</title><rect x="53.5" y="883.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.5" y="894.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.42%)</title><rect x="54.8" y="867.0" width="5.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="57.8" y="878.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.03%)</title><rect x="54.9" y="851.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="57.9" y="862.0"></text>
</g>
<g>
<title>epoll_wait (23 samples, 0.36%)</title><rect x="55.5" y="851.0" width="4.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="58.5" y="862.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.34%)</title><rect x="55.7" y="835.0" width="4.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="58.7" y="846.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.34%)</title><rect x="55.7" y="819.0" width="4.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="58.7" y="830.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.33%)</title><rect x="55.9" y="803.0" width="3.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="58.9" y="814.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.30%)</title><rect x="56.2" y="787.0" width="3.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="59.2" y="798.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.28%)</title><rect x="56.4" y="771.0" width="3.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="59.4" y="782.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.28%)</title><rect x="56.4" y="755.0" width="3.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="59.4" y="766.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.22%)</title><rect x="57.2" y="739.0" width="2.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="60.2" y="750.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.16%)</title><rect x="57.9" y="723.0" width="1.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="60.9" y="734.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.14%)</title><rect x="58.1" y="707.0" width="1.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="61.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.09%)</title><rect x="58.6" y="691.0" width="1.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="61.6" y="702.0"></text>
</g>
<g>
<title>_init (2 samples, 0.03%)</title><rect x="59.8" y="867.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="62.8" y="878.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.05%)</title><rect x="60.1" y="867.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="63.1" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (5,842 samples, 91.57%)</title><rect x="60.7" y="899.0" width="1080.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.7" y="910.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (5,842 samples, 91.57%)</title><rect x="60.7" y="883.0" width="1080.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.7" y="894.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (5,798 samples, 90.88%)</title><rect x="61.2" y="867.0" width="1072.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="64.2" y="878.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (5,786 samples, 90.69%)</title><rect x="61.4" y="851.0" width="1070.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.4" y="862.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (5,781 samples, 90.61%)</title><rect x="62.3" y="835.0" width="1069.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="65.3" y="846.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler2_entities.handleRequest (5,770 samples, 90.44%)</title><rect x="62.3" y="819.0" width="1067.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="65.3" y="830.0">RequestHandler2_entities.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (16 samples, 0.25%)</title><rect x="62.3" y="803.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="65.3" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.06%)</title><rect x="62.3" y="787.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="65.3" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.06%)</title><rect x="62.3" y="771.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="65.3" y="782.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (4 samples, 0.06%)</title><rect x="63.1" y="787.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="66.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.05%)</title><rect x="63.3" y="771.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="66.3" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="63.8" y="787.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="66.8" y="798.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title><rect x="64.2" y="787.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="67.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="64.2" y="771.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="67.2" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="64.2" y="755.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="67.2" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="64.2" y="739.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.2" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (4 samples, 0.06%)</title><rect x="64.6" y="787.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="67.6" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/ReplicatedHttpServer.entities (5,754 samples, 90.19%)</title><rect x="65.3" y="803.0" width="1064.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="68.3" y="814.0">ru/mail/polis/service/alex/ReplicatedHttpServer.entities</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.11%)</title><rect x="65.9" y="787.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="68.9" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.11%)</title><rect x="65.9" y="771.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="68.9" y="782.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="66.0" y="755.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="69.0" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="66.4" y="755.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="69.4" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="66.4" y="739.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.4" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="66.6" y="723.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="69.6" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.range (5,410 samples, 84.80%)</title><rect x="67.2" y="787.0" width="1000.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.2" y="798.0">ru/mail/polis/dao/DAO.range</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (52 samples, 0.82%)</title><rect x="68.4" y="771.0" width="9.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="71.4" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (41 samples, 0.64%)</title><rect x="70.5" y="755.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="73.5" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (41 samples, 0.64%)</title><rect x="70.5" y="739.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="73.5" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.08%)</title><rect x="77.1" y="723.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.1" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (43 samples, 0.67%)</title><rect x="78.1" y="771.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="81.1" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compare (38 samples, 0.60%)</title><rect x="79.0" y="755.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="82.0" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (4 samples, 0.06%)</title><rect x="86.0" y="771.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="89.0" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.&lt;init&gt; (4 samples, 0.06%)</title><rect x="86.0" y="755.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="89.0" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.until (5,242 samples, 82.16%)</title><rect x="86.8" y="771.0" width="969.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="89.8" y="782.0">ru/mail/polis/dao/Iters.until</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.&lt;init&gt; (5,242 samples, 82.16%)</title><rect x="86.8" y="755.0" width="969.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="89.8" y="766.0">ru/mail/polis/dao/Iters$UntilIterator.&lt;init&gt;</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (5,242 samples, 82.16%)</title><rect x="86.8" y="739.0" width="969.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.8" y="750.0">com/google/common/collect/TransformedIterator.hasNext</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (5,240 samples, 82.13%)</title><rect x="87.1" y="723.0" width="969.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="90.1" y="734.0">com/google/common/collect/AbstractIterator.hasNext</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (5,237 samples, 82.08%)</title><rect x="87.3" y="707.0" width="968.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="90.3" y="718.0">com/google/common/collect/AbstractIterator.tryToComputeNext</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (5,237 samples, 82.08%)</title><rect x="87.3" y="691.0" width="968.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="90.3" y="702.0">com/google/common/collect/Iterators$5.computeNext</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (5,205 samples, 81.58%)</title><rect x="92.9" y="675.0" width="962.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="95.9" y="686.0">ru/mail/polis/dao/Iters$CollapseEqualsIterator.next</text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="150.7" y="659.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="153.7" y="670.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="150.7" y="643.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="153.7" y="654.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="150.7" y="627.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="153.7" y="638.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="150.7" y="611.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="153.7" y="622.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="150.7" y="595.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="153.7" y="606.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="150.7" y="579.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="153.7" y="590.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="150.9" y="563.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="153.9" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (18 samples, 0.28%)</title><rect x="151.3" y="659.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="154.3" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3,777 samples, 59.20%)</title><rect x="154.6" y="659.0" width="698.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="157.6" y="670.0">com/google/common/collect/Iterators$MergingIterator.next</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (3,733 samples, 58.51%)</title><rect x="160.6" y="643.0" width="690.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="163.6" y="654.0">com/google/common/collect/Iterators$PeekingImpl.next</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3,733 samples, 58.51%)</title><rect x="160.6" y="627.0" width="690.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="163.6" y="638.0">ru/mail/polis/dao/Iters$CollapseEqualsIterator.next</text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="178.9" y="611.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="181.9" y="622.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="178.9" y="595.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="181.9" y="606.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="178.9" y="579.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="181.9" y="590.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="178.9" y="563.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="181.9" y="574.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="178.9" y="547.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="181.9" y="558.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="178.9" y="531.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="181.9" y="542.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="179.0" y="515.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="182.0" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (27 samples, 0.42%)</title><rect x="179.4" y="611.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="182.4" y="622.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.isEmpty (12 samples, 0.19%)</title><rect x="182.2" y="595.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="185.2" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.size (5 samples, 0.08%)</title><rect x="183.5" y="579.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="186.5" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2,401 samples, 37.63%)</title><rect x="184.4" y="611.0" width="444.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="187.4" y="622.0">com/google/common/collect/Iterators$MergingIterator.next</text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="209.2" y="595.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="212.2" y="606.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="209.2" y="579.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="212.2" y="590.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="209.2" y="563.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="212.2" y="574.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="209.2" y="547.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="212.2" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (16 samples, 0.25%)</title><rect x="209.6" y="595.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="212.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.hasNext (7 samples, 0.11%)</title><rect x="211.2" y="579.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.2" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (2,116 samples, 33.17%)</title><rect x="212.5" y="595.0" width="391.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.5" y="606.0">com/google/common/collect/Iterators$PeekingImpl.next</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (139 samples, 2.18%)</title><rect x="224.0" y="579.0" width="25.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.0" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (134 samples, 2.10%)</title><rect x="224.9" y="563.0" width="24.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.9" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (68 samples, 1.07%)</title><rect x="237.1" y="547.0" width="12.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="240.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooHigh (19 samples, 0.30%)</title><rect x="246.2" y="531.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="249.2" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1,915 samples, 30.02%)</title><rect x="249.7" y="579.0" width="354.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.7" y="590.0">ru/mail/polis/dao/Iters$CollapseEqualsIterator.n..</text>
</g>
<g>
<title>[unknown] (16 samples, 0.25%)</title><rect x="532.5" y="563.0" width="3.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="535.5" y="574.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.25%)</title><rect x="532.5" y="547.0" width="3.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="535.5" y="558.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.25%)</title><rect x="532.5" y="531.0" width="3.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="535.5" y="542.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.24%)</title><rect x="532.7" y="515.0" width="2.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="535.7" y="526.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.24%)</title><rect x="532.7" y="499.0" width="2.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="535.7" y="510.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.17%)</title><rect x="533.4" y="483.0" width="2.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="536.4" y="494.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.13%)</title><rect x="534.0" y="467.0" width="1.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="537.0" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (66 samples, 1.03%)</title><rect x="535.5" y="563.0" width="12.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="538.5" y="574.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.isEmpty (7 samples, 0.11%)</title><rect x="546.4" y="547.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="549.4" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (84 samples, 1.32%)</title><rect x="547.7" y="563.0" width="15.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="550.7" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.09%)</title><rect x="552.5" y="547.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="555.5" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (11 samples, 0.17%)</title><rect x="553.6" y="547.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="556.6" y="558.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (41 samples, 0.64%)</title><rect x="555.6" y="547.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="558.6" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (31 samples, 0.49%)</title><rect x="563.2" y="563.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="566.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$114/306024707.apply (189 samples, 2.96%)</title><rect x="568.9" y="563.0" width="35.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="571.9" y="574.0">ru..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="577.6" y="547.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="580.6" y="558.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="577.6" y="531.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="580.6" y="542.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="577.6" y="515.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="580.6" y="526.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="577.6" y="499.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="580.6" y="510.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="577.6" y="483.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="580.6" y="494.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="577.6" y="467.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="580.6" y="478.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="577.6" y="451.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="580.6" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (140 samples, 2.19%)</title><rect x="578.0" y="547.0" width="25.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="581.0" y="558.0">r..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (102 samples, 1.60%)</title><rect x="585.0" y="531.0" width="18.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="588.0" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.06%)</title><rect x="595.0" y="515.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="598.0" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (43 samples, 0.67%)</title><rect x="595.9" y="515.0" width="8.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="598.9" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (32 samples, 0.50%)</title><rect x="598.0" y="499.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="601.0" y="510.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (118 samples, 1.85%)</title><rect x="603.9" y="595.0" width="21.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="606.9" y="606.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (93 samples, 1.46%)</title><rect x="608.5" y="579.0" width="17.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="611.5" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (15 samples, 0.24%)</title><rect x="625.7" y="595.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="628.7" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (851 samples, 13.34%)</title><rect x="628.5" y="611.0" width="157.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="631.5" y="622.0">java/nio/ByteBuffer...</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (846 samples, 13.26%)</title><rect x="629.4" y="595.0" width="156.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="632.4" y="606.0">java/nio/BufferMisma..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="726.0" y="579.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="729.0" y="590.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="726.0" y="563.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="729.0" y="574.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="726.0" y="547.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="729.0" y="558.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="726.0" y="531.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="729.0" y="542.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="726.0" y="515.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="729.0" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (322 samples, 5.05%)</title><rect x="726.3" y="579.0" width="59.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="729.3" y="590.0">java/n..</text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (87 samples, 1.36%)</title><rect x="765.2" y="563.0" width="16.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="768.2" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (25 samples, 0.39%)</title><rect x="781.3" y="563.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="784.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$114/306024707.apply (352 samples, 5.52%)</title><rect x="785.9" y="611.0" width="65.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="788.9" y="622.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (352 samples, 5.52%)</title><rect x="785.9" y="595.0" width="65.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="788.9" y="606.0">ru/mail..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (347 samples, 5.44%)</title><rect x="786.8" y="579.0" width="64.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="789.8" y="590.0">java/ni..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (323 samples, 5.06%)</title><rect x="791.2" y="563.0" width="59.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="794.2" y="574.0">java/n..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (323 samples, 5.06%)</title><rect x="791.2" y="547.0" width="59.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="794.2" y="558.0">java/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (323 samples, 5.06%)</title><rect x="791.2" y="531.0" width="59.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="794.2" y="542.0">java/n..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (314 samples, 4.92%)</title><rect x="792.9" y="515.0" width="58.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="795.9" y="526.0">java/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (132 samples, 2.07%)</title><rect x="792.9" y="499.0" width="24.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="795.9" y="510.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (102 samples, 1.60%)</title><rect x="798.5" y="483.0" width="18.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="801.5" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (67 samples, 1.05%)</title><rect x="804.9" y="467.0" width="12.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="807.9" y="478.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="816.8" y="451.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="819.8" y="462.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="816.8" y="435.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="819.8" y="446.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="816.8" y="419.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="819.8" y="430.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="816.9" y="403.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="819.9" y="414.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="816.9" y="387.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="819.9" y="398.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="816.9" y="371.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="819.9" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (182 samples, 2.85%)</title><rect x="817.3" y="499.0" width="33.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="820.3" y="510.0">ja..</text>
</g>
<g>
<title>ThreadSafepointState::handle_polling_page_exception() (5 samples, 0.08%)</title><rect x="829.2" y="483.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="832.2" y="494.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (2 samples, 0.03%)</title><rect x="829.2" y="467.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="832.2" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (41 samples, 0.64%)</title><rect x="830.1" y="483.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="833.1" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (72 samples, 1.13%)</title><rect x="837.7" y="483.0" width="13.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="840.7" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (63 samples, 0.99%)</title><rect x="839.3" y="467.0" width="11.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="842.3" y="478.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (12 samples, 0.19%)</title><rect x="851.0" y="643.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="854.0" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (12 samples, 0.19%)</title><rect x="851.0" y="627.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="854.0" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (824 samples, 12.92%)</title><rect x="853.2" y="659.0" width="152.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="856.2" y="670.0">java/nio/ByteBuffer..</text>
</g>
<g>
<title>java/nio/Buffer.remaining (9 samples, 0.14%)</title><rect x="855.1" y="643.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="858.1" y="654.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (805 samples, 12.62%)</title><rect x="856.7" y="643.0" width="148.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="859.7" y="654.0">java/nio/BufferMism..</text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="948.3" y="627.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="951.3" y="638.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="948.3" y="611.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="951.3" y="622.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="948.3" y="595.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="951.3" y="606.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="948.3" y="579.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="951.3" y="590.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="948.3" y="563.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="951.3" y="574.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="948.3" y="547.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="951.3" y="558.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="948.3" y="531.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="951.3" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (307 samples, 4.81%)</title><rect x="948.8" y="627.0" width="56.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="951.8" y="638.0">java/n..</text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (86 samples, 1.35%)</title><rect x="985.8" y="611.0" width="15.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="988.8" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (21 samples, 0.33%)</title><rect x="1001.7" y="611.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1004.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table$$Lambda$114/306024707.apply (270 samples, 4.23%)</title><rect x="1005.6" y="659.0" width="49.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1008.6" y="670.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Row.getKey (223 samples, 3.50%)</title><rect x="1014.3" y="643.0" width="41.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1017.3" y="654.0">ru/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (212 samples, 3.32%)</title><rect x="1016.3" y="627.0" width="39.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1019.3" y="638.0">jav..</text>
</g>
<g>
<title>java/nio/Buffer.markValue (11 samples, 0.17%)</title><rect x="1030.8" y="611.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1033.8" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (10 samples, 0.16%)</title><rect x="1032.8" y="611.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1035.8" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (113 samples, 1.77%)</title><rect x="1034.6" y="611.0" width="20.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1037.6" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (109 samples, 1.71%)</title><rect x="1035.4" y="595.0" width="20.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1038.4" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (98 samples, 1.54%)</title><rect x="1037.4" y="579.0" width="18.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1040.4" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (93 samples, 1.46%)</title><rect x="1038.3" y="563.0" width="17.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1041.3" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (31 samples, 0.49%)</title><rect x="1044.4" y="547.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1047.4" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (31 samples, 0.49%)</title><rect x="1044.4" y="531.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1047.4" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (31 samples, 0.49%)</title><rect x="1044.4" y="515.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1047.4" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (29 samples, 0.45%)</title><rect x="1050.2" y="547.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1053.2" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (29 samples, 0.45%)</title><rect x="1050.2" y="531.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1053.2" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (29 samples, 0.45%)</title><rect x="1050.2" y="515.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1053.2" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/LSMDao$$Lambda$353/1821427780.apply (2 samples, 0.03%)</title><rect x="1055.5" y="675.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1058.5" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/LSMDao.lambda$iterator$0 (2 samples, 0.03%)</title><rect x="1055.5" y="659.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1058.5" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Value.isDead (2 samples, 0.03%)</title><rect x="1055.5" y="643.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1058.5" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (2 samples, 0.03%)</title><rect x="1055.9" y="707.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1058.9" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/LSMDao.iterator (62 samples, 0.97%)</title><rect x="1056.3" y="771.0" width="11.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1059.3" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/LSMDao.rowsIterator (61 samples, 0.96%)</title><rect x="1056.5" y="755.0" width="11.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1059.5" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.combineTables (52 samples, 0.82%)</title><rect x="1056.5" y="739.0" width="9.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1059.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTablePool.iterator (50 samples, 0.78%)</title><rect x="1056.8" y="723.0" width="9.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1059.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.combineTables (35 samples, 0.55%)</title><rect x="1057.0" y="707.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1060.0" y="718.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (2 samples, 0.03%)</title><rect x="1057.2" y="691.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1060.2" y="702.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1057.2" y="675.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1060.2" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/MemTable.iterator (30 samples, 0.47%)</title><rect x="1057.8" y="691.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1060.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (2 samples, 0.03%)</title><rect x="1057.8" y="675.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1060.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (26 samples, 0.41%)</title><rect x="1058.1" y="675.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1061.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (25 samples, 0.39%)</title><rect x="1058.3" y="659.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1061.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (23 samples, 0.36%)</title><rect x="1058.5" y="643.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1061.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (2 samples, 0.03%)</title><rect x="1058.5" y="627.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1061.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (2 samples, 0.03%)</title><rect x="1058.5" y="611.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1061.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.03%)</title><rect x="1058.5" y="595.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1061.5" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.03%)</title><rect x="1058.5" y="579.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1061.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (21 samples, 0.33%)</title><rect x="1058.9" y="627.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1061.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (21 samples, 0.33%)</title><rect x="1058.9" y="611.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1061.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (21 samples, 0.33%)</title><rect x="1058.9" y="595.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1061.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (8 samples, 0.13%)</title><rect x="1061.3" y="579.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1064.3" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.13%)</title><rect x="1061.3" y="563.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1064.3" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.09%)</title><rect x="1061.6" y="547.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1064.6" y="558.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.08%)</title><rect x="1061.6" y="531.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1064.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.03%)</title><rect x="1062.9" y="675.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1065.9" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.transformRows (14 samples, 0.22%)</title><rect x="1063.5" y="707.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1066.5" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (8 samples, 0.13%)</title><rect x="1063.5" y="691.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1066.5" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (8 samples, 0.13%)</title><rect x="1063.5" y="675.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1066.5" y="686.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (4 samples, 0.06%)</title><rect x="1063.7" y="659.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1066.7" y="670.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (3 samples, 0.05%)</title><rect x="1064.4" y="659.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1067.4" y="670.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (3 samples, 0.05%)</title><rect x="1064.4" y="643.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1067.4" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (3 samples, 0.05%)</title><rect x="1064.4" y="627.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1067.4" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (3 samples, 0.05%)</title><rect x="1064.4" y="611.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1067.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (3 samples, 0.05%)</title><rect x="1064.4" y="595.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1067.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (6 samples, 0.09%)</title><rect x="1065.0" y="691.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1068.0" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (6 samples, 0.09%)</title><rect x="1065.0" y="675.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1068.0" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (5 samples, 0.08%)</title><rect x="1065.2" y="659.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1068.2" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (5 samples, 0.08%)</title><rect x="1065.2" y="643.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1068.2" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (5 samples, 0.08%)</title><rect x="1065.2" y="627.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1068.2" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (5 samples, 0.08%)</title><rect x="1065.2" y="611.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1068.2" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (5 samples, 0.08%)</title><rect x="1065.2" y="595.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1068.2" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (5 samples, 0.08%)</title><rect x="1065.2" y="579.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1068.2" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (2 samples, 0.03%)</title><rect x="1065.7" y="563.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1068.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alex/Table.transformRows (9 samples, 0.14%)</title><rect x="1066.1" y="739.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1069.1" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (3 samples, 0.05%)</title><rect x="1066.1" y="723.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1069.1" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (5 samples, 0.08%)</title><rect x="1066.8" y="723.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1069.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (4 samples, 0.06%)</title><rect x="1067.0" y="707.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1070.0" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (4 samples, 0.06%)</title><rect x="1067.0" y="691.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1070.0" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (4 samples, 0.06%)</title><rect x="1067.0" y="675.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1070.0" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (4 samples, 0.06%)</title><rect x="1067.0" y="659.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1070.0" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (4 samples, 0.06%)</title><rect x="1067.0" y="643.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1070.0" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (4 samples, 0.06%)</title><rect x="1067.0" y="627.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1070.0" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3 samples, 0.05%)</title><rect x="1067.2" y="611.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1070.2" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/StorageSession.stream (334 samples, 5.24%)</title><rect x="1067.7" y="787.0" width="61.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1070.7" y="798.0">ru/mai..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (254 samples, 3.98%)</title><rect x="1067.9" y="771.0" width="47.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1070.9" y="782.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.09%)</title><rect x="1067.9" y="755.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1070.9" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.05%)</title><rect x="1068.5" y="739.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1071.5" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (248 samples, 3.89%)</title><rect x="1069.0" y="755.0" width="45.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1072.0" y="766.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (246 samples, 3.86%)</title><rect x="1069.4" y="739.0" width="45.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1072.4" y="750.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (246 samples, 3.86%)</title><rect x="1069.4" y="723.0" width="45.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1072.4" y="734.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (246 samples, 3.86%)</title><rect x="1069.4" y="707.0" width="45.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1072.4" y="718.0">one/..</text>
</g>
<g>
<title>[unknown] (16 samples, 0.25%)</title><rect x="1069.6" y="691.0" width="3.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1072.6" y="702.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.25%)</title><rect x="1069.6" y="675.0" width="3.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1072.6" y="686.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (10 samples, 0.16%)</title><rect x="1069.6" y="659.0" width="1.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1072.6" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (2 samples, 0.03%)</title><rect x="1070.2" y="643.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1073.2" y="654.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.05%)</title><rect x="1070.5" y="643.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1073.5" y="654.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (2 samples, 0.03%)</title><rect x="1071.1" y="643.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1074.1" y="654.0"></text>
</g>
<g>
<title>__send (3 samples, 0.05%)</title><rect x="1071.4" y="659.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1074.4" y="670.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.05%)</title><rect x="1072.0" y="659.0" width="0.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1075.0" y="670.0"></text>
</g>
<g>
<title>__send (229 samples, 3.59%)</title><rect x="1072.6" y="691.0" width="42.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1075.6" y="702.0">__send</text>
</g>
<g>
<title>[unknown] (227 samples, 3.56%)</title><rect x="1072.9" y="675.0" width="42.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1075.9" y="686.0">[un..</text>
</g>
<g>
<title>[unknown] (227 samples, 3.56%)</title><rect x="1072.9" y="659.0" width="42.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1075.9" y="670.0">[un..</text>
</g>
<g>
<title>[unknown] (226 samples, 3.54%)</title><rect x="1073.1" y="643.0" width="41.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1076.1" y="654.0">[un..</text>
</g>
<g>
<title>[unknown] (225 samples, 3.53%)</title><rect x="1073.3" y="627.0" width="41.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1076.3" y="638.0">[un..</text>
</g>
<g>
<title>[unknown] (219 samples, 3.43%)</title><rect x="1074.4" y="611.0" width="40.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1077.4" y="622.0">[un..</text>
</g>
<g>
<title>[unknown] (216 samples, 3.39%)</title><rect x="1075.0" y="595.0" width="39.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1078.0" y="606.0">[un..</text>
</g>
<g>
<title>[unknown] (212 samples, 3.32%)</title><rect x="1075.7" y="579.0" width="39.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1078.7" y="590.0">[un..</text>
</g>
<g>
<title>[unknown] (211 samples, 3.31%)</title><rect x="1075.9" y="563.0" width="39.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1078.9" y="574.0">[un..</text>
</g>
<g>
<title>[unknown] (201 samples, 3.15%)</title><rect x="1077.7" y="547.0" width="37.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1080.7" y="558.0">[un..</text>
</g>
<g>
<title>[unknown] (191 samples, 2.99%)</title><rect x="1079.6" y="531.0" width="35.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1082.6" y="542.0">[un..</text>
</g>
<g>
<title>[unknown] (180 samples, 2.82%)</title><rect x="1081.6" y="515.0" width="33.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1084.6" y="526.0">[u..</text>
</g>
<g>
<title>[unknown] (170 samples, 2.66%)</title><rect x="1083.5" y="499.0" width="31.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1086.5" y="510.0">[u..</text>
</g>
<g>
<title>[unknown] (155 samples, 2.43%)</title><rect x="1086.2" y="483.0" width="28.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1089.2" y="494.0">[u..</text>
</g>
<g>
<title>[unknown] (150 samples, 2.35%)</title><rect x="1087.2" y="467.0" width="27.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1090.2" y="478.0">[..</text>
</g>
<g>
<title>[unknown] (147 samples, 2.30%)</title><rect x="1087.7" y="451.0" width="27.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1090.7" y="462.0">[..</text>
</g>
<g>
<title>[unknown] (146 samples, 2.29%)</title><rect x="1087.9" y="435.0" width="27.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1090.9" y="446.0">[..</text>
</g>
<g>
<title>[unknown] (139 samples, 2.18%)</title><rect x="1089.2" y="419.0" width="25.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1092.2" y="430.0">[..</text>
</g>
<g>
<title>[unknown] (136 samples, 2.13%)</title><rect x="1089.8" y="403.0" width="25.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1092.8" y="414.0">[..</text>
</g>
<g>
<title>[unknown] (132 samples, 2.07%)</title><rect x="1090.5" y="387.0" width="24.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1093.5" y="398.0">[..</text>
</g>
<g>
<title>[unknown] (122 samples, 1.91%)</title><rect x="1092.3" y="371.0" width="22.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1095.3" y="382.0">[..</text>
</g>
<g>
<title>[unknown] (119 samples, 1.87%)</title><rect x="1092.9" y="355.0" width="22.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1095.9" y="366.0">[..</text>
</g>
<g>
<title>[unknown] (114 samples, 1.79%)</title><rect x="1093.8" y="339.0" width="21.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1096.8" y="350.0">[..</text>
</g>
<g>
<title>[unknown] (110 samples, 1.72%)</title><rect x="1094.6" y="323.0" width="20.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1097.6" y="334.0"></text>
</g>
<g>
<title>[unknown] (107 samples, 1.68%)</title><rect x="1095.1" y="307.0" width="19.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1098.1" y="318.0"></text>
</g>
<g>
<title>[unknown] (106 samples, 1.66%)</title><rect x="1095.3" y="291.0" width="19.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1098.3" y="302.0"></text>
</g>
<g>
<title>[unknown] (103 samples, 1.61%)</title><rect x="1095.9" y="275.0" width="19.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1098.9" y="286.0"></text>
</g>
<g>
<title>[unknown] (102 samples, 1.60%)</title><rect x="1096.0" y="259.0" width="18.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1099.0" y="270.0"></text>
</g>
<g>
<title>[unknown] (97 samples, 1.52%)</title><rect x="1097.0" y="243.0" width="17.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1100.0" y="254.0"></text>
</g>
<g>
<title>[unknown] (94 samples, 1.47%)</title><rect x="1097.5" y="227.0" width="17.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1100.5" y="238.0"></text>
</g>
<g>
<title>[unknown] (92 samples, 1.44%)</title><rect x="1097.9" y="211.0" width="17.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1100.9" y="222.0"></text>
</g>
<g>
<title>[unknown] (91 samples, 1.43%)</title><rect x="1098.1" y="195.0" width="16.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1101.1" y="206.0"></text>
</g>
<g>
<title>[unknown] (90 samples, 1.41%)</title><rect x="1098.3" y="179.0" width="16.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1101.3" y="190.0"></text>
</g>
<g>
<title>[unknown] (84 samples, 1.32%)</title><rect x="1099.4" y="163.0" width="15.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1102.4" y="174.0"></text>
</g>
<g>
<title>[unknown] (79 samples, 1.24%)</title><rect x="1100.3" y="147.0" width="14.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1103.3" y="158.0"></text>
</g>
<g>
<title>[unknown] (72 samples, 1.13%)</title><rect x="1101.6" y="131.0" width="13.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1104.6" y="142.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 0.86%)</title><rect x="1104.7" y="115.0" width="10.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1107.7" y="126.0"></text>
</g>
<g>
<title>[unknown] (46 samples, 0.72%)</title><rect x="1106.4" y="99.0" width="8.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1109.4" y="110.0"></text>
</g>
<g>
<title>[unknown] (45 samples, 0.71%)</title><rect x="1106.6" y="83.0" width="8.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1109.6" y="94.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 0.53%)</title><rect x="1108.6" y="67.0" width="6.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1111.6" y="78.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1114.5" y="51.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1117.5" y="62.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1114.5" y="35.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1117.5" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (3 samples, 0.05%)</title><rect x="1115.1" y="771.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1118.1" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alex/StorageSession.next (75 samples, 1.18%)</title><rect x="1115.6" y="771.0" width="13.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1118.6" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (74 samples, 1.16%)</title><rect x="1115.8" y="755.0" width="13.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1118.8" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (73 samples, 1.14%)</title><rect x="1116.0" y="739.0" width="13.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1119.0" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (72 samples, 1.13%)</title><rect x="1116.2" y="723.0" width="13.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1119.2" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (71 samples, 1.11%)</title><rect x="1116.4" y="707.0" width="13.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1119.4" y="718.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="1116.4" y="691.0" width="0.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1119.4" y="702.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="1116.4" y="675.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1119.4" y="686.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (4 samples, 0.06%)</title><rect x="1116.4" y="659.0" width="0.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1119.4" y="670.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.05%)</title><rect x="1116.6" y="643.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1119.6" y="654.0"></text>
</g>
<g>
<title>__send (66 samples, 1.03%)</title><rect x="1117.3" y="691.0" width="12.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1120.3" y="702.0"></text>
</g>
<g>
<title>[unknown] (66 samples, 1.03%)</title><rect x="1117.3" y="675.0" width="12.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1120.3" y="686.0"></text>
</g>
<g>
<title>[unknown] (66 samples, 1.03%)</title><rect x="1117.3" y="659.0" width="12.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1120.3" y="670.0"></text>
</g>
<g>
<title>[unknown] (64 samples, 1.00%)</title><rect x="1117.7" y="643.0" width="11.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1120.7" y="654.0"></text>
</g>
<g>
<title>[unknown] (64 samples, 1.00%)</title><rect x="1117.7" y="627.0" width="11.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1120.7" y="638.0"></text>
</g>
<g>
<title>[unknown] (62 samples, 0.97%)</title><rect x="1118.1" y="611.0" width="11.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1121.1" y="622.0"></text>
</g>
<g>
<title>[unknown] (61 samples, 0.96%)</title><rect x="1118.2" y="595.0" width="11.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1121.2" y="606.0"></text>
</g>
<g>
<title>[unknown] (60 samples, 0.94%)</title><rect x="1118.4" y="579.0" width="11.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1121.4" y="590.0"></text>
</g>
<g>
<title>[unknown] (59 samples, 0.92%)</title><rect x="1118.6" y="563.0" width="10.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1121.6" y="574.0"></text>
</g>
<g>
<title>[unknown] (57 samples, 0.89%)</title><rect x="1119.0" y="547.0" width="10.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1122.0" y="558.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 0.85%)</title><rect x="1119.5" y="531.0" width="10.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1122.5" y="542.0"></text>
</g>
<g>
<title>[unknown] (47 samples, 0.74%)</title><rect x="1120.8" y="515.0" width="8.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1123.8" y="526.0"></text>
</g>
<g>
<title>[unknown] (43 samples, 0.67%)</title><rect x="1121.6" y="499.0" width="7.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1124.6" y="510.0"></text>
</g>
<g>
<title>[unknown] (36 samples, 0.56%)</title><rect x="1122.9" y="483.0" width="6.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1125.9" y="494.0"></text>
</g>
<g>
<title>[unknown] (36 samples, 0.56%)</title><rect x="1122.9" y="467.0" width="6.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1125.9" y="478.0"></text>
</g>
<g>
<title>[unknown] (36 samples, 0.56%)</title><rect x="1122.9" y="451.0" width="6.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1125.9" y="462.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 0.53%)</title><rect x="1123.2" y="435.0" width="6.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1126.2" y="446.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.47%)</title><rect x="1124.0" y="419.0" width="5.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1127.0" y="430.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.42%)</title><rect x="1124.5" y="403.0" width="5.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1127.5" y="414.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.39%)</title><rect x="1124.9" y="387.0" width="4.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1127.9" y="398.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.39%)</title><rect x="1124.9" y="371.0" width="4.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1127.9" y="382.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.34%)</title><rect x="1125.5" y="355.0" width="4.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1128.5" y="366.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.30%)</title><rect x="1126.0" y="339.0" width="3.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1129.0" y="350.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.30%)</title><rect x="1126.0" y="323.0" width="3.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1129.0" y="334.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.30%)</title><rect x="1126.0" y="307.0" width="3.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1129.0" y="318.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.30%)</title><rect x="1126.0" y="291.0" width="3.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1129.0" y="302.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.27%)</title><rect x="1126.4" y="275.0" width="3.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1129.4" y="286.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.25%)</title><rect x="1126.6" y="259.0" width="2.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1129.6" y="270.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.20%)</title><rect x="1127.1" y="243.0" width="2.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1130.1" y="254.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.19%)</title><rect x="1127.3" y="227.0" width="2.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1130.3" y="238.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.14%)</title><rect x="1127.9" y="211.0" width="1.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1130.9" y="222.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.13%)</title><rect x="1128.0" y="195.0" width="1.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1131.0" y="206.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.13%)</title><rect x="1128.0" y="179.0" width="1.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1131.0" y="190.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.09%)</title><rect x="1128.4" y="163.0" width="1.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1131.4" y="174.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.06%)</title><rect x="1128.8" y="147.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1131.8" y="158.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.06%)</title><rect x="1128.8" y="131.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1131.8" y="142.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1129.0" y="115.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1132.0" y="126.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1129.2" y="99.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1132.2" y="110.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1129.2" y="83.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1132.2" y="94.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.03%)</title><rect x="1129.5" y="819.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1132.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="1129.5" y="803.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1132.5" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (9 samples, 0.14%)</title><rect x="1129.9" y="819.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1132.9" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (9 samples, 0.14%)</title><rect x="1129.9" y="803.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1132.9" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (8 samples, 0.13%)</title><rect x="1130.1" y="787.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1133.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.13%)</title><rect x="1130.1" y="771.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1133.1" y="782.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.06%)</title><rect x="1130.6" y="755.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1133.6" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (9 samples, 0.14%)</title><rect x="1131.6" y="851.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1134.6" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1132.1" y="835.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1135.1" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.05%)</title><rect x="1132.1" y="819.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1135.1" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.05%)</title><rect x="1132.1" y="803.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1135.1" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="1132.3" y="787.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1135.3" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="1132.7" y="835.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1135.7" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="1132.7" y="819.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1135.7" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="1133.2" y="851.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1136.2" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (41 samples, 0.64%)</title><rect x="1133.6" y="867.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1136.6" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (41 samples, 0.64%)</title><rect x="1133.6" y="851.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1136.6" y="862.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.03%)</title><rect x="1134.3" y="835.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1137.3" y="846.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="1134.7" y="835.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1137.7" y="846.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="1134.7" y="819.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1137.7" y="830.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (4 samples, 0.06%)</title><rect x="1134.7" y="803.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1137.7" y="814.0"></text>
</g>
<g>
<title>__GI___recv (29 samples, 0.45%)</title><rect x="1135.6" y="835.0" width="5.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1138.6" y="846.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.45%)</title><rect x="1135.6" y="819.0" width="5.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1138.6" y="830.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.45%)</title><rect x="1135.6" y="803.0" width="5.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1138.6" y="814.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.42%)</title><rect x="1136.0" y="787.0" width="5.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1139.0" y="798.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.39%)</title><rect x="1136.4" y="771.0" width="4.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1139.4" y="782.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.33%)</title><rect x="1137.1" y="755.0" width="3.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1140.1" y="766.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.31%)</title><rect x="1137.3" y="739.0" width="3.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1140.3" y="750.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.30%)</title><rect x="1137.5" y="723.0" width="3.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1140.5" y="734.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.22%)</title><rect x="1138.4" y="707.0" width="2.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1141.4" y="718.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.17%)</title><rect x="1139.0" y="691.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1142.0" y="702.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.09%)</title><rect x="1139.9" y="675.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1142.9" y="686.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1140.6" y="659.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1143.6" y="670.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (3 samples, 0.05%)</title><rect x="1141.2" y="915.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1144.2" y="926.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1141.2" y="899.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1144.2" y="910.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1141.2" y="883.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1144.2" y="894.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1141.2" y="867.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1144.2" y="878.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1141.2" y="851.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1144.2" y="862.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1141.2" y="835.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1144.2" y="846.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1141.2" y="819.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1144.2" y="830.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1141.2" y="803.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1144.2" y="814.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1141.2" y="787.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1144.2" y="798.0"></text>
</g>
<g>
<title>start_thread (261 samples, 4.09%)</title><rect x="1141.7" y="915.0" width="48.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1144.7" y="926.0">star..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (261 samples, 4.09%)</title><rect x="1141.7" y="899.0" width="48.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1144.7" y="910.0">thre..</text>
</g>
<g>
<title>Thread::call_run() (261 samples, 4.09%)</title><rect x="1141.7" y="883.0" width="48.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.7" y="894.0">Thre..</text>
</g>
<g>
<title>GangWorker::loop() (183 samples, 2.87%)</title><rect x="1141.7" y="867.0" width="33.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.7" y="878.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (166 samples, 2.60%)</title><rect x="1141.9" y="851.0" width="30.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.9" y="862.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (90 samples, 1.41%)</title><rect x="1141.9" y="835.0" width="16.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.9" y="846.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.03%)</title><rect x="1142.1" y="819.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.1" y="830.0"></text>
</g>
<g>
<title>SpinPause (86 samples, 1.35%)</title><rect x="1142.5" y="819.0" width="15.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1145.5" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1158.0" y="803.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1161.0" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1158.0" y="787.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1161.0" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1158.0" y="771.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1161.0" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1158.0" y="755.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1161.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1158.0" y="739.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1161.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1158.0" y="723.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1161.0" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1158.0" y="707.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1161.0" y="718.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::state_for_worker(unsigned int) (2 samples, 0.03%)</title><rect x="1158.6" y="835.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.6" y="846.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (11 samples, 0.17%)</title><rect x="1158.9" y="835.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.9" y="846.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (11 samples, 0.17%)</title><rect x="1158.9" y="819.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.9" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (11 samples, 0.17%)</title><rect x="1158.9" y="803.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.9" y="814.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (11 samples, 0.17%)</title><rect x="1158.9" y="787.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.9" y="798.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (11 samples, 0.17%)</title><rect x="1158.9" y="771.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.9" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (6 samples, 0.09%)</title><rect x="1159.1" y="755.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.1" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.05%)</title><rect x="1159.3" y="739.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.3" y="750.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (2 samples, 0.03%)</title><rect x="1159.9" y="739.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1162.9" y="750.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.123] (4 samples, 0.06%)</title><rect x="1160.2" y="755.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.2" y="766.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (4 samples, 0.06%)</title><rect x="1160.2" y="739.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.2" y="750.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (4 samples, 0.06%)</title><rect x="1161.0" y="835.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.0" y="846.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (4 samples, 0.06%)</title><rect x="1161.0" y="819.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.0" y="830.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (4 samples, 0.06%)</title><rect x="1161.0" y="803.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.0" y="814.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (3 samples, 0.05%)</title><rect x="1161.1" y="787.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.1" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (59 samples, 0.92%)</title><rect x="1161.7" y="835.0" width="10.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.7" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (48 samples, 0.75%)</title><rect x="1162.1" y="819.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.1" y="830.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (14 samples, 0.22%)</title><rect x="1162.1" y="803.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.1" y="814.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (33 samples, 0.52%)</title><rect x="1164.8" y="803.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.8" y="814.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (30 samples, 0.47%)</title><rect x="1165.4" y="787.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.4" y="798.0"></text>
</g>
<g>
<title>CompiledMethod::preserve_callee_argument_oops(frame, RegisterMap const*, OopClosure*) (2 samples, 0.03%)</title><rect x="1165.4" y="771.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.4" y="782.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 0.03%)</title><rect x="1166.0" y="771.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.0" y="782.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (2 samples, 0.03%)</title><rect x="1166.0" y="755.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.0" y="766.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (2 samples, 0.03%)</title><rect x="1166.0" y="739.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.0" y="750.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (2 samples, 0.03%)</title><rect x="1166.0" y="723.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.0" y="734.0"></text>
</g>
<g>
<title>HandleArea::oops_do(OopClosure*) (2 samples, 0.03%)</title><rect x="1166.3" y="771.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.3" y="782.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (12 samples, 0.19%)</title><rect x="1167.1" y="771.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.1" y="782.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (9 samples, 0.14%)</title><rect x="1167.3" y="755.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.3" y="766.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.03%)</title><rect x="1168.0" y="739.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.0" y="750.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (2 samples, 0.03%)</title><rect x="1168.4" y="739.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.4" y="750.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (2 samples, 0.03%)</title><rect x="1168.9" y="755.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.9" y="766.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (2 samples, 0.03%)</title><rect x="1169.3" y="771.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.3" y="782.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (2 samples, 0.03%)</title><rect x="1169.3" y="755.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.3" y="766.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.03%)</title><rect x="1169.7" y="771.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.7" y="782.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (2 samples, 0.03%)</title><rect x="1169.7" y="755.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.7" y="766.0"></text>
</g>
<g>
<title>metadata_Relocation::fix_metadata_relocation() (2 samples, 0.03%)</title><rect x="1170.0" y="771.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.0" y="782.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (3 samples, 0.05%)</title><rect x="1170.4" y="771.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.4" y="782.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (8 samples, 0.13%)</title><rect x="1171.1" y="819.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.1" y="830.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (3 samples, 0.05%)</title><rect x="1172.1" y="803.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.1" y="814.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (8 samples, 0.13%)</title><rect x="1173.2" y="851.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.2" y="862.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (8 samples, 0.13%)</title><rect x="1173.2" y="835.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.2" y="846.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.67] (5 samples, 0.08%)</title><rect x="1173.5" y="819.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.5" y="830.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.08%)</title><rect x="1173.5" y="803.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.5" y="814.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.03%)</title><rect x="1173.7" y="787.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.7" y="798.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (2 samples, 0.03%)</title><rect x="1174.1" y="787.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.1" y="798.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="1174.1" y="771.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.1" y="782.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.03%)</title><rect x="1174.1" y="755.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.1" y="766.0"></text>
</g>
<g>
<title>_init (2 samples, 0.03%)</title><rect x="1174.8" y="851.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1177.8" y="862.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="1175.2" y="851.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1178.2" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1175.2" y="835.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1178.2" y="846.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1175.2" y="819.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1178.2" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1175.2" y="803.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1178.2" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1175.2" y="787.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1178.2" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1175.2" y="771.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1178.2" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1175.2" y="755.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1178.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1175.2" y="739.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1178.2" y="750.0"></text>
</g>
<g>
<title>JavaThread::run() (34 samples, 0.53%)</title><rect x="1175.6" y="867.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.6" y="878.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (34 samples, 0.53%)</title><rect x="1175.6" y="851.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.6" y="862.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (31 samples, 0.49%)</title><rect x="1175.6" y="835.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.6" y="846.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (31 samples, 0.49%)</title><rect x="1175.6" y="819.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.6" y="830.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (29 samples, 0.45%)</title><rect x="1175.6" y="803.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.6" y="814.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (29 samples, 0.45%)</title><rect x="1175.6" y="787.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.6" y="798.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (16 samples, 0.25%)</title><rect x="1175.6" y="771.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.6" y="782.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.03%)</title><rect x="1175.9" y="755.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.9" y="766.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.03%)</title><rect x="1175.9" y="739.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.9" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.03%)</title><rect x="1176.3" y="755.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.3" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.03%)</title><rect x="1176.3" y="739.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.03%)</title><rect x="1176.3" y="723.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.3" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (10 samples, 0.16%)</title><rect x="1176.7" y="755.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.08%)</title><rect x="1176.9" y="739.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.9" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.03%)</title><rect x="1178.0" y="739.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.0" y="750.0"></text>
</g>
<g>
<title>Compile::Optimize() (7 samples, 0.11%)</title><rect x="1178.5" y="771.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (3 samples, 0.05%)</title><rect x="1178.7" y="755.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.7" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.03%)</title><rect x="1179.3" y="755.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.03%)</title><rect x="1179.3" y="739.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.09%)</title><rect x="1179.8" y="771.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.8" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.09%)</title><rect x="1179.8" y="755.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.09%)</title><rect x="1179.8" y="739.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.09%)</title><rect x="1179.8" y="723.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.09%)</title><rect x="1179.8" y="707.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.06%)</title><rect x="1179.8" y="691.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.06%)</title><rect x="1179.8" y="675.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.8" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.06%)</title><rect x="1179.8" y="659.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.06%)</title><rect x="1179.8" y="643.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.06%)</title><rect x="1179.8" y="627.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.05%)</title><rect x="1180.0" y="611.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="1180.0" y="595.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.0" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1180.0" y="579.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.0" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1180.0" y="563.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1180.0" y="547.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1180.0" y="531.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1180.0" y="515.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.0" y="526.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.03%)</title><rect x="1180.9" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="814.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.03%)</title><rect x="1180.9" y="787.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.9" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.03%)</title><rect x="1180.9" y="771.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.03%)</title><rect x="1180.9" y="755.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.9" y="766.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (2 samples, 0.03%)</title><rect x="1180.9" y="739.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="750.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.03%)</title><rect x="1180.9" y="723.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.9" y="734.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.03%)</title><rect x="1180.9" y="707.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.03%)</title><rect x="1180.9" y="691.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="702.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (3 samples, 0.05%)</title><rect x="1181.3" y="835.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="846.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (3 samples, 0.05%)</title><rect x="1181.3" y="819.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="830.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (3 samples, 0.05%)</title><rect x="1181.3" y="803.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="814.0"></text>
</g>
<g>
<title>NMethodSweeper::process_compiled_method(CompiledMethod*) (3 samples, 0.05%)</title><rect x="1181.3" y="787.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="798.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.03%)</title><rect x="1181.9" y="867.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.9" y="878.0"></text>
</g>
<g>
<title>VMThread::run() (40 samples, 0.63%)</title><rect x="1182.2" y="867.0" width="7.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="878.0"></text>
</g>
<g>
<title>VMThread::loop() (40 samples, 0.63%)</title><rect x="1182.2" y="851.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="862.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (12 samples, 0.19%)</title><rect x="1182.6" y="835.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="846.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (23 samples, 0.36%)</title><rect x="1185.2" y="835.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.2" y="846.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (23 samples, 0.36%)</title><rect x="1185.2" y="819.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.2" y="830.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (23 samples, 0.36%)</title><rect x="1185.2" y="803.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (18 samples, 0.28%)</title><rect x="1185.6" y="787.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.6" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(G1ParScanThreadStateSet*) (5 samples, 0.08%)</title><rect x="1185.7" y="771.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.7" y="782.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (3 samples, 0.05%)</title><rect x="1185.9" y="755.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.9" y="766.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (2 samples, 0.03%)</title><rect x="1186.1" y="739.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.1" y="750.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="1186.1" y="723.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1189.1" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1186.1" y="707.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1189.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1186.1" y="691.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1189.1" y="702.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1186.1" y="675.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1189.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1186.1" y="659.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1189.1" y="670.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1186.1" y="643.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1189.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1186.1" y="627.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1189.1" y="638.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1186.1" y="611.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1189.1" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (2 samples, 0.03%)</title><rect x="1186.9" y="771.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.9" y="782.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics_before_gc() (2 samples, 0.03%)</title><rect x="1186.9" y="755.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.9" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (4 samples, 0.06%)</title><rect x="1187.2" y="771.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.2" y="782.0"></text>
</g>
<g>
<title>G1Policy::record_collection_pause_end(double, unsigned long, unsigned long) (2 samples, 0.03%)</title><rect x="1188.2" y="771.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.2" y="782.0"></text>
</g>
<g>
<title>WatcherThread::run() (2 samples, 0.03%)</title><rect x="1189.6" y="867.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.6" y="878.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (2 samples, 0.03%)</title><rect x="1189.6" y="851.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.6" y="862.0"></text>
</g>
</g>
</svg>
